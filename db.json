{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next_8.8/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/images/avatar_100.jpg","path":"images/avatar_100.jpg","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/images/avatar_200.jpg","path":"images/avatar_200.jpg","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/images/avatar_300.jpg","path":"images/avatar_300.jpg","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/images/avatar_500.jpg","path":"images/avatar_500.jpg","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/images/avatar_80.jpg","path":"images/avatar_80.jpg","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/images/ye_16.ico","path":"images/ye_16.ico","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/images/ye_32.ico","path":"images/ye_32.ico","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next_8.8/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"55c55444033af34e797e2d3cb1c1b4cf7889b3db","modified":1647420734724},{"_id":"source/_posts/Algorithm.md","hash":"f8968cdcbc15c7ffc4ef9c09b1db380849e42285","modified":1648731901967},{"_id":"source/_posts/Construct-Your-Blog-with-Hexo-and-Github.md","hash":"294cabd5a5d7ece70c5bbbfeaa380867fab6ee67","modified":1647420734742},{"_id":"source/_posts/Config-Vim.md","hash":"878558ea8b5ca91f32c270382c454e48fc8af2c3","modified":1649832294193},{"_id":"source/_posts/First-Step-to-RL.md","hash":"4ba46e22a52664c0f0c94f348b770dffaea71647","modified":1649749628510},{"_id":"source/_posts/An-Introduction-to-Git.md","hash":"b5bc823ce6e92d65a54e4bf47090bff96989ce4c","modified":1649746933267},{"_id":"source/_posts/Foundation-for-Topological-Data-Analysis.md","hash":"dec7539a88fc5dd699e700ec867f0d14899cb57b","modified":1649749457572},{"_id":"source/_posts/Experiments.md","hash":"117c2a92771ce890a2c317fac6f5487e4117d68c","modified":1649749251794},{"_id":"source/_posts/Shorcut-on-Linux.md","hash":"1fc1651b88c9eb2e6959edcda3dfc5e57bd2dcf0","modified":1649746968821},{"_id":"source/_posts/Personal-Thought.md","hash":"b7d9f7b626543384f43620b90453ec498f1b95cd","modified":1649749292240},{"_id":"source/_posts/Tips-in-Papers.md","hash":"fbf98df66fa30e4ac8839b6fb9ea3dcc7692c0d2","modified":1649749600742},{"_id":"source/_posts/How-to-Blance-Losses-in-Multi-Task-Training.md","hash":"1ec8a5953f1093330e041e10eb9d2cd4dfeb6f24","modified":1649749203484},{"_id":"source/categories/index.md","hash":"408ea9b07f3b1a1339731fe7b364d88bc5644aff","modified":1647420734823},{"_id":"source/tags/index.md","hash":"3207ebf9794561395cf0c54633880ab070040ade","modified":1647420734826},{"_id":"source/_posts/First-Step-to-RL/policy_network.py","hash":"b3e8f06360cad0084a0656edaed4539f1b01e327","modified":1647420734760},{"_id":"source/_posts/First-Step-to-RL/q_learning.py","hash":"3a68ec1153d26f2c18c9d34ee5deb5e495b8dca9","modified":1647420734761},{"_id":"source/_posts/Tips-in-Papers/ADCM.jpg","hash":"ee5b75f3a063e07624c5f03111f98902d885cd8e","modified":1647420734784},{"_id":"source/_posts/Transformer-and-BERT.md","hash":"eb0d933491bed4a2da5fdd2fd41b9e6ab5db898b","modified":1649749520526},{"_id":"source/about/index.md","hash":"9aab11db0791297a1fa5e1b1767eb3a05bfb42ef","modified":1647420734819},{"_id":"source/_posts/Tips-in-Papers/Saccader_eq2.jpg","hash":"cf5832e89b29e39275d2fa4a2e39592e97f9a39e","modified":1647420734800},{"_id":"source/_posts/Tips-in-Papers/Saccader_eq1.jpg","hash":"2ea2a74f960377a6a9d0bc98ecfadd8ba09cd316","modified":1647420734797},{"_id":"source/_posts/Tips-in-Papers/Saccader_gl.jpg","hash":"fb8050f8b71a7c667cfa85672b505b3340d2231b","modified":1647420734808},{"_id":"source/_posts/Tips-in-Papers/Saccader_eq3.jpg","hash":"8fa845242bb6f737736d91485ca237e7132e19b5","modified":1647420734804},{"_id":"source/_posts/Tips-in-Papers/Saccader_Cell.jpg","hash":"b17e79bf86bb3422527bf51d200ceceeb53ce936","modified":1647420734788},{"_id":"source/_posts/Tips-in-Papers/Saccader_Over.jpg","hash":"deaccd942ffca9e163a9f2c9bdfb69251d1004cb","modified":1647420734793},{"_id":"source/_posts/Tips-in-Papers/Tnet_over.jpg","hash":"ed04ca4049c6f909b0bf51ea57ffa9a2b445e1c8","modified":1647420734812},{"_id":"source/_posts/An-Introduction-to-Git/git.jpg","hash":"db9ed8bb86df7e73d5be3bcae4cc8656e4a7a0ed","modified":1647420734734},{"_id":"themes/next_8.8/.gitignore","hash":"417520c4dbbeab9c7e3ab10d944da0886366a0ee","modified":1647420755148},{"_id":"themes/next_8.8/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1647420755046},{"_id":"themes/next_8.8/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1647420755047},{"_id":"themes/next_8.8/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1647420755051},{"_id":"themes/next_8.8/_vendors.yml","hash":"c88f3a82361ddb32cf62846a2ae1b7192b7e3af2","modified":1647420755176},{"_id":"themes/next_8.8/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1647420755157},{"_id":"themes/next_8.8/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1647420755180},{"_id":"themes/next_8.8/README.md","hash":"fab15a85d9d8d90ecd8879525b9b74fb1c197978","modified":1647420755165},{"_id":"themes/next_8.8/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1647420755155},{"_id":"themes/next_8.8/package.json","hash":"cc9a8e5bd83dd293552ed7cc1d0d2304a6b448ba","modified":1647420755604},{"_id":"themes/next_8.8/_config.yml","hash":"e53c78069ba516084547dae15db29012f80f5336","modified":1647420813470},{"_id":"themes/next_8.8/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1647420755610},{"_id":"themes/next_8.8/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1647420755101},{"_id":"themes/next_8.8/.githooks/install.js","hash":"4d77dbddf2eac1f3fc78f151d12ed22208ed655b","modified":1647420755055},{"_id":"themes/next_8.8/.githooks/pre-commit","hash":"f473eac1aaaa96c947d67988bbed140bbab1a821","modified":1647420755056},{"_id":"themes/next_8.8/.github/CODE_OF_CONDUCT.md","hash":"21cbff565a0445d3a880fff1ee417e309740a9ab","modified":1647420755060},{"_id":"themes/next_8.8/.github/CONTRIBUTING.md","hash":"330656d93b6c03df9fb1f2f0e3534c971969473b","modified":1647420755066},{"_id":"themes/next_8.8/.github/PULL_REQUEST_TEMPLATE.md","hash":"3e9fbb78e3dee0ca1dc886d0c28b0148ba0ca499","modified":1647420755094},{"_id":"themes/next_8.8/.github/labeler.yml","hash":"5c4bc2bd561e6d9b33ee118cc12218c5de46f72d","modified":1647420755112},{"_id":"themes/next_8.8/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1647420755223},{"_id":"themes/next_8.8/.github/release-drafter.yml","hash":"423275ec021104b263cd88776936a8c8d6872b66","modified":1647420755116},{"_id":"themes/next_8.8/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1647420755231},{"_id":"themes/next_8.8/.github/label-commenter-config.yml","hash":"1097fc47beeacfc1edb0248c27b17bf64bde3565","modified":1647420755108},{"_id":"themes/next_8.8/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1647420755227},{"_id":"themes/next_8.8/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1647420755237},{"_id":"themes/next_8.8/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1647420755244},{"_id":"themes/next_8.8/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1647420755107},{"_id":"themes/next_8.8/languages/es.yml","hash":"651e3b33d86a7cdb9fd7895ca28279f8b1a24faa","modified":1647420755240},{"_id":"themes/next_8.8/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1647420755248},{"_id":"themes/next_8.8/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1647420755235},{"_id":"themes/next_8.8/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1647420755252},{"_id":"themes/next_8.8/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1647420755259},{"_id":"themes/next_8.8/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1647420755267},{"_id":"themes/next_8.8/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1647420755256},{"_id":"themes/next_8.8/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1647420755275},{"_id":"themes/next_8.8/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":1647420755283},{"_id":"themes/next_8.8/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1647420755271},{"_id":"themes/next_8.8/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1647420755291},{"_id":"themes/next_8.8/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":1647420755299},{"_id":"themes/next_8.8/languages/ko.yml","hash":"6387357ac2dd498e8b8d630d27050a59180d7e8f","modified":1647420755263},{"_id":"themes/next_8.8/languages/ru.yml","hash":"e9af1afe529ca747a04b801401d394b2ad696fde","modified":1647420755279},{"_id":"themes/next_8.8/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":1647420755287},{"_id":"themes/next_8.8/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1647420755304},{"_id":"themes/next_8.8/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1647420755295},{"_id":"themes/next_8.8/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1647420755192},{"_id":"themes/next_8.8/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1647420755308},{"_id":"themes/next_8.8/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":1647420755312},{"_id":"themes/next_8.8/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1647420755186},{"_id":"themes/next_8.8/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1647420755583},{"_id":"themes/next_8.8/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1647420755594},{"_id":"themes/next_8.8/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1647420755579},{"_id":"themes/next_8.8/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1647420755182},{"_id":"themes/next_8.8/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1647420755587},{"_id":"themes/next_8.8/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1647420756509},{"_id":"themes/next_8.8/layout/page.njk","hash":"6c40aa438c658eb7f0cd0f6a759f18b43e7e8f93","modified":1647420755590},{"_id":"themes/next_8.8/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1647420755599},{"_id":"themes/next_8.8/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1647420755079},{"_id":"themes/next_8.8/.github/workflows/label-commenter.yml","hash":"44405477660289d4ed9beba1d054b15bb67bba06","modified":1647420755122},{"_id":"themes/next_8.8/.github/ISSUE_TEMPLATE/other.md","hash":"8cc5b5c116f6a052865a324512362f145d699202","modified":1647420755089},{"_id":"themes/next_8.8/.github/ISSUE_TEMPLATE/bug-report.md","hash":"fc4dce84ed9a5d21d3a8833ff6d776c46f876115","modified":1647420755073},{"_id":"themes/next_8.8/.github/workflows/labeler.yml","hash":"8b73c439dc796be141d521a4546bcfb7a5485534","modified":1647420755126},{"_id":"themes/next_8.8/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4ecac91716eac59d7c2bc53cf6e95612d44da97b","modified":1647420755083},{"_id":"themes/next_8.8/.github/workflows/linter.yml","hash":"276a91c7179926f410c784c99fa635dc0a016c2d","modified":1647420755129},{"_id":"themes/next_8.8/.github/workflows/stale.yml","hash":"0feb3e1afd1b2dca9dbc7811ce4cf5520e2d186c","modified":1647420755141},{"_id":"themes/next_8.8/.github/workflows/lock.yml","hash":"e48d1ced9a673d3f0911a700d3e68c0f4ca79263","modified":1647420755133},{"_id":"themes/next_8.8/.github/workflows/tester.yml","hash":"22aaaa3eba1a7ebcf0f78417fd9a7113ee7b6c6c","modified":1647420755144},{"_id":"themes/next_8.8/.github/workflows/release-drafter.yml","hash":"4f3af81009cb922be91f718a67425377515ea69d","modified":1647420755137},{"_id":"themes/next_8.8/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1647420755205},{"_id":"themes/next_8.8/docs/ru/README.md","hash":"87edab5a3eb7577a409c01df3f1631de40f8956f","modified":1647420755199},{"_id":"themes/next_8.8/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1647420755316},{"_id":"themes/next_8.8/layout/_macro/post.njk","hash":"d0ed41b9b05254e19d051b5f91fdcaa125ee7ca6","modified":1647420755320},{"_id":"themes/next_8.8/layout/_macro/sidebar.njk","hash":"a1575da8a34d7b7b8cf37e23ffb5d0ed2edee0fe","modified":1647420755325},{"_id":"themes/next_8.8/layout/_partials/comments.njk","hash":"c12f8a7497596441503f2541d2f746f2ee7dd594","modified":1647420755333},{"_id":"themes/next_8.8/docs/zh-CN/README.md","hash":"02bafc6ee86263790603861e356596f0c916e392","modified":1647420755218},{"_id":"themes/next_8.8/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1647420755211},{"_id":"themes/next_8.8/layout/_partials/footer.njk","hash":"a6197cc0d418d87919f929905a5e90e21b969ffa","modified":1647420755337},{"_id":"themes/next_8.8/layout/_macro/sidebar.njk_backup","hash":"eb786e8b35e354287cda345c524cd35ec955f692","modified":1647420755329},{"_id":"themes/next_8.8/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1647420755376},{"_id":"themes/next_8.8/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1647420755445},{"_id":"themes/next_8.8/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1647420755441},{"_id":"themes/next_8.8/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1647420755449},{"_id":"themes/next_8.8/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1647420755398},{"_id":"themes/next_8.8/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1647420755545},{"_id":"themes/next_8.8/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1647420755537},{"_id":"themes/next_8.8/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1647420755704},{"_id":"themes/next_8.8/scripts/filters/locals.js","hash":"0cd7da6755459d60779f0a7ccf311e26e184d55d","modified":1647420755710},{"_id":"themes/next_8.8/scripts/filters/post.js","hash":"ab8bb12e4d55640b1ac4252514468ce37ebcb0b0","modified":1647420755723},{"_id":"themes/next_8.8/layout/_third-party/index.njk","hash":"d41eeb262978e34de4679d8971a9e7ac5d90ecbc","modified":1647420755522},{"_id":"themes/next_8.8/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1647420755518},{"_id":"themes/next_8.8/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1647420755541},{"_id":"themes/next_8.8/scripts/events/index.js","hash":"1ce12eda88fa5df7e76ec7b78b8463fc6618410c","modified":1647420755614},{"_id":"themes/next_8.8/scripts/filters/minify.js","hash":"0af64049db8188d5f8cc226b353e0d7909819feb","modified":1647420755716},{"_id":"themes/next_8.8/scripts/helpers/engine.js","hash":"b9785bc737470e9b8e910e7da9e8c45c2ead58fa","modified":1647420755729},{"_id":"themes/next_8.8/scripts/helpers/next-config.js","hash":"9a07f2d979fc8fe0c5e07d48304187b9b03ea7ff","modified":1647420755742},{"_id":"themes/next_8.8/scripts/filters/number.js","hash":"63735cb9d02921e25b2606490340a70db89abbec","modified":1647420755722},{"_id":"themes/next_8.8/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1647420755736},{"_id":"themes/next_8.8/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1647420755764},{"_id":"themes/next_8.8/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1647420755771},{"_id":"themes/next_8.8/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1647420755749},{"_id":"themes/next_8.8/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1647420755784},{"_id":"themes/next_8.8/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1647420755758},{"_id":"themes/next_8.8/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1647420755778},{"_id":"themes/next_8.8/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1647420755791},{"_id":"themes/next_8.8/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1647420755797},{"_id":"themes/next_8.8/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1647420755816},{"_id":"themes/next_8.8/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1647420755811},{"_id":"themes/next_8.8/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1647420755822},{"_id":"themes/next_8.8/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1647420756263},{"_id":"themes/next_8.8/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1647420755828},{"_id":"themes/next_8.8/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1647420755805},{"_id":"themes/next_8.8/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1647420755835},{"_id":"themes/next_8.8/source/css/_mixins.styl","hash":"acef5acc728f24cb657be8d7010d836b4d556b0e","modified":1647420756132},{"_id":"themes/next_8.8/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":1647420756268},{"_id":"themes/next_8.8/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1647420755841},{"_id":"themes/next_8.8/source/images/avatar_100.jpg","hash":"a0f0a00c9326c57a5cc181aeb80dfda8e947920a","modified":1647420756279},{"_id":"themes/next_8.8/source/images/avatar_200.jpg","hash":"4a76d1527e511350c9112e899046a34be59ad278","modified":1647420756282},{"_id":"themes/next_8.8/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1647420756272},{"_id":"themes/next_8.8/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1647420756273},{"_id":"themes/next_8.8/source/images/avatar_80.jpg","hash":"465e53598964df3852f08794cb73c5e459855e92","modified":1647420756293},{"_id":"themes/next_8.8/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1647420756298},{"_id":"themes/next_8.8/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1647420756296},{"_id":"themes/next_8.8/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1647420756297},{"_id":"themes/next_8.8/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1647420756304},{"_id":"themes/next_8.8/source/images/ye_16.ico","hash":"b8fb01b5361da89831d232a831a1532e9822bd72","modified":1647420756302},{"_id":"themes/next_8.8/source/images/ye_32.ico","hash":"375c99cd785d93dd989c36604ffbd10ada71322a","modified":1647420756303},{"_id":"themes/next_8.8/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1647420756298},{"_id":"themes/next_8.8/source/js/motion.js","hash":"9c4c861dfb080b6244d4d9eba33ac686735754f3","modified":1647420756329},{"_id":"themes/next_8.8/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1647420756316},{"_id":"themes/next_8.8/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1647420756322},{"_id":"themes/next_8.8/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1647420756310},{"_id":"themes/next_8.8/source/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1647420756341},{"_id":"themes/next_8.8/source/js/schedule.js","hash":"2b43e2d576a308289880befc27580dbb2aa34439","modified":1647420756347},{"_id":"themes/next_8.8/source/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1647420756335},{"_id":"themes/next_8.8/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1647420756501},{"_id":"themes/next_8.8/source/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1647420756487},{"_id":"themes/next_8.8/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1647420756495},{"_id":"themes/next_8.8/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1647420756520},{"_id":"themes/next_8.8/test/helpers/next-url.js","hash":"a91d880cb75e0a8e65a7be4c7362b2c8ebfb7c4f","modified":1647420756502},{"_id":"themes/next_8.8/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1647420756514},{"_id":"themes/next_8.8/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1647420756538},{"_id":"themes/next_8.8/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1647420756554},{"_id":"themes/next_8.8/test/tags/group-pictures.js","hash":"5c68ae0184f9da6e00ba199f2554d503d8e6da71","modified":1647420756532},{"_id":"themes/next_8.8/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1647420756526},{"_id":"themes/next_8.8/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1647420756548},{"_id":"themes/next_8.8/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1647420756543},{"_id":"themes/next_8.8/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1647420756559},{"_id":"themes/next_8.8/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1647420756565},{"_id":"themes/next_8.8/layout/_partials/head/head-unique.njk","hash":"9167e429a459686c9fc140790124a46d677e6b15","modified":1647420755346},{"_id":"themes/next_8.8/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1647420756582},{"_id":"themes/next_8.8/layout/_partials/head/head.njk","hash":"d3c094aaef1431fbc9df333529a7b1789ccd134c","modified":1647420755350},{"_id":"themes/next_8.8/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1647420756577},{"_id":"themes/next_8.8/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1647420756571},{"_id":"themes/next_8.8/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1647420755384},{"_id":"themes/next_8.8/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":1647420755380},{"_id":"themes/next_8.8/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1647420755387},{"_id":"themes/next_8.8/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1647420755395},{"_id":"themes/next_8.8/layout/_partials/page/schedule.njk","hash":"ca2ccf3cf1874c45712f192ad45dea96fbd9920d","modified":1647420755391},{"_id":"themes/next_8.8/layout/_partials/header/brand.njk","hash":"aff4613756456be26415febc668860fdab8d33c5","modified":1647420755354},{"_id":"themes/next_8.8/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1647420755358},{"_id":"themes/next_8.8/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":1647420755361},{"_id":"themes/next_8.8/layout/_partials/header/menu.njk","hash":"8561e4125b227e5134cb058e2a76fb2e5233ca29","modified":1647420755366},{"_id":"themes/next_8.8/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":1647420755370},{"_id":"themes/next_8.8/layout/_partials/post/post-footer.njk","hash":"bde2c7356d9362972bde41cc206d5816f8ed714d","modified":1647420755408},{"_id":"themes/next_8.8/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1647420755403},{"_id":"themes/next_8.8/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1647420755399},{"_id":"themes/next_8.8/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1647420755411},{"_id":"themes/next_8.8/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1647420755425},{"_id":"themes/next_8.8/layout/_partials/post/post-related.njk","hash":"7384e6390067ef2a84e7310d6adb3f6104ed62e2","modified":1647420755416},{"_id":"themes/next_8.8/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":1647420755420},{"_id":"themes/next_8.8/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1647420755432},{"_id":"themes/next_8.8/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1647420755428},{"_id":"themes/next_8.8/layout/_partials/sidebar/site-overview.njk","hash":"3d8591bb92df77ceb9d5b07bc76da1ca89e5bd76","modified":1647420755436},{"_id":"themes/next_8.8/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1647420755466},{"_id":"themes/next_8.8/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1647420755453},{"_id":"themes/next_8.8/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":1647420755460},{"_id":"themes/next_8.8/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1647420755463},{"_id":"themes/next_8.8/layout/_third-party/analytics/index.njk","hash":"2d36a481a70d5f450f1f166dc556ac1218b18537","modified":1647420755471},{"_id":"themes/next_8.8/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1647420755474},{"_id":"themes/next_8.8/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1647420755477},{"_id":"themes/next_8.8/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1647420755492},{"_id":"themes/next_8.8/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1647420755482},{"_id":"themes/next_8.8/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1647420755487},{"_id":"themes/next_8.8/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1647420755497},{"_id":"themes/next_8.8/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1647420755500},{"_id":"themes/next_8.8/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1647420755510},{"_id":"themes/next_8.8/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":1647420755530},{"_id":"themes/next_8.8/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1647420755506},{"_id":"themes/next_8.8/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1647420755549},{"_id":"themes/next_8.8/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1647420755526},{"_id":"themes/next_8.8/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1647420755534},{"_id":"themes/next_8.8/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1647420755513},{"_id":"themes/next_8.8/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1647420755556},{"_id":"themes/next_8.8/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1647420755564},{"_id":"themes/next_8.8/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1647420755552},{"_id":"themes/next_8.8/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1647420755568},{"_id":"themes/next_8.8/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1647420755561},{"_id":"themes/next_8.8/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1647420755575},{"_id":"themes/next_8.8/scripts/events/lib/config.js","hash":"b0ced2583fdd505da3ef27a9db9c55cc7b936732","modified":1647420755621},{"_id":"themes/next_8.8/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1647420755572},{"_id":"themes/next_8.8/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1647420755627},{"_id":"themes/next_8.8/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1647420755632},{"_id":"themes/next_8.8/scripts/events/lib/vendors.js","hash":"08dac57e15c9f06c7cf54884b045f2362595f9d2","modified":1647420755647},{"_id":"themes/next_8.8/scripts/events/lib/utils.js","hash":"b281be775b693f9bf32766c8f6ef703c72ac9b00","modified":1647420755639},{"_id":"themes/next_8.8/scripts/filters/comment/changyan.js","hash":"aa05e6b3d613a756178b8ba06832ad27499d4c14","modified":1647420755654},{"_id":"themes/next_8.8/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1647420755666},{"_id":"themes/next_8.8/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1647420755659},{"_id":"themes/next_8.8/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1647420755660},{"_id":"themes/next_8.8/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":1647420755674},{"_id":"themes/next_8.8/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1647420755686},{"_id":"themes/next_8.8/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1647420755680},{"_id":"themes/next_8.8/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1647420755693},{"_id":"themes/next_8.8/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1647420756234},{"_id":"themes/next_8.8/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1647420755698},{"_id":"themes/next_8.8/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1647420756245},{"_id":"themes/next_8.8/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1647420756239},{"_id":"themes/next_8.8/source/css/_variables/base.styl","hash":"163c7441d777bee87042d475e6ce0fde199add28","modified":1647420756255},{"_id":"themes/next_8.8/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1647420756250},{"_id":"themes/next_8.8/source/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1647420756354},{"_id":"themes/next_8.8/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1647420756435},{"_id":"themes/next_8.8/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1647420756420},{"_id":"themes/next_8.8/source/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":1647420756441},{"_id":"themes/next_8.8/source/css/_common/components/back-to-top.styl","hash":"bab653bcf226311381e8411a0492202f1bf1fce9","modified":1647420755846},{"_id":"themes/next_8.8/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1647420756447},{"_id":"themes/next_8.8/source/css/_common/components/index.styl","hash":"fe1868f47681e00a33a96199302be85377282f63","modified":1647420755849},{"_id":"themes/next_8.8/source/css/_common/scaffolding/base.styl","hash":"0805d7db96b6c83b31e8d023d1ae88f6d2969133","modified":1647420756048},{"_id":"themes/next_8.8/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1647420755924},{"_id":"themes/next_8.8/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1647420756059},{"_id":"themes/next_8.8/source/css/_common/scaffolding/base.styl_backup","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1647420756054},{"_id":"themes/next_8.8/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1647420756063},{"_id":"themes/next_8.8/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1647420756076},{"_id":"themes/next_8.8/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1647420756075},{"_id":"themes/next_8.8/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1647420756128},{"_id":"themes/next_8.8/source/css/_common/scaffolding/pagination.styl","hash":"b5c7782368889fa9fd93807d28ff2daf270e3703","modified":1647420756077},{"_id":"themes/next_8.8/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1647420755993},{"_id":"themes/next_8.8/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1647420756139},{"_id":"themes/next_8.8/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1647420755997},{"_id":"themes/next_8.8/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1647420756080},{"_id":"themes/next_8.8/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1647420756152},{"_id":"themes/next_8.8/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1647420756176},{"_id":"themes/next_8.8/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1647420756182},{"_id":"themes/next_8.8/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":1647420756170},{"_id":"themes/next_8.8/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1647420756145},{"_id":"themes/next_8.8/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1647420756186},{"_id":"themes/next_8.8/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1647420756200},{"_id":"themes/next_8.8/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":1647420756164},{"_id":"themes/next_8.8/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":1647420756193},{"_id":"themes/next_8.8/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1647420756201},{"_id":"themes/next_8.8/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":1647420756219},{"_id":"themes/next_8.8/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1647420756196},{"_id":"themes/next_8.8/source/css/_schemes/Pisces/_header.styl","hash":"b741ab96e73370711c63a6581159f2ea8b5bfa1b","modified":1647420756205},{"_id":"themes/next_8.8/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1647420756225},{"_id":"themes/next_8.8/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1647420756228},{"_id":"themes/next_8.8/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1647420756215},{"_id":"themes/next_8.8/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1647420756208},{"_id":"themes/next_8.8/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1647420756364},{"_id":"themes/next_8.8/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1647420756370},{"_id":"themes/next_8.8/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1647420756374},{"_id":"themes/next_8.8/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1647420756360},{"_id":"themes/next_8.8/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1647420756382},{"_id":"themes/next_8.8/source/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":1647420756388},{"_id":"themes/next_8.8/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1647420756380},{"_id":"themes/next_8.8/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1647420756399},{"_id":"themes/next_8.8/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1647420756394},{"_id":"themes/next_8.8/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1647420756400},{"_id":"themes/next_8.8/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1647420756410},{"_id":"themes/next_8.8/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1647420756426},{"_id":"themes/next_8.8/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1647420756415},{"_id":"themes/next_8.8/source/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1647420756452},{"_id":"themes/next_8.8/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1647420756406},{"_id":"themes/next_8.8/source/js/third-party/tags/mermaid.js","hash":"3dc4628efa6debd6490fc0ebddff2424a7b319d8","modified":1647420756478},{"_id":"themes/next_8.8/source/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1647420756465},{"_id":"themes/next_8.8/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1647420756430},{"_id":"themes/next_8.8/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1647420756483},{"_id":"themes/next_8.8/source/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":1647420756459},{"_id":"themes/next_8.8/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1647420756471},{"_id":"themes/next_8.8/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1647420755862},{"_id":"themes/next_8.8/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1647420755863},{"_id":"themes/next_8.8/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1647420755858},{"_id":"themes/next_8.8/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1647420755854},{"_id":"themes/next_8.8/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1647420755867},{"_id":"themes/next_8.8/source/css/_common/components/post/index.styl","hash":"d0805a763176b3c0003967401644f41dfe3bc9e8","modified":1647420755871},{"_id":"themes/next_8.8/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1647420755896},{"_id":"themes/next_8.8/source/css/_common/components/post/post-followme.styl","hash":"fc1a7bac6493f24aa50665574f37f3dd954f210c","modified":1647420755887},{"_id":"themes/next_8.8/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1647420755881},{"_id":"themes/next_8.8/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1647420755902},{"_id":"themes/next_8.8/source/css/_common/components/post/post-body.styl","hash":"ea351936d71e0b6259febac3d7d56d1be6927bf9","modified":1647420755875},{"_id":"themes/next_8.8/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1647420755891},{"_id":"themes/next_8.8/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":1647420755913},{"_id":"themes/next_8.8/source/css/_common/components/third-party/index.styl","hash":"fb0b9eaca498be8af0bc430171a17becf87f8554","modified":1647420755935},{"_id":"themes/next_8.8/source/css/_common/components/third-party/gitalk.styl","hash":"070737d101e7cd58e997e8c7af09958268c43a21","modified":1647420755932},{"_id":"themes/next_8.8/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1647420755908},{"_id":"themes/next_8.8/source/css/_common/components/third-party/disqusjs.styl","hash":"c2326ee3e8b724d99c24a818ddee32813ea5bf89","modified":1647420755928},{"_id":"themes/next_8.8/source/css/_common/components/third-party/related-posts.styl","hash":"41ed817e1eb64078074e245e771446ee041e5790","modified":1647420755945},{"_id":"themes/next_8.8/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1647420755949},{"_id":"themes/next_8.8/source/css/_common/components/post/post-widgets.styl","hash":"b6677dc2a2368084ab82bb4f145ac79e5966c150","modified":1647420755919},{"_id":"themes/next_8.8/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1647420755941},{"_id":"themes/next_8.8/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1647420755955},{"_id":"themes/next_8.8/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1647420756084},{"_id":"themes/next_8.8/source/css/_common/scaffolding/highlight/index.styl","hash":"0b3e2696eca39781c3524b2c5a2555ebc616e6e8","modified":1647420756071},{"_id":"themes/next_8.8/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1647420756067},{"_id":"themes/next_8.8/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1647420756094},{"_id":"themes/next_8.8/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1647420756090},{"_id":"themes/next_8.8/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1647420756097},{"_id":"themes/next_8.8/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1647420756109},{"_id":"themes/next_8.8/source/css/_common/scaffolding/tags/note.styl","hash":"d27fbf7799695295dd5860a161a13ac4d90c5ba4","modified":1647420756113},{"_id":"themes/next_8.8/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1647420756101},{"_id":"themes/next_8.8/source/css/_common/scaffolding/tags/tabs.styl","hash":"9b34143aec49e390e18f380026a45096f7477722","modified":1647420756121},{"_id":"themes/next_8.8/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1647420756117},{"_id":"themes/next_8.8/source/css/_common/outline/footer/index.styl","hash":"8b9407e5cfd0571ef8de7df19022b268f962fa2f","modified":1647420755959},{"_id":"themes/next_8.8/source/css/_common/outline/header/site-meta.styl","hash":"759e582d34d08e3386c55d87a835a9523608619f","modified":1647420755986},{"_id":"themes/next_8.8/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1647420755969},{"_id":"themes/next_8.8/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1647420755965},{"_id":"themes/next_8.8/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1647420755980},{"_id":"themes/next_8.8/source/css/_common/outline/header/index.styl","hash":"650ed4ad6df1b6ff04647e7b6d568304e4d3ed2e","modified":1647420755974},{"_id":"themes/next_8.8/source/css/_common/outline/sidebar/index.styl","hash":"cee43480eba028c37d51cb620c2d81486aa24e01","modified":1647420756003},{"_id":"themes/next_8.8/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1647420755989},{"_id":"themes/next_8.8/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1647420756009},{"_id":"themes/next_8.8/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1647420756026},{"_id":"themes/next_8.8/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1647420756013},{"_id":"themes/next_8.8/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":1647420756035},{"_id":"themes/next_8.8/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1647420756021},{"_id":"themes/next_8.8/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"ee94a1a27090ad24e3ed579093088d97ff96d77d","modified":1647420756029},{"_id":"themes/next_8.8/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1647420756016},{"_id":"themes/next_8.8/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"3103b81fc76b59e1e2c161e2c484625c770ed66f","modified":1647420756039},{"_id":"themes/next_8.8/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1647420756042},{"_id":"themes/next_8.8/source/images/avatar.jpg","hash":"ed5dde31684ebfd99e9965da1140fb919496f1d3","modified":1647420756275},{"_id":"themes/next_8.8/source/images/avatar_300.jpg","hash":"13b3ca4593cd3c96d4f973b26ec9dbe51e28ed29","modified":1647420756286},{"_id":"themes/next_8.8/source/images/avatar_500.jpg","hash":"fa083b4b1260c2ee43810fc4819e958196ff7d49","modified":1647420756289},{"_id":"public/sitemap.xml","hash":"81715a737f8c2cafce6dff33083198502077efc9","modified":1649832472825},{"_id":"public/about/index.html","hash":"e9f28292e0c74a6d3adf5f47647f2d77940c0e7e","modified":1649749660299},{"_id":"public/categories/index.html","hash":"7645c345724dbb0e13bdd80a77912b9f7556c125","modified":1649749660299},{"_id":"public/tags/index.html","hash":"1fae7873efb20b0de0ecfcc22ad2f5486f1b5d76","modified":1649749660299},{"_id":"public/2021/12/18/Transformer-and-BERT/index.html","hash":"f9846a91bf2ebfb4af42cad7a4f635301d726fdc","modified":1649749660299},{"_id":"public/2021/12/17/Algorithm/index.html","hash":"7cd26a8215415f79151640f367c92185c649f30d","modified":1649749660299},{"_id":"public/2021/12/10/An-Introduction-to-Git/index.html","hash":"cf335c8200a254301f561de86433352414bee228","modified":1649749660299},{"_id":"public/page/2/index.html","hash":"3fc7a9dcc5424fefbe9016d603de3f2bbf4ec698","modified":1649749660299},{"_id":"public/categories/Programming/index.html","hash":"0ae16e398d82f1271ef0437bdb8618b51f40f54d","modified":1649749660299},{"_id":"public/categories/Little-Things/index.html","hash":"edc48286f89912530e036fcc919fc40b2e23e8c9","modified":1649746973010},{"_id":"public/categories/Experiments/index.html","hash":"508ee8eeae5dd8b242a613bb4307dc567c02a4ed","modified":1649746833670},{"_id":"public/categories/Reinforcement-Learning/index.html","hash":"b0f73704b01f964502d685425c096df3bf0948ce","modified":1649749530006},{"_id":"public/categories/Little-Things/Git/index.html","hash":"42683a1850d4e843003f040f330376813cb489af","modified":1649746833670},{"_id":"public/categories/Topological-Data-Analysis/index.html","hash":"80f1ef4a80ec6e914974687c7143f9e99b6a61e4","modified":1649746833670},{"_id":"public/categories/About-Papers/index.html","hash":"51b354cad87150e34be10c9b0e054a1b174ff48d","modified":1649749530006},{"_id":"public/categories/Little-Things/Linux/index.html","hash":"09218be002e123f0bb598f7348d91e466ed250be","modified":1649746833670},{"_id":"public/categories/Natural-Language-Processing/index.html","hash":"8538710cf2c3c8569f2efc1c24b1333f1ab4ff63","modified":1649746833670},{"_id":"public/tags/Algorithm/index.html","hash":"a1ac40df4577a7fd31418dc66f44ecc367ba4cc9","modified":1649749660299},{"_id":"public/tags/Programming/index.html","hash":"a4f6c6c17038e37e22e7524d3d8029841be0a988","modified":1649749660299},{"_id":"public/tags/Git/index.html","hash":"7c3e66460cf5d092a390a383c15e757f19286bfb","modified":1649749660299},{"_id":"public/tags/vim/index.html","hash":"bf70b1e1ec905f8cf7bf4d5bf9260ebfeb347606","modified":1649746833670},{"_id":"public/tags/markdown/index.html","hash":"cfce1a5a0d738a66a0446cfde8dc9f06f3d98138","modified":1649746833670},{"_id":"public/tags/vimtex/index.html","hash":"41225608d0582f0c0522c89019ec99902b0e290e","modified":1649746833670},{"_id":"public/tags/Personal-Thought/index.html","hash":"b5b22918d22938ae094e7b7a0926bee176d64387","modified":1649749660299},{"_id":"public/tags/Experiments/index.html","hash":"1d6726f8dc29a6e04d0a064cd74948fe2765002a","modified":1649749660299},{"_id":"public/tags/private/index.html","hash":"de46a7e83caa63effc4c3559da94817f4a31a402","modified":1649749660299},{"_id":"public/tags/Reinforcement-Learning/index.html","hash":"4a62a6e0e59a00dc2919fdb802666e2b19a9927c","modified":1649749660299},{"_id":"public/tags/Topological-Data-Analysis/index.html","hash":"7f1f471f56908822a0fe86483952b31f877b0194","modified":1649749660299},{"_id":"public/tags/Multi-Task-Training/index.html","hash":"becaeb7229bd9a79377a26382baf07f72ddc4979","modified":1649749660299},{"_id":"public/tags/Papers/index.html","hash":"d6ebd57d4b9e675388bb770eb63a7e64617e40d6","modified":1649749660299},{"_id":"public/tags/Linux/index.html","hash":"a46c3d57a3e7fe7bbbad59416ca807eed8a3dce2","modified":1649749660299},{"_id":"public/tags/Natural-Language-Processing/index.html","hash":"cf1b0803714e47ee2d8b3d5c7810d0ccb4605ac9","modified":1649749660299},{"_id":"public/tags/Transformer/index.html","hash":"dae670cdfedc89410edd674543982e5acb4a461f","modified":1649749660299},{"_id":"public/tags/BERT/index.html","hash":"6b09dc7e96f6472d6b7e053e9ad4687ad64f9ae6","modified":1649749660299},{"_id":"public/archives/index.html","hash":"55928a2c4e40e73ff5300b6c1d07cfbe83473b06","modified":1649749660299},{"_id":"public/archives/page/2/index.html","hash":"e2b00374cd35cbd5c62d0b59cd92a989b8294791","modified":1649749660299},{"_id":"public/archives/2021/index.html","hash":"2ec8f2f1007edbca0da9883664b99f7c23b09cc1","modified":1649749660299},{"_id":"public/archives/2021/12/index.html","hash":"831b210f1549e2dd93da8c7f85d5cf61a1e72fcd","modified":1649749660299},{"_id":"public/archives/2022/index.html","hash":"094de0a8c5913cc69fa2ca90d4284b14dc768cab","modified":1649749660299},{"_id":"public/archives/2022/01/index.html","hash":"ed7d84845c7c28b58e187038a4adf11f183e8863","modified":1649749660299},{"_id":"public/archives/2022/02/index.html","hash":"e315d3900885108eb568418d361e7bb608d3f8aa","modified":1649749660299},{"_id":"public/2022/02/10/Shorcut-on-Linux/index.html","hash":"f640705a192b18dd0135d45d4e0f75f1ff8efa7b","modified":1649749660299},{"_id":"public/2022/01/10/How-to-Blance-Losses-in-Multi-Task-Training/index.html","hash":"e6ecd4f8d91556cc3e4ee5063f79627bb5034c9f","modified":1649749660299},{"_id":"public/2022/01/20/Config-Vim/index.html","hash":"d13ed2cb9e48b478d9dc749a971b2a41421749f9","modified":1649832472825},{"_id":"public/2021/12/30/Foundation-for-Topological-Data-Analysis/index.html","hash":"1a91b1cac61b05f6ea85808e08ba25a118823c65","modified":1649749660299},{"_id":"public/2021/12/17/Experiments/index.html","hash":"c5a1b7ee1e5eb0254f8f57aef4a5c29dba4cf57f","modified":1649749660299},{"_id":"public/2021/12/15/Personal-Thought/index.html","hash":"bb561c3d9e74d8a69af23f5ee2ea0f1e5384071a","modified":1649749660299},{"_id":"public/2021/12/14/Tips-in-Papers/index.html","hash":"b9bbb7faf3835e7e3c9ac8585d798134e7ead9f4","modified":1649749660299},{"_id":"public/2021/12/03/First-Step-to-RL/index.html","hash":"f631b015f197f716435592b1d8fcc0a889a92c4c","modified":1649749660299},{"_id":"public/2021/11/24/Construct-Your-Blog-with-Hexo-and-Github/index.html","hash":"67be75b45e15f25bec79327a7ca0686bcebdc7d4","modified":1649749660299},{"_id":"public/index.html","hash":"722d36431a72e1adbc0b20bc5d013d9f516afec9","modified":1649832472825},{"_id":"public/CNAME","hash":"55c55444033af34e797e2d3cb1c1b4cf7889b3db","modified":1647430033229},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1647430033229},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1647430033229},{"_id":"public/images/avatar_100.jpg","hash":"a0f0a00c9326c57a5cc181aeb80dfda8e947920a","modified":1647430033229},{"_id":"public/images/avatar_200.jpg","hash":"4a76d1527e511350c9112e899046a34be59ad278","modified":1647430033229},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1647430033229},{"_id":"public/images/avatar_80.jpg","hash":"465e53598964df3852f08794cb73c5e459855e92","modified":1647430033229},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1647430033229},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1647430033229},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1647430033229},{"_id":"public/images/ye_16.ico","hash":"b8fb01b5361da89831d232a831a1532e9822bd72","modified":1647430033229},{"_id":"public/images/ye_32.ico","hash":"375c99cd785d93dd989c36604ffbd10ada71322a","modified":1647430033229},{"_id":"public/2021/12/03/First-Step-to-RL/policy_network.py","hash":"b3e8f06360cad0084a0656edaed4539f1b01e327","modified":1647430033229},{"_id":"public/2021/12/03/First-Step-to-RL/q_learning.py","hash":"3a68ec1153d26f2c18c9d34ee5deb5e495b8dca9","modified":1647430033229},{"_id":"public/2021/12/14/Tips-in-Papers/ADCM.jpg","hash":"ee5b75f3a063e07624c5f03111f98902d885cd8e","modified":1647430033229},{"_id":"public/2021/12/14/Tips-in-Papers/Saccader_eq2.jpg","hash":"cf5832e89b29e39275d2fa4a2e39592e97f9a39e","modified":1647430033229},{"_id":"public/2021/12/14/Tips-in-Papers/Saccader_eq1.jpg","hash":"2ea2a74f960377a6a9d0bc98ecfadd8ba09cd316","modified":1647430033229},{"_id":"public/2021/12/14/Tips-in-Papers/Saccader_gl.jpg","hash":"fb8050f8b71a7c667cfa85672b505b3340d2231b","modified":1647430033229},{"_id":"public/2021/12/14/Tips-in-Papers/Saccader_eq3.jpg","hash":"8fa845242bb6f737736d91485ca237e7132e19b5","modified":1647430033229},{"_id":"public/css/hbe.style.css","hash":"b0a0077cb588c0941823905fcc383aa7509ade73","modified":1647430033229},{"_id":"public/lib/hbe.js","hash":"136dba00826bdd086153bf0acb5473aea7183ad1","modified":1647430033229},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1647430033229},{"_id":"public/js/motion.js","hash":"9c4c861dfb080b6244d4d9eba33ac686735754f3","modified":1647430033229},{"_id":"public/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1647430033229},{"_id":"public/js/schedule.js","hash":"2b43e2d576a308289880befc27580dbb2aa34439","modified":1647430033229},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1647430033229},{"_id":"public/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1647430033229},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1647430033229},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1647430033229},{"_id":"public/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1647430033229},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1647430033229},{"_id":"public/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":1647430033229},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1647430033229},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1647430033229},{"_id":"public/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1647430033229},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1647430033229},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1647430033229},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1647430033229},{"_id":"public/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":1647430033229},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1647430033229},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1647430033229},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1647430033229},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1647430033229},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1647430033229},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1647430033229},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1647430033229},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1647430033229},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1647430033229},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1647430033229},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1647430033229},{"_id":"public/css/main.css","hash":"2b9e134ea77c81001b2471bf42117e5cacdd104c","modified":1647430033229},{"_id":"public/images/avatar_300.jpg","hash":"13b3ca4593cd3c96d4f973b26ec9dbe51e28ed29","modified":1647430033229},{"_id":"public/images/avatar.jpg","hash":"ed5dde31684ebfd99e9965da1140fb919496f1d3","modified":1647430033229},{"_id":"public/2021/12/14/Tips-in-Papers/Saccader_Cell.jpg","hash":"b17e79bf86bb3422527bf51d200ceceeb53ce936","modified":1647430033229},{"_id":"public/2021/12/14/Tips-in-Papers/Saccader_Over.jpg","hash":"deaccd942ffca9e163a9f2c9bdfb69251d1004cb","modified":1647430033229},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1647430033229},{"_id":"public/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":1647430033229},{"_id":"public/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1647430033229},{"_id":"public/js/third-party/tags/mermaid.js","hash":"3dc4628efa6debd6490fc0ebddff2424a7b319d8","modified":1647430033229},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1647430033229},{"_id":"public/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1647430033229},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1647430033229},{"_id":"public/images/avatar_500.jpg","hash":"fa083b4b1260c2ee43810fc4819e958196ff7d49","modified":1647430033229},{"_id":"public/2021/12/14/Tips-in-Papers/Tnet_over.jpg","hash":"ed04ca4049c6f909b0bf51ea57ffa9a2b445e1c8","modified":1647430033229},{"_id":"public/2021/12/10/An-Introduction-to-Git/git.jpg","hash":"db9ed8bb86df7e73d5be3bcae4cc8656e4a7a0ed","modified":1647430033229},{"_id":"source/_posts/Regex.md","hash":"8666287f3b4182dfd87754c3e143e0454533c0c0","modified":1649748138731},{"_id":"public/2022/04/12/Regex/index.html","hash":"1258d1eccbebc91902698b69a7a0d19a31ec6d0d","modified":1649749660299},{"_id":"public/tags/Regex/index.html","hash":"6f03c632d9954e82ec9a5c640a44685fe687d79d","modified":1649749660299},{"_id":"public/archives/2022/04/index.html","hash":"9472bf09212d1bd2318744882423067a50576c6e","modified":1649749660299},{"_id":"public/categories/Programming/Linux/index.html","hash":"801454749e3f8beb1d25887cc0fe759f68738de4","modified":1649749660299},{"_id":"public/categories/Programming/Git/index.html","hash":"f2efc701de0d83e64319854521ecf6a5af1763b1","modified":1649749660299},{"_id":"public/categories/Programming/Vim/index.html","hash":"7e141d8b5c6306bba471c7785d05550f992cc532","modified":1649749660299},{"_id":"public/categories/Machine-Learning/index.html","hash":"843337fb9fafc84a4ff6abffd556b46660e20e35","modified":1649749660299},{"_id":"public/categories/Machine-Learning/Topological-Data-Analysis/index.html","hash":"c4b23f6cb01a98f7ba58ac875b4c9c04da50b73b","modified":1649749660299},{"_id":"public/categories/Machine-Learning/About-Papers/index.html","hash":"e127a7c89cbb326d5f8caaf2378d4787c8f3fe2b","modified":1649749660299},{"_id":"public/categories/Machine-Learning/Experiments/index.html","hash":"d4daad14f3777d2bdb21af14887ce20caf35daf1","modified":1649749660299},{"_id":"public/categories/Machine-Learning/Natural-Language-Processing/index.html","hash":"0fc336ebb75efb94856636a209747f368de7296a","modified":1649749660299},{"_id":"public/categories/Machine-Learning/Optimization/index.html","hash":"98bd0002ec3b36a97539e88f782bfb6188422f69","modified":1649749660299},{"_id":"public/tags/Vim/index.html","hash":"59917428431331b2022be0464263d25a7a030876","modified":1649749660299},{"_id":"public/tags/Machine-Learning/index.html","hash":"ab0ad8ff6fcd88e3e0ae4874c0a277489d03b44c","modified":1649749530006},{"_id":"public/categories/Machine-Learning/Reinforcement-Learning/index.html","hash":"0e00d31be749562f02e7927b3d43da4c3f92f9f7","modified":1649749660299}],"Category":[{"name":"Programming","_id":"cl0thb1hs0004gqulbpvqfwm0"},{"name":"Little Things","_id":"cl0thb1hx000agqul4h2j8yl1"},{"name":"Experiments","_id":"cl0thb1i6000rgqulfmb69b84"},{"name":"Reinforcement Learning","_id":"cl0thb1i7000wgqulbykt89t7"},{"name":"Git","parent":"cl0thb1hx000agqul4h2j8yl1","_id":"cl0thb1i8000zgqul0ndr2k3p"},{"name":"Topological Data Analysis","_id":"cl0thb1i90012gqulgc8s0484"},{"name":"Hexo","parent":"cl0thb1hx000agqul4h2j8yl1","_id":"cl0thb1ia0016gqulenq1dwuo"},{"name":"About Papers","_id":"cl0thb1ia001cgqulhij4h0me"},{"name":"Linux","parent":"cl0thb1hx000agqul4h2j8yl1","_id":"cl0thb1ib001fgqul6oeu9tnu"},{"name":"Natural Language Processing","_id":"cl0thb1id001ogqulfkkq3pr6"},{"name":"Git","parent":"cl0thb1hs0004gqulbpvqfwm0","_id":"cl1vsr3r700006hulhsm09xjs"},{"name":"Linux","parent":"cl0thb1hs0004gqulbpvqfwm0","_id":"cl1vsr3ra00016hul8fo96y0s"},{"name":"Vim","parent":"cl0thb1hs0004gqulbpvqfwm0","_id":"cl1vu9wqb0001kdul0g670pic"},{"name":"Machine Learning","_id":"cl1vu9wqc0002kdulbi7f9z7x"},{"name":"Topological Data Analysis","parent":"cl1vu9wqc0002kdulbi7f9z7x","_id":"cl1vu9wqd0006kdulacqzcctm"},{"name":"About Papers","parent":"cl1vu9wqc0002kdulbi7f9z7x","_id":"cl1vu9wr10009kdul8x2octli"},{"name":"Experiments","parent":"cl1vu9wqc0002kdulbi7f9z7x","_id":"cl1vu9wr4000bkdul0u0u15pj"},{"name":"Natural Language Processing","parent":"cl1vu9wqc0002kdulbi7f9z7x","_id":"cl1vu9wr5000ekdulbg423r82"},{"name":"Optimization","parent":"cl1vu9wqc0002kdulbi7f9z7x","_id":"cl1vu9wr5000hkdul3zknafxd"},{"name":"Reinforcement Learning","parent":"cl1vu9wqc0002kdulbi7f9z7x","_id":"cl1vuc59500007nul8hxobzie"}],"Data":[],"Page":[{"title":"about","date":"2021-12-12T13:52:49.000Z","_content":"\n\n\n<!-- I received the B.S. degree in the School of Engineering and Technology, China University of Geosciences (Beijing) in 2015. I am currently working towards the Ph.D degree in the Beijing Key Laboratory of Work Safety Intelligent Monitoring, the Department of EE, BUPT. -->\n\n<!-- I major in deep learning, computer vision, natural language processing, and reinforcement learning. -->\n\n<!-- I am also interested in high performance computing. -->\n\n<br/>\n\n<br/>\n\n---\n\n<br/>\n\n<br/>\n\n> ​     *There is a pleasure in the pathless woods;*\n> ​     *there is a rapture on the lonely shore;*\n> ​     *there is society, where none intrudes,*\n> ​     *by the deep sea, and music in its roar;*\n> ​     *I love not man the less, but nature more...*\n> ​                          *by George Gordon Byron* \n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-12-12 21:52:49\n---\n\n\n\n<!-- I received the B.S. degree in the School of Engineering and Technology, China University of Geosciences (Beijing) in 2015. I am currently working towards the Ph.D degree in the Beijing Key Laboratory of Work Safety Intelligent Monitoring, the Department of EE, BUPT. -->\n\n<!-- I major in deep learning, computer vision, natural language processing, and reinforcement learning. -->\n\n<!-- I am also interested in high performance computing. -->\n\n<br/>\n\n<br/>\n\n---\n\n<br/>\n\n<br/>\n\n> ​     *There is a pleasure in the pathless woods;*\n> ​     *there is a rapture on the lonely shore;*\n> ​     *there is society, where none intrudes,*\n> ​     *by the deep sea, and music in its roar;*\n> ​     *I love not man the less, but nature more...*\n> ​                          *by George Gordon Byron* \n\n","updated":"2022-03-16T08:52:14.819Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl0thb1hk0000gqulhlzre7o2","content":"<!-- I received the B.S. degree in the School of Engineering and Technology, China University of Geosciences (Beijing) in 2015. I am currently working towards the Ph.D degree in the Beijing Key Laboratory of Work Safety Intelligent Monitoring, the Department of EE, BUPT. --><!-- I major in deep learning, computer vision, natural language processing, and reinforcement learning. --><!-- I am also interested in high performance computing. --><html><head></head><body><br>\n<br>\n<hr>\n<br>\n<br>\n<blockquote>\n<p>​     <em>There is a pleasure in the pathless woods;</em>\n​     <em>there is a rapture on the lonely shore;</em>\n​     <em>there is society, where none intrudes,</em>\n​     <em>by the deep sea, and music in its roar;</em>\n​     <em>I love not man the less, but nature more…</em>\n​                          <em>by George Gordon Byron</em></p>\n</blockquote>\n</body></html>","site":{"data":{}},"excerpt":"<html><head></head><body></body></html>","more":"<!-- I received the B.S. degree in the School of Engineering and Technology, China University of Geosciences (Beijing) in 2015. I am currently working towards the Ph.D degree in the Beijing Key Laboratory of Work Safety Intelligent Monitoring, the Department of EE, BUPT. -->\n<!-- I major in deep learning, computer vision, natural language processing, and reinforcement learning. -->\n<!-- I am also interested in high performance computing. -->\n<br/>\n<br/>\n<hr />\n<br/>\n<br/>\n<blockquote>\n<p>​     <em>There is a pleasure in the pathless woods;</em>\n​     <em>there is a rapture on the lonely shore;</em>\n​     <em>there is society, where none intrudes,</em>\n​     <em>by the deep sea, and music in its roar;</em>\n​     <em>I love not man the less, but nature more…</em>\n​                          <em>by George Gordon Byron</em></p>\n</blockquote>\n"},{"title":"categories","date":"2021-11-24T11:46:36.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-11-24 19:46:36\ntype: \"categories\"\n---\n","updated":"2022-03-16T08:52:14.823Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl0thb1hp0002gqulezj77qop","content":"<html><head></head><body></body></html>","site":{"data":{}},"excerpt":"<html><head></head><body></body></html>","more":""},{"title":"tags","date":"2021-12-08T06:48:06.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-12-08 14:48:06\ntype: \"tags\"\n---\n","updated":"2022-03-16T08:52:14.826Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl0thb1ht0006gqulgu7p1t5x","content":"<html><head></head><body></body></html>","site":{"data":{}},"excerpt":"<html><head></head><body></body></html>","more":""}],"Post":[{"title":"Algorithm","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-12-17T08:26:10.000Z","password":null,"summary":null,"description":"遇到过精巧的算法设计","_content":"\n# Depth First Search\n\n## Longest Increasing Path in a Matrix\n\nGiven an $m \\times n$ integers matrix, return the length of the longest\nincreasing path in matrix.\n\nMove direction: left, right, up, or down.\n\n```python\nclass Solution:\n\n    DIRS = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        if not matrix:\n            return 0\n\n        @lru_cache(None) # save  the storage\n        def find_max(i, j):\n        # find the next value and try the four directions\n        # return the longest direction.\n            max_ = 1\n            for dr in Solution.DIRS:\n                try_i = i + dr[0]\n                try_j = j + dr[1]\n                # the direction will be discarded if do not meet the condition\n                # and a direction meet the condition will be searched for the next\n                # value first.\n                if 0 <= try_i and try_i < n and 0<= try_j and try_j < m and \\\n                matrix[i][j] < matrix[try_i][try_j]:\n                    max_ = max(max_, find_max(try_i, try_j) + 1)\n                    # The value is increasing, so by setting `matrix[i][j] \\\n                    # < matrix[try_i][try_j]`, a searched position will never\n                    # be searched again.\n            return max_\n\n        n, m = len(matrix), len(matrix[0])\n        res = 0\n        for i in range(n):\n            for j in  range(m):\n                res = max(res, find_max(i, j))\n        return res\n\n```\n\n## Keyboard\n\nA keyboard only have 26 keys, `a~z`. Each key can be only typed `k` times at\nmost.\n\nHow many possible content there is, when the keyboard is typed `n` times?\n\n### Method 1: dfs\n\n```python\n class Solution:\n    # depth first search: from the first letter to the last letter\n    # fill the n positions.\n    def keyboard(self, k: int, n: int) -> int:\n        MOD = 1000000007\n\n        # c is the number of remain letters\n        # n is the number of letters needed to type in\n        # k is the max number that each letter can type\n        @lru_cache(None)\n        def dfs(c, n, k):\n            if n == 0:\n                # no letters is needed any more\n                # only 1 way: type nothing\n                # pick 0 letters\n                return 1\n            if c <= 0:\n                # no letter remained but n is not 0\n                # this is a failed type scheme\n                return 0\n            res = 0\n            for i in range(0, min(n, k) + 1):\n            # there are math.comb(n, i) ways to put i letters\n            # into n position.\n                res += math.comb(n, i) * dfs(c-1, n - i, k) % MOD\n            return res % MOD\n        ans = dfs(26, n, k)\n        return ans % MOD\n```\n\n### Method 2: dynamic programming\n\n```python\nclass Solution:\n    def keyboard(self, k: int, n: int) -> int:\n        MOD = 1000000007\n        res = [[0 for _ in range(27)] for _ in range(n + 1)]\n        # res[i][j] is the number of possibilities when first j letters\n        # is used to fill i positions.\n        # when the position is 0, no matter how many letters are used.\n        # there is only one possibility, i.e., filling nothing.\n        # thus, res[0][i] are all 1.\n        res[0][0] = 1\n        for i in range(27):\n            res[0][i] = 1\n\n        # res[i][j] can be divided into several possibilities.\n        # When 0 letter is filled for the $j^{th}$ letter, res[i][j-1]\n        # when 1 letter is filled for the j-th letter, res[i-1][j-1]\n        # * C_i^1\n        # when 2 letters are filled for the j-th letter, res[i-2][j-1]\n        # * C_i^2\n        # C_i^m represent how many possibilities there are filling m of\n        # the same letters into i positions.\n        # m can be 0, but can not be larger than k or i.\n        for i in range(1, n + 1):\n            for j in range(1, 27):\n                for m in range(min(i + 1, k + 1)):\n                    res[i][j] += res[i - m][j - 1] * math.comb(i, m)\n                    res[i][j] %= MOD\n\n        return res[-1][-1] % MOD\n```\n\n# Other\n\n## The Gas Station\n\nThere are `n` stations along a circular route, where the amount of gas at the\n$i^{th}$ station is gas[i].\n\nA car costs cost[i] of gas to travel from the $i^{th}$ station to its next\n$(i + 1)^{th}$ station.\n\nCan the car run a circle. If can, return the start station. If not, return -1.\nIf there exists a solution, it is guaranteed to be the unique.\n\n```python\nclass Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int\n        n = len(gas)\n        res = [0] * n\n        # a car pass station i, it can get gas[i] and cost\n        # cost[i]. Thus gets gas[i] - cost[i].\n\n        # if in station i, gas[i] - cost[i] >= 0, it can\n        # arrive the next station.\n        # after arrive the next station, and gets the station\n        # if the remain >= 0 it can gets the next next station.\n        for i in range(n):\n            res[i] = gas[i] - cost[i]\n        first = 0\n        second = 0\n        sum_ = res[0]\n        key = False\n        # second represents the station the car already getting.\n        # first represents the starting station.\n        # sum_ represents if the car can get the next staion.\n        # if sum_ >= 0, it can, else, it can not.\n        while True:\n            if sum_ >= 0:\n                second += 1\n                if second == n:\n                    second = 0\n                    key = True\n                if key and second == first:\n                    return first\n                sum_ += res[second]\n            else:\n                sum_ -= res[first]\n                first += 1\n                # from 0 to n, first do not find an answer, return -1.\n                if first == n:\n                    return -1\n                else:\n                    if first > second:\n                        second += 1\n                        sum_ += res[second\n```\n\nConsider this, if y is the first station that the car can not arrive from x.\nThat is to say $\\sum_{i = y}^x res[i] < 0$. For a station z between x and y. It\ncan arrive z from x, which means the sum $> 0$. Then from z to y, the sum is\ndefinitely $< 0$. It can not arrive y from z.\n\nThus, if a car can not arrive y from x, it can not arrive y from any station\nbetween x and y. It is no need to search such stations.\n\n```python\nclass Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        n = len(gas)\n        res = [0] * n\n        for i in range(n):\n            res[i] = gas[i] - cost[i]\n        first = 0\n        second = 0\n        sum_ = res[0]\n        key = False\n        while True:\n            if sum_ >= 0:\n                second += 1\n                if second == n:\n                    second = 0\n                    key = True\n                if key and second == first:\n                    return first\n                sum_ += res[second]\n            else:\n            # if can not arrive second + 1, then\n            # starting from second + 1\n                second += 1\n                first = second\n                # if the new starting point equal or bigger than\n                # n, first move from 0 to n fails to find.\n                # if key is True, second + 1 is actually larger than\n                # n, first move from 0 to n fails to find.\n                if first == n or key:\n                    return -1\n                sum_ = res[first]\n```\n","source":"_posts/Algorithm.md","raw":"---\ntitle: Algorithm\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-12-17 16:26:10\npassword:\nsummary:\ndescription: 遇到过精巧的算法设计\ncategories:\n  - Programming\ntags:\n  - Algorithm\n  - Programming\n---\n\n# Depth First Search\n\n## Longest Increasing Path in a Matrix\n\nGiven an $m \\times n$ integers matrix, return the length of the longest\nincreasing path in matrix.\n\nMove direction: left, right, up, or down.\n\n```python\nclass Solution:\n\n    DIRS = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        if not matrix:\n            return 0\n\n        @lru_cache(None) # save  the storage\n        def find_max(i, j):\n        # find the next value and try the four directions\n        # return the longest direction.\n            max_ = 1\n            for dr in Solution.DIRS:\n                try_i = i + dr[0]\n                try_j = j + dr[1]\n                # the direction will be discarded if do not meet the condition\n                # and a direction meet the condition will be searched for the next\n                # value first.\n                if 0 <= try_i and try_i < n and 0<= try_j and try_j < m and \\\n                matrix[i][j] < matrix[try_i][try_j]:\n                    max_ = max(max_, find_max(try_i, try_j) + 1)\n                    # The value is increasing, so by setting `matrix[i][j] \\\n                    # < matrix[try_i][try_j]`, a searched position will never\n                    # be searched again.\n            return max_\n\n        n, m = len(matrix), len(matrix[0])\n        res = 0\n        for i in range(n):\n            for j in  range(m):\n                res = max(res, find_max(i, j))\n        return res\n\n```\n\n## Keyboard\n\nA keyboard only have 26 keys, `a~z`. Each key can be only typed `k` times at\nmost.\n\nHow many possible content there is, when the keyboard is typed `n` times?\n\n### Method 1: dfs\n\n```python\n class Solution:\n    # depth first search: from the first letter to the last letter\n    # fill the n positions.\n    def keyboard(self, k: int, n: int) -> int:\n        MOD = 1000000007\n\n        # c is the number of remain letters\n        # n is the number of letters needed to type in\n        # k is the max number that each letter can type\n        @lru_cache(None)\n        def dfs(c, n, k):\n            if n == 0:\n                # no letters is needed any more\n                # only 1 way: type nothing\n                # pick 0 letters\n                return 1\n            if c <= 0:\n                # no letter remained but n is not 0\n                # this is a failed type scheme\n                return 0\n            res = 0\n            for i in range(0, min(n, k) + 1):\n            # there are math.comb(n, i) ways to put i letters\n            # into n position.\n                res += math.comb(n, i) * dfs(c-1, n - i, k) % MOD\n            return res % MOD\n        ans = dfs(26, n, k)\n        return ans % MOD\n```\n\n### Method 2: dynamic programming\n\n```python\nclass Solution:\n    def keyboard(self, k: int, n: int) -> int:\n        MOD = 1000000007\n        res = [[0 for _ in range(27)] for _ in range(n + 1)]\n        # res[i][j] is the number of possibilities when first j letters\n        # is used to fill i positions.\n        # when the position is 0, no matter how many letters are used.\n        # there is only one possibility, i.e., filling nothing.\n        # thus, res[0][i] are all 1.\n        res[0][0] = 1\n        for i in range(27):\n            res[0][i] = 1\n\n        # res[i][j] can be divided into several possibilities.\n        # When 0 letter is filled for the $j^{th}$ letter, res[i][j-1]\n        # when 1 letter is filled for the j-th letter, res[i-1][j-1]\n        # * C_i^1\n        # when 2 letters are filled for the j-th letter, res[i-2][j-1]\n        # * C_i^2\n        # C_i^m represent how many possibilities there are filling m of\n        # the same letters into i positions.\n        # m can be 0, but can not be larger than k or i.\n        for i in range(1, n + 1):\n            for j in range(1, 27):\n                for m in range(min(i + 1, k + 1)):\n                    res[i][j] += res[i - m][j - 1] * math.comb(i, m)\n                    res[i][j] %= MOD\n\n        return res[-1][-1] % MOD\n```\n\n# Other\n\n## The Gas Station\n\nThere are `n` stations along a circular route, where the amount of gas at the\n$i^{th}$ station is gas[i].\n\nA car costs cost[i] of gas to travel from the $i^{th}$ station to its next\n$(i + 1)^{th}$ station.\n\nCan the car run a circle. If can, return the start station. If not, return -1.\nIf there exists a solution, it is guaranteed to be the unique.\n\n```python\nclass Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int\n        n = len(gas)\n        res = [0] * n\n        # a car pass station i, it can get gas[i] and cost\n        # cost[i]. Thus gets gas[i] - cost[i].\n\n        # if in station i, gas[i] - cost[i] >= 0, it can\n        # arrive the next station.\n        # after arrive the next station, and gets the station\n        # if the remain >= 0 it can gets the next next station.\n        for i in range(n):\n            res[i] = gas[i] - cost[i]\n        first = 0\n        second = 0\n        sum_ = res[0]\n        key = False\n        # second represents the station the car already getting.\n        # first represents the starting station.\n        # sum_ represents if the car can get the next staion.\n        # if sum_ >= 0, it can, else, it can not.\n        while True:\n            if sum_ >= 0:\n                second += 1\n                if second == n:\n                    second = 0\n                    key = True\n                if key and second == first:\n                    return first\n                sum_ += res[second]\n            else:\n                sum_ -= res[first]\n                first += 1\n                # from 0 to n, first do not find an answer, return -1.\n                if first == n:\n                    return -1\n                else:\n                    if first > second:\n                        second += 1\n                        sum_ += res[second\n```\n\nConsider this, if y is the first station that the car can not arrive from x.\nThat is to say $\\sum_{i = y}^x res[i] < 0$. For a station z between x and y. It\ncan arrive z from x, which means the sum $> 0$. Then from z to y, the sum is\ndefinitely $< 0$. It can not arrive y from z.\n\nThus, if a car can not arrive y from x, it can not arrive y from any station\nbetween x and y. It is no need to search such stations.\n\n```python\nclass Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        n = len(gas)\n        res = [0] * n\n        for i in range(n):\n            res[i] = gas[i] - cost[i]\n        first = 0\n        second = 0\n        sum_ = res[0]\n        key = False\n        while True:\n            if sum_ >= 0:\n                second += 1\n                if second == n:\n                    second = 0\n                    key = True\n                if key and second == first:\n                    return first\n                sum_ += res[second]\n            else:\n            # if can not arrive second + 1, then\n            # starting from second + 1\n                second += 1\n                first = second\n                # if the new starting point equal or bigger than\n                # n, first move from 0 to n fails to find.\n                # if key is True, second + 1 is actually larger than\n                # n, first move from 0 to n fails to find.\n                if first == n or key:\n                    return -1\n                sum_ = res[first]\n```\n","slug":"Algorithm","published":1,"updated":"2022-03-31T13:05:01.967Z","_id":"cl0thb1hm0001gqul0l6oda4w","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><h1 id=\"depth-first-search\"><span class=\"post-title-index\">1. </span><a class=\"markdownIt-Anchor\" href=\"#depth-first-search\"></a> Depth First Search</h1>\n<h2 id=\"longest-increasing-path-in-a-matrix\"><span class=\"post-title-index\">1.1. </span><a class=\"markdownIt-Anchor\" href=\"#longest-increasing-path-in-a-matrix\"></a> Longest Increasing Path in a Matrix</h2>\n<p>Given an <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">m \\times n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> integers matrix, return the length of the longest\nincreasing path in matrix.</p>\n<p>Move direction: left, right, up, or down.</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    DIRS = [(-<span class=\"number\">1</span>, <span class=\"number\">0</span>), (<span class=\"number\">1</span>, <span class=\"number\">0</span>), (<span class=\"number\">0</span>, -<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"number\">1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">longestIncreasingPath</span>(<span class=\"params\">self, matrix: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> matrix:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">        @lru_cache(<span class=\"params\"><span class=\"literal\">None</span></span>) </span><span class=\"comment\"># save  the storage</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find_max</span>(<span class=\"params\">i, j</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># find the next value and try the four directions</span></span><br><span class=\"line\">        <span class=\"comment\"># return the longest direction.</span></span><br><span class=\"line\">            max_ = <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> dr <span class=\"keyword\">in</span> Solution.DIRS:</span><br><span class=\"line\">                try_i = i + dr[<span class=\"number\">0</span>]</span><br><span class=\"line\">                try_j = j + dr[<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"comment\"># the direction will be discarded if do not meet the condition</span></span><br><span class=\"line\">                <span class=\"comment\"># and a direction meet the condition will be searched for the next</span></span><br><span class=\"line\">                <span class=\"comment\"># value first.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt;= try_i <span class=\"keyword\">and</span> try_i &lt; n <span class=\"keyword\">and</span> <span class=\"number\">0</span>&lt;= try_j <span class=\"keyword\">and</span> try_j &lt; m <span class=\"keyword\">and</span> \\</span><br><span class=\"line\">                matrix[i][j] &lt; matrix[try_i][try_j]:</span><br><span class=\"line\">                    max_ = <span class=\"built_in\">max</span>(max_, find_max(try_i, try_j) + <span class=\"number\">1</span>)</span><br><span class=\"line\">                    <span class=\"comment\"># The value is increasing, so by setting `matrix[i][j] \\</span></span><br><span class=\"line\">                    <span class=\"comment\"># &lt; matrix[try_i][try_j]`, a searched position will never</span></span><br><span class=\"line\">                    <span class=\"comment\"># be searched again.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> max_</span><br><span class=\"line\"></span><br><span class=\"line\">        n, m = <span class=\"built_in\">len</span>(matrix), <span class=\"built_in\">len</span>(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span>  <span class=\"built_in\">range</span>(m):</span><br><span class=\"line\">                res = <span class=\"built_in\">max</span>(res, find_max(i, j))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"keyboard\"><span class=\"post-title-index\">1.2. </span><a class=\"markdownIt-Anchor\" href=\"#keyboard\"></a> Keyboard</h2>\n<p>A keyboard only have 26 keys, <code>a~z</code>. Each key can be only typed <code>k</code> times at\nmost.</p>\n<p>How many possible content there is, when the keyboard is typed <code>n</code> times?</p>\n<h3 id=\"method-1-dfs\"><span class=\"post-title-index\">1.2.1. </span><a class=\"markdownIt-Anchor\" href=\"#method-1-dfs\"></a> Method 1: dfs</h3>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">   <span class=\"comment\"># depth first search: from the first letter to the last letter</span></span><br><span class=\"line\">   <span class=\"comment\"># fill the n positions.</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">keyboard</span>(<span class=\"params\">self, k: <span class=\"built_in\">int</span>, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">       MOD = <span class=\"number\">1000000007</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"># c is the number of remain letters</span></span><br><span class=\"line\">       <span class=\"comment\"># n is the number of letters needed to type in</span></span><br><span class=\"line\">       <span class=\"comment\"># k is the max number that each letter can type</span></span><br><span class=\"line\"><span class=\"meta\">       @lru_cache(<span class=\"params\"><span class=\"literal\">None</span></span>)</span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span>(<span class=\"params\">c, n, k</span>):</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>:</span><br><span class=\"line\">               <span class=\"comment\"># no letters is needed any more</span></span><br><span class=\"line\">               <span class=\"comment\"># only 1 way: type nothing</span></span><br><span class=\"line\">               <span class=\"comment\"># pick 0 letters</span></span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> c &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">               <span class=\"comment\"># no letter remained but n is not 0</span></span><br><span class=\"line\">               <span class=\"comment\"># this is a failed type scheme</span></span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">           res = <span class=\"number\">0</span></span><br><span class=\"line\">           <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">min</span>(n, k) + <span class=\"number\">1</span>):</span><br><span class=\"line\">           <span class=\"comment\"># there are math.comb(n, i) ways to put i letters</span></span><br><span class=\"line\">           <span class=\"comment\"># into n position.</span></span><br><span class=\"line\">               res += math.comb(n, i) * dfs(c-<span class=\"number\">1</span>, n - i, k) % MOD</span><br><span class=\"line\">           <span class=\"keyword\">return</span> res % MOD</span><br><span class=\"line\">       ans = dfs(<span class=\"number\">26</span>, n, k)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> ans % MOD</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"method-2-dynamic-programming\"><span class=\"post-title-index\">1.2.2. </span><a class=\"markdownIt-Anchor\" href=\"#method-2-dynamic-programming\"></a> Method 2: dynamic programming</h3>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">keyboard</span>(<span class=\"params\">self, k: <span class=\"built_in\">int</span>, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">        MOD = <span class=\"number\">1000000007</span></span><br><span class=\"line\">        res = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">27</span>)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n + <span class=\"number\">1</span>)]</span><br><span class=\"line\">        <span class=\"comment\"># res[i][j] is the number of possibilities when first j letters</span></span><br><span class=\"line\">        <span class=\"comment\"># is used to fill i positions.</span></span><br><span class=\"line\">        <span class=\"comment\"># when the position is 0, no matter how many letters are used.</span></span><br><span class=\"line\">        <span class=\"comment\"># there is only one possibility, i.e., filling nothing.</span></span><br><span class=\"line\">        <span class=\"comment\"># thus, res[0][i] are all 1.</span></span><br><span class=\"line\">        res[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">27</span>):</span><br><span class=\"line\">            res[<span class=\"number\">0</span>][i] = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># res[i][j] can be divided into several possibilities.</span></span><br><span class=\"line\">        <span class=\"comment\"># When 0 letter is filled for the $j^{th}$ letter, res[i][j-1]</span></span><br><span class=\"line\">        <span class=\"comment\"># when 1 letter is filled for the j-th letter, res[i-1][j-1]</span></span><br><span class=\"line\">        <span class=\"comment\"># * C_i^1</span></span><br><span class=\"line\">        <span class=\"comment\"># when 2 letters are filled for the j-th letter, res[i-2][j-1]</span></span><br><span class=\"line\">        <span class=\"comment\"># * C_i^2</span></span><br><span class=\"line\">        <span class=\"comment\"># C_i^m represent how many possibilities there are filling m of</span></span><br><span class=\"line\">        <span class=\"comment\"># the same letters into i positions.</span></span><br><span class=\"line\">        <span class=\"comment\"># m can be 0, but can not be larger than k or i.</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n + <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">27</span>):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">min</span>(i + <span class=\"number\">1</span>, k + <span class=\"number\">1</span>)):</span><br><span class=\"line\">                    res[i][j] += res[i - m][j - <span class=\"number\">1</span>] * math.comb(i, m)</span><br><span class=\"line\">                    res[i][j] %= MOD</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res[-<span class=\"number\">1</span>][-<span class=\"number\">1</span>] % MOD</span><br></pre></td></tr></tbody></table></figure>\n<h1 id=\"other\"><span class=\"post-title-index\">2. </span><a class=\"markdownIt-Anchor\" href=\"#other\"></a> Other</h1>\n<h2 id=\"the-gas-station\"><span class=\"post-title-index\">2.1. </span><a class=\"markdownIt-Anchor\" href=\"#the-gas-station\"></a> The Gas Station</h2>\n<p>There are <code>n</code> stations along a circular route, where the amount of gas at the\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>i</mi><mrow><mi>t</mi><mi>h</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">i^{th}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">h</span></span></span></span></span></span></span></span></span></span></span></span> station is gas[i].</p>\n<p>A car costs cost[i] of gas to travel from the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>i</mi><mrow><mi>t</mi><mi>h</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">i^{th}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">h</span></span></span></span></span></span></span></span></span></span></span></span> station to its next\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mrow><mi>t</mi><mi>h</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">(i + 1)^{th}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">h</span></span></span></span></span></span></span></span></span></span></span></span> station.</p>\n<p>Can the car run a circle. If can, return the start station. If not, return -1.\nIf there exists a solution, it is guaranteed to be the unique.</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">canCompleteCircuit</span>(<span class=\"params\">self, gas: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], cost: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span></span></span><br><span class=\"line\"><span class=\"function\">        n = <span class=\"built_in\">len</span>(gas)</span></span><br><span class=\"line\"><span class=\"function\">        res = [0] * n</span></span><br><span class=\"line\"><span class=\"function\">        # a car <span class=\"keyword\">pass</span> station i, it can get gas[i] <span class=\"keyword\">and</span> cost</span></span><br><span class=\"line\"><span class=\"function\">        # cost[i]. Thus gets gas[i] - cost[i].</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">        # <span class=\"keyword\">if</span> <span class=\"keyword\">in</span> station i, gas[i] - cost[i] &gt;= 0, it can</span></span><br><span class=\"line\"><span class=\"function\">        # arrive the <span class=\"built_in\">next</span> station.</span></span><br><span class=\"line\"><span class=\"function\">        # after arrive the <span class=\"built_in\">next</span> station, <span class=\"keyword\">and</span> gets the station</span></span><br><span class=\"line\"><span class=\"function\">        # <span class=\"keyword\">if</span> the remain &gt;= 0 it can gets the <span class=\"built_in\">next</span> <span class=\"built_in\">next</span> station.</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span></span><br><span class=\"line\">            res[i] = gas[i] - cost[i]</span><br><span class=\"line\">        first = <span class=\"number\">0</span></span><br><span class=\"line\">        second = <span class=\"number\">0</span></span><br><span class=\"line\">        sum_ = res[<span class=\"number\">0</span>]</span><br><span class=\"line\">        key = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"comment\"># second represents the station the car already getting.</span></span><br><span class=\"line\">        <span class=\"comment\"># first represents the starting station.</span></span><br><span class=\"line\">        <span class=\"comment\"># sum_ represents if the car can get the next staion.</span></span><br><span class=\"line\">        <span class=\"comment\"># if sum_ &gt;= 0, it can, else, it can not.</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> sum_ &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">                second += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> second == n:</span><br><span class=\"line\">                    second = <span class=\"number\">0</span></span><br><span class=\"line\">                    key = <span class=\"literal\">True</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> key <span class=\"keyword\">and</span> second == first:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> first</span><br><span class=\"line\">                sum_ += res[second]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                sum_ -= res[first]</span><br><span class=\"line\">                first += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"comment\"># from 0 to n, first do not find an answer, return -1.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> first == n:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> first &gt; second:</span><br><span class=\"line\">                        second += <span class=\"number\">1</span></span><br><span class=\"line\">                        sum_ += res[second</span><br></pre></td></tr></tbody></table></figure>\n<p>Consider this, if y is the first station that the car can not arrive from x.\nThat is to say <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>y</mi></mrow><mi>x</mi></msubsup><mi>r</mi><mi>e</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\sum_{i = y}^x res[i] &lt; 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.24011em;vertical-align:-0.43581800000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>. For a station z between x and y. It\ncan arrive z from x, which means the sum <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">&gt; 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>. Then from z to y, the sum is\ndefinitely <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">&lt; 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>. It can not arrive y from z.</p>\n<p>Thus, if a car can not arrive y from x, it can not arrive y from any station\nbetween x and y. It is no need to search such stations.</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">canCompleteCircuit</span>(<span class=\"params\">self, gas: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], cost: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(gas)</span><br><span class=\"line\">        res = [<span class=\"number\">0</span>] * n</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            res[i] = gas[i] - cost[i]</span><br><span class=\"line\">        first = <span class=\"number\">0</span></span><br><span class=\"line\">        second = <span class=\"number\">0</span></span><br><span class=\"line\">        sum_ = res[<span class=\"number\">0</span>]</span><br><span class=\"line\">        key = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> sum_ &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">                second += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> second == n:</span><br><span class=\"line\">                    second = <span class=\"number\">0</span></span><br><span class=\"line\">                    key = <span class=\"literal\">True</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> key <span class=\"keyword\">and</span> second == first:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> first</span><br><span class=\"line\">                sum_ += res[second]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\"># if can not arrive second + 1, then</span></span><br><span class=\"line\">            <span class=\"comment\"># starting from second + 1</span></span><br><span class=\"line\">                second += <span class=\"number\">1</span></span><br><span class=\"line\">                first = second</span><br><span class=\"line\">                <span class=\"comment\"># if the new starting point equal or bigger than</span></span><br><span class=\"line\">                <span class=\"comment\"># n, first move from 0 to n fails to find.</span></span><br><span class=\"line\">                <span class=\"comment\"># if key is True, second + 1 is actually larger than</span></span><br><span class=\"line\">                <span class=\"comment\"># n, first move from 0 to n fails to find.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> first == n <span class=\"keyword\">or</span> key:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">                sum_ = res[first]</span><br></pre></td></tr></tbody></table></figure>\n</body></html>","site":{"data":{}},"excerpt":"<html><head></head><body></body></html>","more":"<h1 id=\"depth-first-search\"><a class=\"markdownIt-Anchor\" href=\"#depth-first-search\"></a> Depth First Search</h1>\n<h2 id=\"longest-increasing-path-in-a-matrix\"><a class=\"markdownIt-Anchor\" href=\"#longest-increasing-path-in-a-matrix\"></a> Longest Increasing Path in a Matrix</h2>\n<p>Given an <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">m \\times n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> integers matrix, return the length of the longest\nincreasing path in matrix.</p>\n<p>Move direction: left, right, up, or down.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    DIRS = [(-<span class=\"number\">1</span>, <span class=\"number\">0</span>), (<span class=\"number\">1</span>, <span class=\"number\">0</span>), (<span class=\"number\">0</span>, -<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"number\">1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">longestIncreasingPath</span>(<span class=\"params\">self, matrix: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> matrix:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">        @lru_cache(<span class=\"params\"><span class=\"literal\">None</span></span>) </span><span class=\"comment\"># save  the storage</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find_max</span>(<span class=\"params\">i, j</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># find the next value and try the four directions</span></span><br><span class=\"line\">        <span class=\"comment\"># return the longest direction.</span></span><br><span class=\"line\">            max_ = <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> dr <span class=\"keyword\">in</span> Solution.DIRS:</span><br><span class=\"line\">                try_i = i + dr[<span class=\"number\">0</span>]</span><br><span class=\"line\">                try_j = j + dr[<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"comment\"># the direction will be discarded if do not meet the condition</span></span><br><span class=\"line\">                <span class=\"comment\"># and a direction meet the condition will be searched for the next</span></span><br><span class=\"line\">                <span class=\"comment\"># value first.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt;= try_i <span class=\"keyword\">and</span> try_i &lt; n <span class=\"keyword\">and</span> <span class=\"number\">0</span>&lt;= try_j <span class=\"keyword\">and</span> try_j &lt; m <span class=\"keyword\">and</span> \\</span><br><span class=\"line\">                matrix[i][j] &lt; matrix[try_i][try_j]:</span><br><span class=\"line\">                    max_ = <span class=\"built_in\">max</span>(max_, find_max(try_i, try_j) + <span class=\"number\">1</span>)</span><br><span class=\"line\">                    <span class=\"comment\"># The value is increasing, so by setting `matrix[i][j] \\</span></span><br><span class=\"line\">                    <span class=\"comment\"># &lt; matrix[try_i][try_j]`, a searched position will never</span></span><br><span class=\"line\">                    <span class=\"comment\"># be searched again.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> max_</span><br><span class=\"line\"></span><br><span class=\"line\">        n, m = <span class=\"built_in\">len</span>(matrix), <span class=\"built_in\">len</span>(matrix[<span class=\"number\">0</span>])</span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span>  <span class=\"built_in\">range</span>(m):</span><br><span class=\"line\">                res = <span class=\"built_in\">max</span>(res, find_max(i, j))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"keyboard\"><a class=\"markdownIt-Anchor\" href=\"#keyboard\"></a> Keyboard</h2>\n<p>A keyboard only have 26 keys, <code>a~z</code>. Each key can be only typed <code>k</code> times at\nmost.</p>\n<p>How many possible content there is, when the keyboard is typed <code>n</code> times?</p>\n<h3 id=\"method-1-dfs\"><a class=\"markdownIt-Anchor\" href=\"#method-1-dfs\"></a> Method 1: dfs</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">   <span class=\"comment\"># depth first search: from the first letter to the last letter</span></span><br><span class=\"line\">   <span class=\"comment\"># fill the n positions.</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">keyboard</span>(<span class=\"params\">self, k: <span class=\"built_in\">int</span>, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">       MOD = <span class=\"number\">1000000007</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"># c is the number of remain letters</span></span><br><span class=\"line\">       <span class=\"comment\"># n is the number of letters needed to type in</span></span><br><span class=\"line\">       <span class=\"comment\"># k is the max number that each letter can type</span></span><br><span class=\"line\"><span class=\"meta\">       @lru_cache(<span class=\"params\"><span class=\"literal\">None</span></span>)</span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span>(<span class=\"params\">c, n, k</span>):</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>:</span><br><span class=\"line\">               <span class=\"comment\"># no letters is needed any more</span></span><br><span class=\"line\">               <span class=\"comment\"># only 1 way: type nothing</span></span><br><span class=\"line\">               <span class=\"comment\"># pick 0 letters</span></span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> c &lt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">               <span class=\"comment\"># no letter remained but n is not 0</span></span><br><span class=\"line\">               <span class=\"comment\"># this is a failed type scheme</span></span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">           res = <span class=\"number\">0</span></span><br><span class=\"line\">           <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">min</span>(n, k) + <span class=\"number\">1</span>):</span><br><span class=\"line\">           <span class=\"comment\"># there are math.comb(n, i) ways to put i letters</span></span><br><span class=\"line\">           <span class=\"comment\"># into n position.</span></span><br><span class=\"line\">               res += math.comb(n, i) * dfs(c-<span class=\"number\">1</span>, n - i, k) % MOD</span><br><span class=\"line\">           <span class=\"keyword\">return</span> res % MOD</span><br><span class=\"line\">       ans = dfs(<span class=\"number\">26</span>, n, k)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> ans % MOD</span><br></pre></td></tr></table></figure>\n<h3 id=\"method-2-dynamic-programming\"><a class=\"markdownIt-Anchor\" href=\"#method-2-dynamic-programming\"></a> Method 2: dynamic programming</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">keyboard</span>(<span class=\"params\">self, k: <span class=\"built_in\">int</span>, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">        MOD = <span class=\"number\">1000000007</span></span><br><span class=\"line\">        res = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">27</span>)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n + <span class=\"number\">1</span>)]</span><br><span class=\"line\">        <span class=\"comment\"># res[i][j] is the number of possibilities when first j letters</span></span><br><span class=\"line\">        <span class=\"comment\"># is used to fill i positions.</span></span><br><span class=\"line\">        <span class=\"comment\"># when the position is 0, no matter how many letters are used.</span></span><br><span class=\"line\">        <span class=\"comment\"># there is only one possibility, i.e., filling nothing.</span></span><br><span class=\"line\">        <span class=\"comment\"># thus, res[0][i] are all 1.</span></span><br><span class=\"line\">        res[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">27</span>):</span><br><span class=\"line\">            res[<span class=\"number\">0</span>][i] = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># res[i][j] can be divided into several possibilities.</span></span><br><span class=\"line\">        <span class=\"comment\"># When 0 letter is filled for the $j^&#123;th&#125;$ letter, res[i][j-1]</span></span><br><span class=\"line\">        <span class=\"comment\"># when 1 letter is filled for the j-th letter, res[i-1][j-1]</span></span><br><span class=\"line\">        <span class=\"comment\"># * C_i^1</span></span><br><span class=\"line\">        <span class=\"comment\"># when 2 letters are filled for the j-th letter, res[i-2][j-1]</span></span><br><span class=\"line\">        <span class=\"comment\"># * C_i^2</span></span><br><span class=\"line\">        <span class=\"comment\"># C_i^m represent how many possibilities there are filling m of</span></span><br><span class=\"line\">        <span class=\"comment\"># the same letters into i positions.</span></span><br><span class=\"line\">        <span class=\"comment\"># m can be 0, but can not be larger than k or i.</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n + <span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">27</span>):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">min</span>(i + <span class=\"number\">1</span>, k + <span class=\"number\">1</span>)):</span><br><span class=\"line\">                    res[i][j] += res[i - m][j - <span class=\"number\">1</span>] * math.comb(i, m)</span><br><span class=\"line\">                    res[i][j] %= MOD</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res[-<span class=\"number\">1</span>][-<span class=\"number\">1</span>] % MOD</span><br></pre></td></tr></table></figure>\n<h1 id=\"other\"><a class=\"markdownIt-Anchor\" href=\"#other\"></a> Other</h1>\n<h2 id=\"the-gas-station\"><a class=\"markdownIt-Anchor\" href=\"#the-gas-station\"></a> The Gas Station</h2>\n<p>There are <code>n</code> stations along a circular route, where the amount of gas at the\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>i</mi><mrow><mi>t</mi><mi>h</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">i^{th}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">h</span></span></span></span></span></span></span></span></span></span></span></span> station is gas[i].</p>\n<p>A car costs cost[i] of gas to travel from the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>i</mi><mrow><mi>t</mi><mi>h</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">i^{th}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">h</span></span></span></span></span></span></span></span></span></span></span></span> station to its next\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mrow><mi>t</mi><mi>h</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">(i + 1)^{th}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mord mathdefault mtight\">h</span></span></span></span></span></span></span></span></span></span></span></span> station.</p>\n<p>Can the car run a circle. If can, return the start station. If not, return -1.\nIf there exists a solution, it is guaranteed to be the unique.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">canCompleteCircuit</span>(<span class=\"params\">self, gas: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], cost: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span></span></span><br><span class=\"line\"><span class=\"function\">        n = <span class=\"built_in\">len</span>(gas)</span></span><br><span class=\"line\"><span class=\"function\">        res = [0] * n</span></span><br><span class=\"line\"><span class=\"function\">        # a car <span class=\"keyword\">pass</span> station i, it can get gas[i] <span class=\"keyword\">and</span> cost</span></span><br><span class=\"line\"><span class=\"function\">        # cost[i]. Thus gets gas[i] - cost[i].</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">        # <span class=\"keyword\">if</span> <span class=\"keyword\">in</span> station i, gas[i] - cost[i] &gt;= 0, it can</span></span><br><span class=\"line\"><span class=\"function\">        # arrive the <span class=\"built_in\">next</span> station.</span></span><br><span class=\"line\"><span class=\"function\">        # after arrive the <span class=\"built_in\">next</span> station, <span class=\"keyword\">and</span> gets the station</span></span><br><span class=\"line\"><span class=\"function\">        # <span class=\"keyword\">if</span> the remain &gt;= 0 it can gets the <span class=\"built_in\">next</span> <span class=\"built_in\">next</span> station.</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span></span><br><span class=\"line\">            res[i] = gas[i] - cost[i]</span><br><span class=\"line\">        first = <span class=\"number\">0</span></span><br><span class=\"line\">        second = <span class=\"number\">0</span></span><br><span class=\"line\">        sum_ = res[<span class=\"number\">0</span>]</span><br><span class=\"line\">        key = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"comment\"># second represents the station the car already getting.</span></span><br><span class=\"line\">        <span class=\"comment\"># first represents the starting station.</span></span><br><span class=\"line\">        <span class=\"comment\"># sum_ represents if the car can get the next staion.</span></span><br><span class=\"line\">        <span class=\"comment\"># if sum_ &gt;= 0, it can, else, it can not.</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> sum_ &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">                second += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> second == n:</span><br><span class=\"line\">                    second = <span class=\"number\">0</span></span><br><span class=\"line\">                    key = <span class=\"literal\">True</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> key <span class=\"keyword\">and</span> second == first:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> first</span><br><span class=\"line\">                sum_ += res[second]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                sum_ -= res[first]</span><br><span class=\"line\">                first += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"comment\"># from 0 to n, first do not find an answer, return -1.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> first == n:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> first &gt; second:</span><br><span class=\"line\">                        second += <span class=\"number\">1</span></span><br><span class=\"line\">                        sum_ += res[second</span><br></pre></td></tr></table></figure>\n<p>Consider this, if y is the first station that the car can not arrive from x.\nThat is to say <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>y</mi></mrow><mi>x</mi></msubsup><mi>r</mi><mi>e</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\sum_{i = y}^x res[i] &lt; 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.24011em;vertical-align:-0.43581800000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">s</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>. For a station z between x and y. It\ncan arrive z from x, which means the sum <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">&gt; 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>. Then from z to y, the sum is\ndefinitely <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">&lt; 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>. It can not arrive y from z.</p>\n<p>Thus, if a car can not arrive y from x, it can not arrive y from any station\nbetween x and y. It is no need to search such stations.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">canCompleteCircuit</span>(<span class=\"params\">self, gas: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], cost: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span></span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(gas)</span><br><span class=\"line\">        res = [<span class=\"number\">0</span>] * n</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            res[i] = gas[i] - cost[i]</span><br><span class=\"line\">        first = <span class=\"number\">0</span></span><br><span class=\"line\">        second = <span class=\"number\">0</span></span><br><span class=\"line\">        sum_ = res[<span class=\"number\">0</span>]</span><br><span class=\"line\">        key = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> sum_ &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">                second += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> second == n:</span><br><span class=\"line\">                    second = <span class=\"number\">0</span></span><br><span class=\"line\">                    key = <span class=\"literal\">True</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> key <span class=\"keyword\">and</span> second == first:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> first</span><br><span class=\"line\">                sum_ += res[second]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\"># if can not arrive second + 1, then</span></span><br><span class=\"line\">            <span class=\"comment\"># starting from second + 1</span></span><br><span class=\"line\">                second += <span class=\"number\">1</span></span><br><span class=\"line\">                first = second</span><br><span class=\"line\">                <span class=\"comment\"># if the new starting point equal or bigger than</span></span><br><span class=\"line\">                <span class=\"comment\"># n, first move from 0 to n fails to find.</span></span><br><span class=\"line\">                <span class=\"comment\"># if key is True, second + 1 is actually larger than</span></span><br><span class=\"line\">                <span class=\"comment\"># n, first move from 0 to n fails to find.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> first == n <span class=\"keyword\">or</span> key:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">                sum_ = res[first]</span><br></pre></td></tr></table></figure>\n"},{"title":"An Introduction to Git","date":"2021-12-10T13:55:33.000Z","description":"介绍git里面的一些基本概念，了解git运行的基本原理。","summary":null,"_content":"\n![The Structure of Git](git.jpg)\n\ngit checkout 用于切换分支或恢复工作数文件，它是一个危险的命令，因为这条命令会重\n写工作区。\n\ngit ls-files 查看缓存区中文件信息，它的参数有，括号里面是简写\n\n--cached (-c) 查看缓存区中所有文件\n\n--midified (-m)查看修改过的文件\n\n--delete (-d)查看删除过的文件\n\n--other (-o)查看没有被 git 跟踪的文件\n\n# errors\n\n## Failed to connect to github.com port 443: Time out\n\nThe following commands fixed this issue.\n\n```fish\ngit config --global http.proxy http://127.0.0.1:1080\ngit config --global https.proxy https://127.0.0.1:1080\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n```\n","source":"_posts/An-Introduction-to-Git.md","raw":"---\ntitle: An Introduction to Git\ndate: 2021-12-10 21:55:33\ndescription: 介绍git里面的一些基本概念，了解git运行的基本原理。\nsummary:\ncategories:\n  - Programming\n  - Git\ntags:\n  - Git\n---\n\n![The Structure of Git](git.jpg)\n\ngit checkout 用于切换分支或恢复工作数文件，它是一个危险的命令，因为这条命令会重\n写工作区。\n\ngit ls-files 查看缓存区中文件信息，它的参数有，括号里面是简写\n\n--cached (-c) 查看缓存区中所有文件\n\n--midified (-m)查看修改过的文件\n\n--delete (-d)查看删除过的文件\n\n--other (-o)查看没有被 git 跟踪的文件\n\n# errors\n\n## Failed to connect to github.com port 443: Time out\n\nThe following commands fixed this issue.\n\n```fish\ngit config --global http.proxy http://127.0.0.1:1080\ngit config --global https.proxy https://127.0.0.1:1080\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n```\n","slug":"An-Introduction-to-Git","published":1,"updated":"2022-04-12T07:02:13.267Z","_id":"cl0thb1hq0003gquleqzn8k7j","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><p><img src=\"git.jpg\" alt=\"The Structure of Git\"></p>\n<p>git checkout 用于切换分支或恢复工作数文件，它是一个危险的命令，因为这条命令会重\n写工作区。</p>\n<p>git ls-files 查看缓存区中文件信息，它的参数有，括号里面是简写</p>\n<p>–cached (-c) 查看缓存区中所有文件</p>\n<p>–midified (-m)查看修改过的文件</p>\n<p>–delete (-d)查看删除过的文件</p>\n<p>–other (-o)查看没有被 git 跟踪的文件</p>\n<h1 id=\"errors\"><span class=\"post-title-index\">1. </span><a class=\"markdownIt-Anchor\" href=\"#errors\"></a> errors</h1>\n<h2 id=\"failed-to-connect-to-githubcom-port-443-time-out\"><span class=\"post-title-index\">1.1. </span><a class=\"markdownIt-Anchor\" href=\"#failed-to-connect-to-githubcom-port-443-time-out\"></a> Failed to connect to <a href=\"http://github.com\">github.com</a> port 443: Time out</h2>\n<p>The following commands fixed this issue.</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:1080</span><br><span class=\"line\">git config --global https.proxy https://127.0.0.1:1080</span><br><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></tbody></table></figure>\n</body></html>","site":{"data":{}},"excerpt":"<html><head></head><body></body></html>","more":"<p><img src=\"git.jpg\" alt=\"The Structure of Git\" /></p>\n<p>git checkout 用于切换分支或恢复工作数文件，它是一个危险的命令，因为这条命令会重\n写工作区。</p>\n<p>git ls-files 查看缓存区中文件信息，它的参数有，括号里面是简写</p>\n<p>–cached (-c) 查看缓存区中所有文件</p>\n<p>–midified (-m)查看修改过的文件</p>\n<p>–delete (-d)查看删除过的文件</p>\n<p>–other (-o)查看没有被 git 跟踪的文件</p>\n<h1 id=\"errors\"><a class=\"markdownIt-Anchor\" href=\"#errors\"></a> errors</h1>\n<h2 id=\"failed-to-connect-to-githubcom-port-443-time-out\"><a class=\"markdownIt-Anchor\" href=\"#failed-to-connect-to-githubcom-port-443-time-out\"></a> Failed to connect to <a href=\"http://github.com\">github.com</a> port 443: Time out</h2>\n<p>The following commands fixed this issue.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:1080</span><br><span class=\"line\">git config --global https.proxy https://127.0.0.1:1080</span><br><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>\n"},{"title":"Construct Your Blog with Hexo and Github","date":"2021-11-24T08:20:43.000Z","hidden":true,"description":"Hexo, Next等的使用和介绍。","_content":"\n\n# 主要参考博客\n\nhttps://segmentfault.com/a/1190000017986794\n\nhttps://godweiyang.com/2018/04/13/hexo-blog/\n\nhttps://blog.guaoxiaohei.com/posts/Hexo-Level/\n\nhttps://www.itfanr.cc/2021/04/16/hexo-blog-article-encryption/\n\nhttps://www.zhangxinxu.com/wordpress/2021/05/css-html-hr/\n\ntypora标题和大纲编号\n\nhttps://zhuanlan.zhihu.com/p/110257979\n\n# 实现的时候也遇到了一些问题\n\n## 本地显示没问题，hexo d之后 在GitHub无法显示主题样式\n\n更改主目录下面的_config.yml文件\n\n\n\nurl: github远程仓库的地址, 如 https://xyegithub.github.io/myBlog/\n\nroot: url的最后一段，如/myBlog/\n\n更改保存之后，hexo clean; hexo g; hexo d\n\n##  git在推送的时候很容易出现网络错误\n\n参考博客\n\nhttps://juejin.cn/post/6844904193170341896\n\n刷新dns管理员cmd下运行 ipconfig /flushdns\n\n但是这个方法不是很管用\n\n### 更好的方法\n\n可以不用代理，将hexo _config.yml里的git地址由`https://github.com/xxx`修改为ssh `git@github.com:xxx/xxx`也可以\n\n## 将github page 设置为谷歌可搜索\n\n参考博客\n\nhttps://mizeri.github.io/2021/04/18/hexo-sitemap-google/\n\n## 绑定自己的域名\n\n1. 用freenom申请一个免费的域名，如yexiang.ml\n2. 用腾讯云的DNSpod为域名添加服务器，设置A记录，具体方法，参见github page的教程\n\n","source":"_posts/Construct-Your-Blog-with-Hexo-and-Github.md","raw":"---\ntitle: Construct Your Blog with Hexo and Github\ndate: 2021-11-24 16:20:43\nhidden: true\ndescription:  Hexo, Next等的使用和介绍。\ntags: \n- Hexo\ncategories:\n- Little Things\n- Hexo\n---\n\n\n# 主要参考博客\n\nhttps://segmentfault.com/a/1190000017986794\n\nhttps://godweiyang.com/2018/04/13/hexo-blog/\n\nhttps://blog.guaoxiaohei.com/posts/Hexo-Level/\n\nhttps://www.itfanr.cc/2021/04/16/hexo-blog-article-encryption/\n\nhttps://www.zhangxinxu.com/wordpress/2021/05/css-html-hr/\n\ntypora标题和大纲编号\n\nhttps://zhuanlan.zhihu.com/p/110257979\n\n# 实现的时候也遇到了一些问题\n\n## 本地显示没问题，hexo d之后 在GitHub无法显示主题样式\n\n更改主目录下面的_config.yml文件\n\n\n\nurl: github远程仓库的地址, 如 https://xyegithub.github.io/myBlog/\n\nroot: url的最后一段，如/myBlog/\n\n更改保存之后，hexo clean; hexo g; hexo d\n\n##  git在推送的时候很容易出现网络错误\n\n参考博客\n\nhttps://juejin.cn/post/6844904193170341896\n\n刷新dns管理员cmd下运行 ipconfig /flushdns\n\n但是这个方法不是很管用\n\n### 更好的方法\n\n可以不用代理，将hexo _config.yml里的git地址由`https://github.com/xxx`修改为ssh `git@github.com:xxx/xxx`也可以\n\n## 将github page 设置为谷歌可搜索\n\n参考博客\n\nhttps://mizeri.github.io/2021/04/18/hexo-sitemap-google/\n\n## 绑定自己的域名\n\n1. 用freenom申请一个免费的域名，如yexiang.ml\n2. 用腾讯云的DNSpod为域名添加服务器，设置A记录，具体方法，参见github page的教程\n\n","slug":"Construct-Your-Blog-with-Hexo-and-Github","published":1,"updated":"2022-03-16T08:52:14.742Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0thb1hu0007gqul2ljs4cm9","content":"<html><head></head><body><h1 id=\"主要参考博客\"><span class=\"post-title-index\">1. </span><a class=\"markdownIt-Anchor\" href=\"#主要参考博客\"></a> 主要参考博客</h1>\n<p><a href=\"https://segmentfault.com/a/1190000017986794\">https://segmentfault.com/a/1190000017986794</a></p>\n<p><a href=\"https://godweiyang.com/2018/04/13/hexo-blog/\">https://godweiyang.com/2018/04/13/hexo-blog/</a></p>\n<p><a href=\"https://blog.guaoxiaohei.com/posts/Hexo-Level/\">https://blog.guaoxiaohei.com/posts/Hexo-Level/</a></p>\n<p><a href=\"https://www.itfanr.cc/2021/04/16/hexo-blog-article-encryption/\">https://www.itfanr.cc/2021/04/16/hexo-blog-article-encryption/</a></p>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2021/05/css-html-hr/\">https://www.zhangxinxu.com/wordpress/2021/05/css-html-hr/</a></p>\n<p>typora标题和大纲编号</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/110257979\">https://zhuanlan.zhihu.com/p/110257979</a></p>\n<h1 id=\"实现的时候也遇到了一些问题\"><span class=\"post-title-index\">2. </span><a class=\"markdownIt-Anchor\" href=\"#实现的时候也遇到了一些问题\"></a> 实现的时候也遇到了一些问题</h1>\n<h2 id=\"本地显示没问题hexo-d之后-在github无法显示主题样式\"><span class=\"post-title-index\">2.1. </span><a class=\"markdownIt-Anchor\" href=\"#本地显示没问题hexo-d之后-在github无法显示主题样式\"></a> 本地显示没问题，hexo d之后 在GitHub无法显示主题样式</h2>\n<p>更改主目录下面的_config.yml文件</p>\n<p>url: github远程仓库的地址, 如 <a href=\"https://xyegithub.github.io/myBlog/\">https://xyegithub.github.io/myBlog/</a></p>\n<p>root: url的最后一段，如/myBlog/</p>\n<p>更改保存之后，hexo clean; hexo g; hexo d</p>\n<h2 id=\"git在推送的时候很容易出现网络错误\"><span class=\"post-title-index\">2.2. </span><a class=\"markdownIt-Anchor\" href=\"#git在推送的时候很容易出现网络错误\"></a> git在推送的时候很容易出现网络错误</h2>\n<p>参考博客</p>\n<p><a href=\"https://juejin.cn/post/6844904193170341896\">https://juejin.cn/post/6844904193170341896</a></p>\n<p>刷新dns管理员cmd下运行 ipconfig /flushdns</p>\n<p>但是这个方法不是很管用</p>\n<h3 id=\"更好的方法\"><span class=\"post-title-index\">2.2.1. </span><a class=\"markdownIt-Anchor\" href=\"#更好的方法\"></a> 更好的方法</h3>\n<p>可以不用代理，将hexo _config.yml里的git地址由<code>https://github.com/xxx</code>修改为ssh <code>git@github.com:xxx/xxx</code>也可以</p>\n<h2 id=\"将github-page-设置为谷歌可搜索\"><span class=\"post-title-index\">2.3. </span><a class=\"markdownIt-Anchor\" href=\"#将github-page-设置为谷歌可搜索\"></a> 将github page 设置为谷歌可搜索</h2>\n<p>参考博客</p>\n<p><a href=\"https://mizeri.github.io/2021/04/18/hexo-sitemap-google/\">https://mizeri.github.io/2021/04/18/hexo-sitemap-google/</a></p>\n<h2 id=\"绑定自己的域名\"><span class=\"post-title-index\">2.4. </span><a class=\"markdownIt-Anchor\" href=\"#绑定自己的域名\"></a> 绑定自己的域名</h2>\n<ol>\n<li>用freenom申请一个免费的域名，<a href=\"http://xn--yexiang-i22m.ml\">如yexiang.ml</a></li>\n<li>用腾讯云的DNSpod为域名添加服务器，设置A记录，具体方法，参见github page的教程</li>\n</ol>\n<!-- flag of hidden posts --></body></html>","site":{"data":{}},"excerpt":"<html><head></head><body></body></html>","more":"<h1 id=\"主要参考博客\"><a class=\"markdownIt-Anchor\" href=\"#主要参考博客\"></a> 主要参考博客</h1>\n<p><a href=\"https://segmentfault.com/a/1190000017986794\">https://segmentfault.com/a/1190000017986794</a></p>\n<p><a href=\"https://godweiyang.com/2018/04/13/hexo-blog/\">https://godweiyang.com/2018/04/13/hexo-blog/</a></p>\n<p><a href=\"https://blog.guaoxiaohei.com/posts/Hexo-Level/\">https://blog.guaoxiaohei.com/posts/Hexo-Level/</a></p>\n<p><a href=\"https://www.itfanr.cc/2021/04/16/hexo-blog-article-encryption/\">https://www.itfanr.cc/2021/04/16/hexo-blog-article-encryption/</a></p>\n<p><a href=\"https://www.zhangxinxu.com/wordpress/2021/05/css-html-hr/\">https://www.zhangxinxu.com/wordpress/2021/05/css-html-hr/</a></p>\n<p>typora标题和大纲编号</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/110257979\">https://zhuanlan.zhihu.com/p/110257979</a></p>\n<h1 id=\"实现的时候也遇到了一些问题\"><a class=\"markdownIt-Anchor\" href=\"#实现的时候也遇到了一些问题\"></a> 实现的时候也遇到了一些问题</h1>\n<h2 id=\"本地显示没问题hexo-d之后-在github无法显示主题样式\"><a class=\"markdownIt-Anchor\" href=\"#本地显示没问题hexo-d之后-在github无法显示主题样式\"></a> 本地显示没问题，hexo d之后 在GitHub无法显示主题样式</h2>\n<p>更改主目录下面的_config.yml文件</p>\n<p>url: github远程仓库的地址, 如 <a href=\"https://xyegithub.github.io/myBlog/\">https://xyegithub.github.io/myBlog/</a></p>\n<p>root: url的最后一段，如/myBlog/</p>\n<p>更改保存之后，hexo clean; hexo g; hexo d</p>\n<h2 id=\"git在推送的时候很容易出现网络错误\"><a class=\"markdownIt-Anchor\" href=\"#git在推送的时候很容易出现网络错误\"></a> git在推送的时候很容易出现网络错误</h2>\n<p>参考博客</p>\n<p><a href=\"https://juejin.cn/post/6844904193170341896\">https://juejin.cn/post/6844904193170341896</a></p>\n<p>刷新dns管理员cmd下运行 ipconfig /flushdns</p>\n<p>但是这个方法不是很管用</p>\n<h3 id=\"更好的方法\"><a class=\"markdownIt-Anchor\" href=\"#更好的方法\"></a> 更好的方法</h3>\n<p>可以不用代理，将hexo _config.yml里的git地址由<code>https://github.com/xxx</code>修改为ssh <code>git@github.com:xxx/xxx</code>也可以</p>\n<h2 id=\"将github-page-设置为谷歌可搜索\"><a class=\"markdownIt-Anchor\" href=\"#将github-page-设置为谷歌可搜索\"></a> 将github page 设置为谷歌可搜索</h2>\n<p>参考博客</p>\n<p><a href=\"https://mizeri.github.io/2021/04/18/hexo-sitemap-google/\">https://mizeri.github.io/2021/04/18/hexo-sitemap-google/</a></p>\n<h2 id=\"绑定自己的域名\"><a class=\"markdownIt-Anchor\" href=\"#绑定自己的域名\"></a> 绑定自己的域名</h2>\n<ol>\n<li>用freenom申请一个免费的域名，<a href=\"http://xn--yexiang-i22m.ml\">如yexiang.ml</a></li>\n<li>用腾讯云的DNSpod为域名添加服务器，设置A记录，具体方法，参见github page的教程</li>\n</ol>\n"},{"title":"Config Vim","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-01-20T02:24:34.000Z","password":null,"summary":null,"description":"Vim Configuration","_content":"\n# 安装 anaconda\n\n本来安装 anaconda 应该问题不大，但是却发现了一个问题。\n`./Anaconda3-2021.11-Linux-x86_64.sh: 489: [[: Exec format error` 这个错，是因为\n直用./Anaconda.sh 启动安装默认用的是 sh 改成了 bash Anaconda.sh 就不会报错了.\n\n# 一些碎的 Linux 知识\n\n## 查找包的安装位置\n\n一些软件用 apt install 了，但是不知道安装位置在哪里 `dpkg -L xxx`显示包的安装位\n置．\n\n## 编译错误定位\n\n编译的时候,打印一些 log 但是并不详细一般会有更加详细的编译 log 文件，在里面可以\n更精确的定位错误发生的原因．\n\n## linux 的环境变量可能是两个\n\n`LIBRARY_PATH`编译的时候用到的库的搜索路径 `LD_LIBRARY_PATH`程序加载时库的搜索路\n径\n\n## 遇到一个问题明明再搜索路径下有动态库，却报错所无法找到\n\nokular: error while loading shared libraries: libQt5Core.so.5: cannot open\nshared object file: No such file or directory 用 strip 处理完之后解决 sudo strip\n--remove-section=.note.ABI-tag /usr/lib/x86_64-linux-gnu/libQt5Core.so.5\n\n# 编译 vim\n\napt 安装的 vim 不能随意的控制 vim 的特性，比如在 latex 反向搜索的时候需要的\n+clietservice。 apt-cache search libc-dev ln -s libXtst.so.6 libXtst.so 综合两篇\n博客。 https://www.jianshu.com/p/aa5ea81bbc72\nhttps://toutiao.io/posts/runvgs/preview 尽量多的保留特性，最终得到的 config 命令\n是\n\n```python\n./configure --with-features=huge \\\n    --enable-multibyte \\\n    --enable-rubyinterp=yes \\\n    --enable-python3interp=yes \\\n    --enable-perlinterp=yes \\\n    --enable-cscope \\\n    --enable-fontset \\\n    --enable-largefile \\\n    --enable-fail-if-missing \\\n    --prefix=/path-to-install\n```\n\n`--enable-fail-if-missing` 用于显示错误信息。\n\n## 很久没有成功，最后 apt 安装解决了\n\n编译的时候 feature 用了 hug，但是还是没有增加+clientserver。我估计是缺少库。查\nsrc/auto/cofig.log 也没有发现很相关的信息。最后`sudo apt-get install vim-gtk`成\n功安装了+clientserver 的 vim。\n\n# Why lua instead of vimL(vim script)\n\n## Introduction\n\nNeovim has an embedded lua 5.1 runtime which is used to create faster and more\npowerful extentions of you favorite efitor.\n\n1. VimL is a slow interpreted language with almost no optimizations. Much of the\n   time spent in vim startup and in actions from plugins that can block the main\n   loop in the editor is in parsing and executing vim script.\n\n## How to use lua in command line or vimL file\n\nsee `:h lua`.\n\n- From the vim command line, you can run `lua <you code>`. This is useful for\n  keybindings, commands, and other one-off execution cases.\n- Inside of a vimL file, you can demarcate lua code with the follow code\n  fencing:\n\n```vim\nlua << EOF\n-- your lua code\nEOF\n```\n\n- Inside of a vimL file you can use the `lua` keyword to execute commands\n  similar to the first example,i.e., `lua <your code>`.\n\nOne important note here is that Neovim will look for lua code in the\n`runtimepath` you've set in your settings. Additionally, it will append your\nruntimepath with `/lua/?.lua` and `lua/?/init.lua` so it is common practice to\nsee a `/lua` sub-directory inside `nvim`. For more detailed information about\nwhere Neovim looks for lua code, check out `:h lua-require`.\n\n[More Information](https://github.com/nanotee/nvim-lua-guide)\n\n# A Practice for `Neovim-from-scratch`\n\n## Install\n\n1. Plugins are defined in `~/.config/nvim/lua/user/plugins.lua`. The plugins\n   will fail to be installed due to the internet of China Mainland. Thus, git is\n   asked to be configured with ssh. Then the path of plugins can be changed by\n   add `git@github.com:` before the original path.\n2. `treesitter` is a plugin for syntax-hight. It will install a series of\n   language parsers. They are defined in\n   `~/.config/nvim/lua/user/treesitter.lua`. By setting\n   `ensure_installed = {'astro', 'xxx'}`, we can define the parsers to be\n   download. Also, download errors may be occurred due to the internet. The path\n   of these language parsers are defined in\n   `~/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/nvim-treesitter/parsers.lua`,\n   which may be changed by download with ssh.\n\n## Analysis\n\n1. There are 21 files required in `init.lua`. They are exactly the 21 files in\n   `lua/user` folder. About 34 plugins are defined in `plugins.lua`. The lua\n   files are all the configuration file of the plugins defined in `plugins.lua`,\n   except for `keymaps.lua`, `option.lua`, `autocommand.lua`. `plugins.lua`\n   itself is the configuration file of `packer.nvim`, a plugin manager.\n2. Here gives a brief look at the plugins.\n\n   1. `packer.nvim` is a plugin manager.\n   2. `Alpha-vim` is a plugin used by Neovim-from-scratch. It allow one to\n      custom the greeter for neovim\n   3. `popup.nvim`, An implementation of the Popup API from vim in neovim.\n   4. `plenary.nvim`, implement some useful window management items for neovim.\n   5. `nvim-autopais` A super powerful auto pair plugin for neovim that supports\n      multiple characters.\n   6. `Comment.nvim` Smart and Powerful commenting plugin for neovim.\n   7. `nvim-web-devicons` A lua fork of `vim-devicons`. This plugin provides the\n      same icons as well as colors for each icon\n   8. `nvim-tree-lua` A file explorer for neovim written in lua.\n   9. `bufferline.nvim` A snazzy buffer line (with tabpage integration) for\n      neovim built using lua.\n   10. `vim-bbye` Bbye allows you to do delete buffers (close files) without\n       colosing you windows or messing up your layout.\n   11. `lualine.nvim` A blazing fast and easy to configure neovim status line\n       written in lua.\n   12. `toggleterm.nvim` A neovim plugin to persist and toggle multiple\n       terminals during an editing session.\n   13. `project.nvim` an all in one neovim plugin written in lua that provides\n       superior project management.\n   14. `impatient.nvim` speed up loading lua modules in neovim to improve start\n       up time.\n   15. `indent-blankline.nvim` adds indentation guides to all lines (including\n       empty lines.)\n   16. `FixCursorHold.nvim` This is needed to fix lsp doc highlight.\n   17. `which-key.nvim` a lua plugin that displays a popup with possible key\n       bindings of the command you started typing.\n   18. `darkplus.nvim` color themes\n   19. `nvim-cmp` The completion plugin\n   20. `cmp-buffer` buffer completions\n   21. `cmp-path` path completions\n   22. `cmp-cmdline` cmdline completions\n   23. `cmp_luasnip` snippet completions.\n   24. `cmp-nvim-lsp` nvim-cmp source for neovim's built-in language server\n       client.\n   25. `LuaSnip` snippet engin\n   26. `friendly-snippets` a bunch of snippets to use\n   27. `nvim-lspconfig` A collection of common configurations for neovim's\n       built-in language server clinet. Features: go-to-definition,\n       find-references, hover, completion, rename, format, refactor.\n   28. `nvim-lsp-installer` allows you to seamlessly install LSP server\n       locally(inside `:echo stdpaht(\"data\")`)\n   29. `nlsp-settings.nvim` A plugin to configure LSP using json/yaml files like\n       `coc-setting.json`\n   30. `null-ls.nvim` for formatters and linters, use neovim as a language\n       server to inject LSP diagnostic, code actions, and more via lua\n   31. `telescope.nvim` a highly extendable fuzzy finder over lists.\n   32. `nvim-treesitter` both provide a simple and easy way to use the interface\n       for `tree-sitter` in neovim and to provide some basic functionality such\n       as highlighting based on it.\n   33. `nvim-ts-context-commentstring\"` setting `comment string` option based on\n       the cursor location in the file. The location is checked via treesitter\n       queries.\n   34. `gitsigns.nvim` Git\n\n3. The plugins are installed in `~/.local/share/nvim/site/pack/packer/start`,\n   which is defined in the `install_path` in `plugins.lua`.\n\n# Analyze `LunarVim`\n\n## The Install Script `install.sh`\n\n25 functions are defined in `install.sh`.\n\n```tex\n\n    __attempt_to_install_with_cargo\n    __install_nodejs_deps_npm\n    __install_nodejs_deps_pnpm\n    __install_nodejs_deps_yarn\n    __validate_node_installation\n    backup_old_config\n    check_neovim_min_version\n    check_system_deps\n    clone_lvim\n    detect_platform\n    install_nodejs_deps\n    install_python_deps\n    install_rust_deps\n    link_local_lvim\n    main\n    msg\n    parse_arguments\n    print_logo\n    print_missing_dep_msg\n    remove_old_cache_files\n    setup_lvim\n    setup_shim\n    usage\n    validate_lunarvim_files\n    verify_lvim_dirs\n```\n\nThe last line `main \"$@\"` shows that it well execute the `main` function first.\n`$@` means that all the args will be passed to the function.\n\n### Function `main`\n\n```bash\nfunction main() {\n# function parse_arguments is defined to parse the arguments passed by\n# \"$@$\"\n  parse_arguments \"$@\"\n\n  # print the logo of lunarvim\n  print_logo\n\n  msg \"Detecting platform for managing any additional neovim dependencies\"\n  detect_platform\n  # check if the git and neovim is installed\n  check_system_deps\n\n  if [ \"$ARGS_INSTALL_DEPENDENCIES\" -eq 1 ]; then\n    if [ \"$INTERACTIVE_MODE\" -eq 1 ]; then\n      msg \"Would you like to install LunarVim's NodeJS dependencies?\"\n      read -p \"[y]es or [n]o (default: no) : \" -r answer\n      [ \"$answer\" != \"${answer#[Yy]}\" ] && install_nodejs_deps\n\n      msg \"Would you like to install LunarVim's Python dependencies?\"\n      read -p \"[y]es or [n]o (default: no) : \" -r answer\n      [ \"$answer\" != \"${answer#[Yy]}\" ] && install_python_deps\n\n      msg \"Would you like to install LunarVim's Rust dependencies?\"\n      read -p \"[y]es or [n]o (default: no) : \" -r answer\n      [ \"$answer\" != \"${answer#[Yy]}\" ] && install_rust_deps\n    else\n      install_nodejs_deps\n      install_python_deps\n      install_rust_deps\n    fi\n  fi\n\n  # backup old config of lunarvim if it is installed before\n  backup_old_config\n  # if the paths are not already, mkdir them\n  verify_lvim_dirs\n\n  if [ \"$ARGS_LOCAL\" -eq 1 ]; then\n    link_local_lvim\n  elif [ -d \"$LUNARVIM_BASE_DIR\" ]; then\n    validate_lunarvim_files\n  else\n    clone_lvim\n  fi\n\n  setup_lvim\n\n  msg \"Thank you for installing LunarVim!!\"\n  echo \"You can start it by running: $INSTALL_PREFIX/bin/lvim\"\n  echo \"Do not forget to use a font with glyphs (icons) support [https://github.com/ryanoasis/nerd-fonts]\"\n}\n```\n\n### Function `clone_lvim`\n\n```bash\n\nfunction clone_lvim() {\n  msg \"Cloning LunarVim configuration\"\n  if ! git clone --branch \"$LV_BRANCH\" \\\n    # to download by ssh, change this line to\n    # `--depth 1 \"git@github.com:LunarVim/LunarVim.git\" \"$LUNARVIM_BASE_DIR\"; then`\n    --depth 1 \"https://github.com/${LV_REMOTE}\" \"$LUNARVIM_BASE_DIR\"; then\n    echo \"Failed to clone repository. Installation failed.\"\n    exit 1\n  fi\n}\n```\n\n### Function `setup_lvim`\n\n```bash\nfunction setup_lvim() {\n\n  remove_old_cache_files\n\n  msg \"Installing LunarVim shim\"\n\n  # output the executable file of `lvim` which lies in `~/.local/bin/lvim`\n  setup_shim\n\n  cp \"$LUNARVIM_BASE_DIR/utils/installer/config.example.lua\" \"$LUNARVIM_CONFIG_DIR/config.lua\"\n\n  echo \"Preparing Packer setup\"\n\n  # Prepare Packer, this is done by `nvim -u init.lua --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'`\n  # `--headless` means Don't start a user interface.\n  # `-c <cmd>` means Execute <cmd> after config and first file\n\n  # packer is often failed to be setup due to the network of the China Mainland\n\n\n  \"$INSTALL_PREFIX/bin/lvim\" --headless \\\n    -c 'autocmd User PackerComplete quitall' \\\n    -c 'PackerSync'\n\n  echo \"Packer setup complete\"\n}\n```\n\n### Function `setup_shim`\n\n```bash\nfunction setup_shim() {\n #  make -C ~/.local/share/lunarvim/lvim install-bin\n # `-C` specifies the directory of `Makefile`\n # `install-bin` is a target defined in `Makefile`\n # install-bin:\n #\t@echo starting LunarVim bin-installer\n #\tbash ./utils/installer/install_bin.sh\n # This command outputs `~/.local/bin/lvim`, the executable file of `lvim`,\n\n  make -C \"$LUNARVIM_BASE_DIR\" install-bin\n}\n```\n\nThe `~/.local/bin/lvim` is\n\n```bash\n#!/bin/sh\n\nexport LUNARVIM_RUNTIME_DIR=\"${LUNARVIM_RUNTIME_DIR:-\"~/.local/share/lunarvim\"}\"\nexport LUNARVIM_CONFIG_DIR=\"${LUNARVIM_CONFIG_DIR:-\"~/.config/lvim\"}\"\nexport LUNARVIM_CACHE_DIR=\"${LUNARVIM_CACHE_DIR:-\"~/.cache/nvim\"}\"\n\n # `exec` is a builtin command of the Bash shell. It allows you to execute a\n # command that completely replaces the current process. The current shell process\n # is destroyed, and entirely replaced by the command you specify.\n # `-u` means use this config file, which is `~/.config/share/lunarvim/lvim/init.lua`\nexec nvim -u \"$LUNARVIM_RUNTIME_DIR/lvim/init.lua\" \"$@\"\n\n```\n\n### Function `msg`\n\nMessage or log is an effective tool to debug and make the users know the detail\nof the programming. Instead of simply using `print/echo` function, most\nprogrammers define their message functions to enable effective message giving.\nHave a look at this message function.\n\n```bash\nfunction msg() {\n# local variable receives the message needed to be print.\n  local text=\"$1\"\n  local div_width=\"80\"\n  # before print the message a line comprised of `-` will be printed.\n  # it will makes the message easily been noticed.\n  # div_width gives the width of the line.\n  printf \"%${div_width}s\\n\" ' ' | tr ' ' -\n  printf \"%s\\n\" \"$text\"\n}\n```\n","source":"_posts/Config-Vim.md","raw":"---\ntitle: Config Vim\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-01-20 10:24:34\npassword:\nsummary:\ndescription: Vim Configuration\ncategories:\n  - Programming\n  - Vim\ntags:\n  - Vim\n---\n\n# 安装 anaconda\n\n本来安装 anaconda 应该问题不大，但是却发现了一个问题。\n`./Anaconda3-2021.11-Linux-x86_64.sh: 489: [[: Exec format error` 这个错，是因为\n直用./Anaconda.sh 启动安装默认用的是 sh 改成了 bash Anaconda.sh 就不会报错了.\n\n# 一些碎的 Linux 知识\n\n## 查找包的安装位置\n\n一些软件用 apt install 了，但是不知道安装位置在哪里 `dpkg -L xxx`显示包的安装位\n置．\n\n## 编译错误定位\n\n编译的时候,打印一些 log 但是并不详细一般会有更加详细的编译 log 文件，在里面可以\n更精确的定位错误发生的原因．\n\n## linux 的环境变量可能是两个\n\n`LIBRARY_PATH`编译的时候用到的库的搜索路径 `LD_LIBRARY_PATH`程序加载时库的搜索路\n径\n\n## 遇到一个问题明明再搜索路径下有动态库，却报错所无法找到\n\nokular: error while loading shared libraries: libQt5Core.so.5: cannot open\nshared object file: No such file or directory 用 strip 处理完之后解决 sudo strip\n--remove-section=.note.ABI-tag /usr/lib/x86_64-linux-gnu/libQt5Core.so.5\n\n# 编译 vim\n\napt 安装的 vim 不能随意的控制 vim 的特性，比如在 latex 反向搜索的时候需要的\n+clietservice。 apt-cache search libc-dev ln -s libXtst.so.6 libXtst.so 综合两篇\n博客。 https://www.jianshu.com/p/aa5ea81bbc72\nhttps://toutiao.io/posts/runvgs/preview 尽量多的保留特性，最终得到的 config 命令\n是\n\n```python\n./configure --with-features=huge \\\n    --enable-multibyte \\\n    --enable-rubyinterp=yes \\\n    --enable-python3interp=yes \\\n    --enable-perlinterp=yes \\\n    --enable-cscope \\\n    --enable-fontset \\\n    --enable-largefile \\\n    --enable-fail-if-missing \\\n    --prefix=/path-to-install\n```\n\n`--enable-fail-if-missing` 用于显示错误信息。\n\n## 很久没有成功，最后 apt 安装解决了\n\n编译的时候 feature 用了 hug，但是还是没有增加+clientserver。我估计是缺少库。查\nsrc/auto/cofig.log 也没有发现很相关的信息。最后`sudo apt-get install vim-gtk`成\n功安装了+clientserver 的 vim。\n\n# Why lua instead of vimL(vim script)\n\n## Introduction\n\nNeovim has an embedded lua 5.1 runtime which is used to create faster and more\npowerful extentions of you favorite efitor.\n\n1. VimL is a slow interpreted language with almost no optimizations. Much of the\n   time spent in vim startup and in actions from plugins that can block the main\n   loop in the editor is in parsing and executing vim script.\n\n## How to use lua in command line or vimL file\n\nsee `:h lua`.\n\n- From the vim command line, you can run `lua <you code>`. This is useful for\n  keybindings, commands, and other one-off execution cases.\n- Inside of a vimL file, you can demarcate lua code with the follow code\n  fencing:\n\n```vim\nlua << EOF\n-- your lua code\nEOF\n```\n\n- Inside of a vimL file you can use the `lua` keyword to execute commands\n  similar to the first example,i.e., `lua <your code>`.\n\nOne important note here is that Neovim will look for lua code in the\n`runtimepath` you've set in your settings. Additionally, it will append your\nruntimepath with `/lua/?.lua` and `lua/?/init.lua` so it is common practice to\nsee a `/lua` sub-directory inside `nvim`. For more detailed information about\nwhere Neovim looks for lua code, check out `:h lua-require`.\n\n[More Information](https://github.com/nanotee/nvim-lua-guide)\n\n# A Practice for `Neovim-from-scratch`\n\n## Install\n\n1. Plugins are defined in `~/.config/nvim/lua/user/plugins.lua`. The plugins\n   will fail to be installed due to the internet of China Mainland. Thus, git is\n   asked to be configured with ssh. Then the path of plugins can be changed by\n   add `git@github.com:` before the original path.\n2. `treesitter` is a plugin for syntax-hight. It will install a series of\n   language parsers. They are defined in\n   `~/.config/nvim/lua/user/treesitter.lua`. By setting\n   `ensure_installed = {'astro', 'xxx'}`, we can define the parsers to be\n   download. Also, download errors may be occurred due to the internet. The path\n   of these language parsers are defined in\n   `~/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/nvim-treesitter/parsers.lua`,\n   which may be changed by download with ssh.\n\n## Analysis\n\n1. There are 21 files required in `init.lua`. They are exactly the 21 files in\n   `lua/user` folder. About 34 plugins are defined in `plugins.lua`. The lua\n   files are all the configuration file of the plugins defined in `plugins.lua`,\n   except for `keymaps.lua`, `option.lua`, `autocommand.lua`. `plugins.lua`\n   itself is the configuration file of `packer.nvim`, a plugin manager.\n2. Here gives a brief look at the plugins.\n\n   1. `packer.nvim` is a plugin manager.\n   2. `Alpha-vim` is a plugin used by Neovim-from-scratch. It allow one to\n      custom the greeter for neovim\n   3. `popup.nvim`, An implementation of the Popup API from vim in neovim.\n   4. `plenary.nvim`, implement some useful window management items for neovim.\n   5. `nvim-autopais` A super powerful auto pair plugin for neovim that supports\n      multiple characters.\n   6. `Comment.nvim` Smart and Powerful commenting plugin for neovim.\n   7. `nvim-web-devicons` A lua fork of `vim-devicons`. This plugin provides the\n      same icons as well as colors for each icon\n   8. `nvim-tree-lua` A file explorer for neovim written in lua.\n   9. `bufferline.nvim` A snazzy buffer line (with tabpage integration) for\n      neovim built using lua.\n   10. `vim-bbye` Bbye allows you to do delete buffers (close files) without\n       colosing you windows or messing up your layout.\n   11. `lualine.nvim` A blazing fast and easy to configure neovim status line\n       written in lua.\n   12. `toggleterm.nvim` A neovim plugin to persist and toggle multiple\n       terminals during an editing session.\n   13. `project.nvim` an all in one neovim plugin written in lua that provides\n       superior project management.\n   14. `impatient.nvim` speed up loading lua modules in neovim to improve start\n       up time.\n   15. `indent-blankline.nvim` adds indentation guides to all lines (including\n       empty lines.)\n   16. `FixCursorHold.nvim` This is needed to fix lsp doc highlight.\n   17. `which-key.nvim` a lua plugin that displays a popup with possible key\n       bindings of the command you started typing.\n   18. `darkplus.nvim` color themes\n   19. `nvim-cmp` The completion plugin\n   20. `cmp-buffer` buffer completions\n   21. `cmp-path` path completions\n   22. `cmp-cmdline` cmdline completions\n   23. `cmp_luasnip` snippet completions.\n   24. `cmp-nvim-lsp` nvim-cmp source for neovim's built-in language server\n       client.\n   25. `LuaSnip` snippet engin\n   26. `friendly-snippets` a bunch of snippets to use\n   27. `nvim-lspconfig` A collection of common configurations for neovim's\n       built-in language server clinet. Features: go-to-definition,\n       find-references, hover, completion, rename, format, refactor.\n   28. `nvim-lsp-installer` allows you to seamlessly install LSP server\n       locally(inside `:echo stdpaht(\"data\")`)\n   29. `nlsp-settings.nvim` A plugin to configure LSP using json/yaml files like\n       `coc-setting.json`\n   30. `null-ls.nvim` for formatters and linters, use neovim as a language\n       server to inject LSP diagnostic, code actions, and more via lua\n   31. `telescope.nvim` a highly extendable fuzzy finder over lists.\n   32. `nvim-treesitter` both provide a simple and easy way to use the interface\n       for `tree-sitter` in neovim and to provide some basic functionality such\n       as highlighting based on it.\n   33. `nvim-ts-context-commentstring\"` setting `comment string` option based on\n       the cursor location in the file. The location is checked via treesitter\n       queries.\n   34. `gitsigns.nvim` Git\n\n3. The plugins are installed in `~/.local/share/nvim/site/pack/packer/start`,\n   which is defined in the `install_path` in `plugins.lua`.\n\n# Analyze `LunarVim`\n\n## The Install Script `install.sh`\n\n25 functions are defined in `install.sh`.\n\n```tex\n\n    __attempt_to_install_with_cargo\n    __install_nodejs_deps_npm\n    __install_nodejs_deps_pnpm\n    __install_nodejs_deps_yarn\n    __validate_node_installation\n    backup_old_config\n    check_neovim_min_version\n    check_system_deps\n    clone_lvim\n    detect_platform\n    install_nodejs_deps\n    install_python_deps\n    install_rust_deps\n    link_local_lvim\n    main\n    msg\n    parse_arguments\n    print_logo\n    print_missing_dep_msg\n    remove_old_cache_files\n    setup_lvim\n    setup_shim\n    usage\n    validate_lunarvim_files\n    verify_lvim_dirs\n```\n\nThe last line `main \"$@\"` shows that it well execute the `main` function first.\n`$@` means that all the args will be passed to the function.\n\n### Function `main`\n\n```bash\nfunction main() {\n# function parse_arguments is defined to parse the arguments passed by\n# \"$@$\"\n  parse_arguments \"$@\"\n\n  # print the logo of lunarvim\n  print_logo\n\n  msg \"Detecting platform for managing any additional neovim dependencies\"\n  detect_platform\n  # check if the git and neovim is installed\n  check_system_deps\n\n  if [ \"$ARGS_INSTALL_DEPENDENCIES\" -eq 1 ]; then\n    if [ \"$INTERACTIVE_MODE\" -eq 1 ]; then\n      msg \"Would you like to install LunarVim's NodeJS dependencies?\"\n      read -p \"[y]es or [n]o (default: no) : \" -r answer\n      [ \"$answer\" != \"${answer#[Yy]}\" ] && install_nodejs_deps\n\n      msg \"Would you like to install LunarVim's Python dependencies?\"\n      read -p \"[y]es or [n]o (default: no) : \" -r answer\n      [ \"$answer\" != \"${answer#[Yy]}\" ] && install_python_deps\n\n      msg \"Would you like to install LunarVim's Rust dependencies?\"\n      read -p \"[y]es or [n]o (default: no) : \" -r answer\n      [ \"$answer\" != \"${answer#[Yy]}\" ] && install_rust_deps\n    else\n      install_nodejs_deps\n      install_python_deps\n      install_rust_deps\n    fi\n  fi\n\n  # backup old config of lunarvim if it is installed before\n  backup_old_config\n  # if the paths are not already, mkdir them\n  verify_lvim_dirs\n\n  if [ \"$ARGS_LOCAL\" -eq 1 ]; then\n    link_local_lvim\n  elif [ -d \"$LUNARVIM_BASE_DIR\" ]; then\n    validate_lunarvim_files\n  else\n    clone_lvim\n  fi\n\n  setup_lvim\n\n  msg \"Thank you for installing LunarVim!!\"\n  echo \"You can start it by running: $INSTALL_PREFIX/bin/lvim\"\n  echo \"Do not forget to use a font with glyphs (icons) support [https://github.com/ryanoasis/nerd-fonts]\"\n}\n```\n\n### Function `clone_lvim`\n\n```bash\n\nfunction clone_lvim() {\n  msg \"Cloning LunarVim configuration\"\n  if ! git clone --branch \"$LV_BRANCH\" \\\n    # to download by ssh, change this line to\n    # `--depth 1 \"git@github.com:LunarVim/LunarVim.git\" \"$LUNARVIM_BASE_DIR\"; then`\n    --depth 1 \"https://github.com/${LV_REMOTE}\" \"$LUNARVIM_BASE_DIR\"; then\n    echo \"Failed to clone repository. Installation failed.\"\n    exit 1\n  fi\n}\n```\n\n### Function `setup_lvim`\n\n```bash\nfunction setup_lvim() {\n\n  remove_old_cache_files\n\n  msg \"Installing LunarVim shim\"\n\n  # output the executable file of `lvim` which lies in `~/.local/bin/lvim`\n  setup_shim\n\n  cp \"$LUNARVIM_BASE_DIR/utils/installer/config.example.lua\" \"$LUNARVIM_CONFIG_DIR/config.lua\"\n\n  echo \"Preparing Packer setup\"\n\n  # Prepare Packer, this is done by `nvim -u init.lua --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'`\n  # `--headless` means Don't start a user interface.\n  # `-c <cmd>` means Execute <cmd> after config and first file\n\n  # packer is often failed to be setup due to the network of the China Mainland\n\n\n  \"$INSTALL_PREFIX/bin/lvim\" --headless \\\n    -c 'autocmd User PackerComplete quitall' \\\n    -c 'PackerSync'\n\n  echo \"Packer setup complete\"\n}\n```\n\n### Function `setup_shim`\n\n```bash\nfunction setup_shim() {\n #  make -C ~/.local/share/lunarvim/lvim install-bin\n # `-C` specifies the directory of `Makefile`\n # `install-bin` is a target defined in `Makefile`\n # install-bin:\n #\t@echo starting LunarVim bin-installer\n #\tbash ./utils/installer/install_bin.sh\n # This command outputs `~/.local/bin/lvim`, the executable file of `lvim`,\n\n  make -C \"$LUNARVIM_BASE_DIR\" install-bin\n}\n```\n\nThe `~/.local/bin/lvim` is\n\n```bash\n#!/bin/sh\n\nexport LUNARVIM_RUNTIME_DIR=\"${LUNARVIM_RUNTIME_DIR:-\"~/.local/share/lunarvim\"}\"\nexport LUNARVIM_CONFIG_DIR=\"${LUNARVIM_CONFIG_DIR:-\"~/.config/lvim\"}\"\nexport LUNARVIM_CACHE_DIR=\"${LUNARVIM_CACHE_DIR:-\"~/.cache/nvim\"}\"\n\n # `exec` is a builtin command of the Bash shell. It allows you to execute a\n # command that completely replaces the current process. The current shell process\n # is destroyed, and entirely replaced by the command you specify.\n # `-u` means use this config file, which is `~/.config/share/lunarvim/lvim/init.lua`\nexec nvim -u \"$LUNARVIM_RUNTIME_DIR/lvim/init.lua\" \"$@\"\n\n```\n\n### Function `msg`\n\nMessage or log is an effective tool to debug and make the users know the detail\nof the programming. Instead of simply using `print/echo` function, most\nprogrammers define their message functions to enable effective message giving.\nHave a look at this message function.\n\n```bash\nfunction msg() {\n# local variable receives the message needed to be print.\n  local text=\"$1\"\n  local div_width=\"80\"\n  # before print the message a line comprised of `-` will be printed.\n  # it will makes the message easily been noticed.\n  # div_width gives the width of the line.\n  printf \"%${div_width}s\\n\" ' ' | tr ' ' -\n  printf \"%s\\n\" \"$text\"\n}\n```\n","slug":"Config-Vim","published":1,"updated":"2022-04-13T06:44:54.193Z","_id":"cl0thb1hv0008gqul493vbdhl","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><h1 id=\"安装-anaconda\"><span class=\"post-title-index\">1. </span><a class=\"markdownIt-Anchor\" href=\"#安装-anaconda\"></a> 安装 anaconda</h1>\n<p>本来安装 anaconda 应该问题不大，但是却发现了一个问题。\n<code>./Anaconda3-2021.11-Linux-x86_64.sh: 489: [[: Exec format error</code> 这个错，是因为\n直用./Anaconda.sh 启动安装默认用的是 sh 改成了 bash <a href=\"http://Anaconda.sh\">Anaconda.sh</a> 就不会报错了.</p>\n<h1 id=\"一些碎的-linux-知识\"><span class=\"post-title-index\">2. </span><a class=\"markdownIt-Anchor\" href=\"#一些碎的-linux-知识\"></a> 一些碎的 Linux 知识</h1>\n<h2 id=\"查找包的安装位置\"><span class=\"post-title-index\">2.1. </span><a class=\"markdownIt-Anchor\" href=\"#查找包的安装位置\"></a> 查找包的安装位置</h2>\n<p>一些软件用 apt install 了，但是不知道安装位置在哪里 <code>dpkg -L xxx</code>显示包的安装位\n置．</p>\n<h2 id=\"编译错误定位\"><span class=\"post-title-index\">2.2. </span><a class=\"markdownIt-Anchor\" href=\"#编译错误定位\"></a> 编译错误定位</h2>\n<p>编译的时候,打印一些 log 但是并不详细一般会有更加详细的编译 log 文件，在里面可以\n更精确的定位错误发生的原因．</p>\n<h2 id=\"linux-的环境变量可能是两个\"><span class=\"post-title-index\">2.3. </span><a class=\"markdownIt-Anchor\" href=\"#linux-的环境变量可能是两个\"></a> linux 的环境变量可能是两个</h2>\n<p><code>LIBRARY_PATH</code>编译的时候用到的库的搜索路径 <code>LD_LIBRARY_PATH</code>程序加载时库的搜索路\n径</p>\n<h2 id=\"遇到一个问题明明再搜索路径下有动态库却报错所无法找到\"><span class=\"post-title-index\">2.4. </span><a class=\"markdownIt-Anchor\" href=\"#遇到一个问题明明再搜索路径下有动态库却报错所无法找到\"></a> 遇到一个问题明明再搜索路径下有动态库，却报错所无法找到</h2>\n<p>okular: error while loading shared libraries: libQt5Core.so.5: cannot open\nshared object file: No such file or directory 用 strip 处理完之后解决 sudo strip\n–remove-section=.note.ABI-tag /usr/lib/x86_64-linux-gnu/libQt5Core.so.5</p>\n<h1 id=\"编译-vim\"><span class=\"post-title-index\">3. </span><a class=\"markdownIt-Anchor\" href=\"#编译-vim\"></a> 编译 vim</h1>\n<p>apt 安装的 vim 不能随意的控制 vim 的特性，比如在 latex 反向搜索的时候需要的\n+clietservice。 apt-cache search libc-dev ln -s libXtst.so.6 <a href=\"http://libXtst.so\">libXtst.so</a> 综合两篇\n博客。 <a href=\"https://www.jianshu.com/p/aa5ea81bbc72\">https://www.jianshu.com/p/aa5ea81bbc72</a>\n<a href=\"https://toutiao.io/posts/runvgs/preview\">https://toutiao.io/posts/runvgs/preview</a> 尽量多的保留特性，最终得到的 config 命令\n是</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --<span class=\"keyword\">with</span>-features=huge \\</span><br><span class=\"line\">    --enable-multibyte \\</span><br><span class=\"line\">    --enable-rubyinterp=yes \\</span><br><span class=\"line\">    --enable-python3interp=yes \\</span><br><span class=\"line\">    --enable-perlinterp=yes \\</span><br><span class=\"line\">    --enable-cscope \\</span><br><span class=\"line\">    --enable-fontset \\</span><br><span class=\"line\">    --enable-largefile \\</span><br><span class=\"line\">    --enable-fail-<span class=\"keyword\">if</span>-missing \\</span><br><span class=\"line\">    --prefix=/path-to-install</span><br></pre></td></tr></tbody></table></figure>\n<p><code>--enable-fail-if-missing</code> 用于显示错误信息。</p>\n<h2 id=\"很久没有成功最后-apt-安装解决了\"><span class=\"post-title-index\">3.1. </span><a class=\"markdownIt-Anchor\" href=\"#很久没有成功最后-apt-安装解决了\"></a> 很久没有成功，最后 apt 安装解决了</h2>\n<p>编译的时候 feature 用了 hug，但是还是没有增加+clientserver。我估计是缺少库。查\nsrc/auto/cofig.log 也没有发现很相关的信息。最后<code>sudo apt-get install vim-gtk</code>成\n功安装了+clientserver 的 vim。</p>\n<h1 id=\"why-lua-instead-of-vimlvim-script\"><span class=\"post-title-index\">4. </span><a class=\"markdownIt-Anchor\" href=\"#why-lua-instead-of-vimlvim-script\"></a> Why lua instead of vimL(vim script)</h1>\n<h2 id=\"introduction\"><span class=\"post-title-index\">4.1. </span><a class=\"markdownIt-Anchor\" href=\"#introduction\"></a> Introduction</h2>\n<p>Neovim has an embedded lua 5.1 runtime which is used to create faster and more\npowerful extentions of you favorite efitor.</p>\n<ol>\n<li>VimL is a slow interpreted language with almost no optimizations. Much of the\ntime spent in vim startup and in actions from plugins that can block the main\nloop in the editor is in parsing and executing vim script.</li>\n</ol>\n<h2 id=\"how-to-use-lua-in-command-line-or-viml-file\"><span class=\"post-title-index\">4.2. </span><a class=\"markdownIt-Anchor\" href=\"#how-to-use-lua-in-command-line-or-viml-file\"></a> How to use lua in command line or vimL file</h2>\n<p>see <code>:h lua</code>.</p>\n<ul>\n<li>From the vim command line, you can run <code>lua &lt;you code&gt;</code>. This is useful for\nkeybindings, commands, and other one-off execution cases.</li>\n<li>Inside of a vimL file, you can demarcate lua code with the follow code\nfencing:</li>\n</ul>\n<figure class=\"highlight vim\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lua</span> &lt;&lt; EOF</span><br><span class=\"line\">-- your <span class=\"keyword\">lua</span> code</span><br><span class=\"line\">EOF</span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li>Inside of a vimL file you can use the <code>lua</code> keyword to execute commands\nsimilar to the first example,i.e., <code>lua &lt;your code&gt;</code>.</li>\n</ul>\n<p>One important note here is that Neovim will look for lua code in the\n<code>runtimepath</code> you’ve set in your settings. Additionally, it will append your\nruntimepath with <code>/lua/?.lua</code> and <code>lua/?/init.lua</code> so it is common practice to\nsee a <code>/lua</code> sub-directory inside <code>nvim</code>. For more detailed information about\nwhere Neovim looks for lua code, check out <code>:h lua-require</code>.</p>\n<p><a href=\"https://github.com/nanotee/nvim-lua-guide\">More Information</a></p>\n<h1 id=\"a-practice-for-neovim-from-scratch\"><span class=\"post-title-index\">5. </span><a class=\"markdownIt-Anchor\" href=\"#a-practice-for-neovim-from-scratch\"></a> A Practice for <code>Neovim-from-scratch</code></h1>\n<h2 id=\"install\"><span class=\"post-title-index\">5.1. </span><a class=\"markdownIt-Anchor\" href=\"#install\"></a> Install</h2>\n<ol>\n<li>Plugins are defined in <code>~/.config/nvim/lua/user/plugins.lua</code>. The plugins\nwill fail to be installed due to the internet of China Mainland. Thus, git is\nasked to be configured with ssh. Then the path of plugins can be changed by\nadd <code>git@github.com:</code> before the original path.</li>\n<li><code>treesitter</code> is a plugin for syntax-hight. It will install a series of\nlanguage parsers. They are defined in\n<code>~/.config/nvim/lua/user/treesitter.lua</code>. By setting\n<code>ensure_installed = {'astro', 'xxx'}</code>, we can define the parsers to be\ndownload. Also, download errors may be occurred due to the internet. The path\nof these language parsers are defined in\n<code>~/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/nvim-treesitter/parsers.lua</code>,\nwhich may be changed by download with ssh.</li>\n</ol>\n<h2 id=\"analysis\"><span class=\"post-title-index\">5.2. </span><a class=\"markdownIt-Anchor\" href=\"#analysis\"></a> Analysis</h2>\n<ol>\n<li>\n<p>There are 21 files required in <code>init.lua</code>. They are exactly the 21 files in\n<code>lua/user</code> folder. About 34 plugins are defined in <code>plugins.lua</code>. The lua\nfiles are all the configuration file of the plugins defined in <code>plugins.lua</code>,\nexcept for <code>keymaps.lua</code>, <code>option.lua</code>, <code>autocommand.lua</code>. <code>plugins.lua</code>\nitself is the configuration file of <code>packer.nvim</code>, a plugin manager.</p>\n</li>\n<li>\n<p>Here gives a brief look at the plugins.</p>\n<ol>\n<li><code>packer.nvim</code> is a plugin manager.</li>\n<li><code>Alpha-vim</code> is a plugin used by Neovim-from-scratch. It allow one to\ncustom the greeter for neovim</li>\n<li><code>popup.nvim</code>, An implementation of the Popup API from vim in neovim.</li>\n<li><code>plenary.nvim</code>, implement some useful window management items for neovim.</li>\n<li><code>nvim-autopais</code> A super powerful auto pair plugin for neovim that supports\nmultiple characters.</li>\n<li><code>Comment.nvim</code> Smart and Powerful commenting plugin for neovim.</li>\n<li><code>nvim-web-devicons</code> A lua fork of <code>vim-devicons</code>. This plugin provides the\nsame icons as well as colors for each icon</li>\n<li><code>nvim-tree-lua</code> A file explorer for neovim written in lua.</li>\n<li><code>bufferline.nvim</code> A snazzy buffer line (with tabpage integration) for\nneovim built using lua.</li>\n<li><code>vim-bbye</code> Bbye allows you to do delete buffers (close files) without\ncolosing you windows or messing up your layout.</li>\n<li><code>lualine.nvim</code> A blazing fast and easy to configure neovim status line\nwritten in lua.</li>\n<li><code>toggleterm.nvim</code> A neovim plugin to persist and toggle multiple\nterminals during an editing session.</li>\n<li><code>project.nvim</code> an all in one neovim plugin written in lua that provides\nsuperior project management.</li>\n<li><code>impatient.nvim</code> speed up loading lua modules in neovim to improve start\nup time.</li>\n<li><code>indent-blankline.nvim</code> adds indentation guides to all lines (including\nempty lines.)</li>\n<li><code>FixCursorHold.nvim</code> This is needed to fix lsp doc highlight.</li>\n<li><code>which-key.nvim</code> a lua plugin that displays a popup with possible key\nbindings of the command you started typing.</li>\n<li><code>darkplus.nvim</code> color themes</li>\n<li><code>nvim-cmp</code> The completion plugin</li>\n<li><code>cmp-buffer</code> buffer completions</li>\n<li><code>cmp-path</code> path completions</li>\n<li><code>cmp-cmdline</code> cmdline completions</li>\n<li><code>cmp_luasnip</code> snippet completions.</li>\n<li><code>cmp-nvim-lsp</code> nvim-cmp source for neovim’s built-in language server\nclient.</li>\n<li><code>LuaSnip</code> snippet engin</li>\n<li><code>friendly-snippets</code> a bunch of snippets to use</li>\n<li><code>nvim-lspconfig</code> A collection of common configurations for neovim’s\nbuilt-in language server clinet. Features: go-to-definition,\nfind-references, hover, completion, rename, format, refactor.</li>\n<li><code>nvim-lsp-installer</code> allows you to seamlessly install LSP server\nlocally(inside <code>:echo stdpaht(\"data\")</code>)</li>\n<li><code>nlsp-settings.nvim</code> A plugin to configure LSP using json/yaml files like\n<code>coc-setting.json</code></li>\n<li><code>null-ls.nvim</code> for formatters and linters, use neovim as a language\nserver to inject LSP diagnostic, code actions, and more via lua</li>\n<li><code>telescope.nvim</code> a highly extendable fuzzy finder over lists.</li>\n<li><code>nvim-treesitter</code> both provide a simple and easy way to use the interface\nfor <code>tree-sitter</code> in neovim and to provide some basic functionality such\nas highlighting based on it.</li>\n<li><code>nvim-ts-context-commentstring\"</code> setting <code>comment string</code> option based on\nthe cursor location in the file. The location is checked via treesitter\nqueries.</li>\n<li><code>gitsigns.nvim</code> Git</li>\n</ol>\n</li>\n<li>\n<p>The plugins are installed in <code>~/.local/share/nvim/site/pack/packer/start</code>,\nwhich is defined in the <code>install_path</code> in <code>plugins.lua</code>.</p>\n</li>\n</ol>\n<h1 id=\"analyze-lunarvim\"><span class=\"post-title-index\">6. </span><a class=\"markdownIt-Anchor\" href=\"#analyze-lunarvim\"></a> Analyze <code>LunarVim</code></h1>\n<h2 id=\"the-install-script-installsh\"><span class=\"post-title-index\">6.1. </span><a class=\"markdownIt-Anchor\" href=\"#the-install-script-installsh\"></a> The Install Script <code>install.sh</code></h2>\n<p>25 functions are defined in <code>install.sh</code>.</p>\n<figure class=\"highlight tex\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">_</span><span class=\"built_in\">_</span>attempt<span class=\"built_in\">_</span>to<span class=\"built_in\">_</span>install<span class=\"built_in\">_</span>with<span class=\"built_in\">_</span>cargo</span><br><span class=\"line\"><span class=\"built_in\">_</span><span class=\"built_in\">_</span>install<span class=\"built_in\">_</span>nodejs<span class=\"built_in\">_</span>deps<span class=\"built_in\">_</span>npm</span><br><span class=\"line\"><span class=\"built_in\">_</span><span class=\"built_in\">_</span>install<span class=\"built_in\">_</span>nodejs<span class=\"built_in\">_</span>deps<span class=\"built_in\">_</span>pnpm</span><br><span class=\"line\"><span class=\"built_in\">_</span><span class=\"built_in\">_</span>install<span class=\"built_in\">_</span>nodejs<span class=\"built_in\">_</span>deps<span class=\"built_in\">_</span>yarn</span><br><span class=\"line\"><span class=\"built_in\">_</span><span class=\"built_in\">_</span>validate<span class=\"built_in\">_</span>node<span class=\"built_in\">_</span>installation</span><br><span class=\"line\">backup<span class=\"built_in\">_</span>old<span class=\"built_in\">_</span>config</span><br><span class=\"line\">check<span class=\"built_in\">_</span>neovim<span class=\"built_in\">_</span>min<span class=\"built_in\">_</span>version</span><br><span class=\"line\">check<span class=\"built_in\">_</span>system<span class=\"built_in\">_</span>deps</span><br><span class=\"line\">clone<span class=\"built_in\">_</span>lvim</span><br><span class=\"line\">detect<span class=\"built_in\">_</span>platform</span><br><span class=\"line\">install<span class=\"built_in\">_</span>nodejs<span class=\"built_in\">_</span>deps</span><br><span class=\"line\">install<span class=\"built_in\">_</span>python<span class=\"built_in\">_</span>deps</span><br><span class=\"line\">install<span class=\"built_in\">_</span>rust<span class=\"built_in\">_</span>deps</span><br><span class=\"line\">link<span class=\"built_in\">_</span>local<span class=\"built_in\">_</span>lvim</span><br><span class=\"line\">main</span><br><span class=\"line\">msg</span><br><span class=\"line\">parse<span class=\"built_in\">_</span>arguments</span><br><span class=\"line\">print<span class=\"built_in\">_</span>logo</span><br><span class=\"line\">print<span class=\"built_in\">_</span>missing<span class=\"built_in\">_</span>dep<span class=\"built_in\">_</span>msg</span><br><span class=\"line\">remove<span class=\"built_in\">_</span>old<span class=\"built_in\">_</span>cache<span class=\"built_in\">_</span>files</span><br><span class=\"line\">setup<span class=\"built_in\">_</span>lvim</span><br><span class=\"line\">setup<span class=\"built_in\">_</span>shim</span><br><span class=\"line\">usage</span><br><span class=\"line\">validate<span class=\"built_in\">_</span>lunarvim<span class=\"built_in\">_</span>files</span><br><span class=\"line\">verify<span class=\"built_in\">_</span>lvim<span class=\"built_in\">_</span>dirs</span><br></pre></td></tr></tbody></table></figure>\n<p>The last line <code>main \"$@\"</code> shows that it well execute the <code>main</code> function first.\n<code>$@</code> means that all the args will be passed to the function.</p>\n<h3 id=\"function-main\"><span class=\"post-title-index\">6.1.1. </span><a class=\"markdownIt-Anchor\" href=\"#function-main\"></a> Function <code>main</code></h3>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">main</span></span>() {</span><br><span class=\"line\"><span class=\"comment\"># function parse_arguments is defined to parse the arguments passed by</span></span><br><span class=\"line\"><span class=\"comment\"># \"$@$\"</span></span><br><span class=\"line\">  parse_arguments <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># print the logo of lunarvim</span></span><br><span class=\"line\">  print_logo</span><br><span class=\"line\"></span><br><span class=\"line\">  msg <span class=\"string\">\"Detecting platform for managing any additional neovim dependencies\"</span></span><br><span class=\"line\">  detect_platform</span><br><span class=\"line\">  <span class=\"comment\"># check if the git and neovim is installed</span></span><br><span class=\"line\">  check_system_deps</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$ARGS_INSTALL_DEPENDENCIES</span>\"</span> -eq 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$INTERACTIVE_MODE</span>\"</span> -eq 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">      msg <span class=\"string\">\"Would you like to install LunarVim's NodeJS dependencies?\"</span></span><br><span class=\"line\">      <span class=\"built_in\">read</span> -p <span class=\"string\">\"[y]es or [n]o (default: no) : \"</span> -r answer</span><br><span class=\"line\">      [ <span class=\"string\">\"<span class=\"variable\">$answer</span>\"</span> != <span class=\"string\">\"<span class=\"variable\">${answer#[Yy]}</span>\"</span> ] &amp;&amp; install_nodejs_deps</span><br><span class=\"line\"></span><br><span class=\"line\">      msg <span class=\"string\">\"Would you like to install LunarVim's Python dependencies?\"</span></span><br><span class=\"line\">      <span class=\"built_in\">read</span> -p <span class=\"string\">\"[y]es or [n]o (default: no) : \"</span> -r answer</span><br><span class=\"line\">      [ <span class=\"string\">\"<span class=\"variable\">$answer</span>\"</span> != <span class=\"string\">\"<span class=\"variable\">${answer#[Yy]}</span>\"</span> ] &amp;&amp; install_python_deps</span><br><span class=\"line\"></span><br><span class=\"line\">      msg <span class=\"string\">\"Would you like to install LunarVim's Rust dependencies?\"</span></span><br><span class=\"line\">      <span class=\"built_in\">read</span> -p <span class=\"string\">\"[y]es or [n]o (default: no) : \"</span> -r answer</span><br><span class=\"line\">      [ <span class=\"string\">\"<span class=\"variable\">$answer</span>\"</span> != <span class=\"string\">\"<span class=\"variable\">${answer#[Yy]}</span>\"</span> ] &amp;&amp; install_rust_deps</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      install_nodejs_deps</span><br><span class=\"line\">      install_python_deps</span><br><span class=\"line\">      install_rust_deps</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># backup old config of lunarvim if it is installed before</span></span><br><span class=\"line\">  backup_old_config</span><br><span class=\"line\">  <span class=\"comment\"># if the paths are not already, mkdir them</span></span><br><span class=\"line\">  verify_lvim_dirs</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$ARGS_LOCAL</span>\"</span> -eq 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    link_local_lvim</span><br><span class=\"line\">  <span class=\"keyword\">elif</span> [ -d <span class=\"string\">\"<span class=\"variable\">$LUNARVIM_BASE_DIR</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    validate_lunarvim_files</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    clone_lvim</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">  setup_lvim</span><br><span class=\"line\"></span><br><span class=\"line\">  msg <span class=\"string\">\"Thank you for installing LunarVim!!\"</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"You can start it by running: <span class=\"variable\">$INSTALL_PREFIX</span>/bin/lvim\"</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"Do not forget to use a font with glyphs (icons) support [https://github.com/ryanoasis/nerd-fonts]\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"function-clone_lvim\"><span class=\"post-title-index\">6.1.2. </span><a class=\"markdownIt-Anchor\" href=\"#function-clone_lvim\"></a> Function <code>clone_lvim</code></h3>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">clone_lvim</span></span>() {</span><br><span class=\"line\">  msg <span class=\"string\">\"Cloning LunarVim configuration\"</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ! git <span class=\"built_in\">clone</span> --branch <span class=\"string\">\"<span class=\"variable\">$LV_BRANCH</span>\"</span> \\</span><br><span class=\"line\">    <span class=\"comment\"># to download by ssh, change this line to</span></span><br><span class=\"line\">    <span class=\"comment\"># `--depth 1 \"git@github.com:LunarVim/LunarVim.git\" \"$LUNARVIM_BASE_DIR\"; then`</span></span><br><span class=\"line\">    --depth 1 <span class=\"string\">\"https://github.com/<span class=\"variable\">${LV_REMOTE}</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$LUNARVIM_BASE_DIR</span>\"</span>; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Failed to clone repository. Installation failed.\"</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"function-setup_lvim\"><span class=\"post-title-index\">6.1.3. </span><a class=\"markdownIt-Anchor\" href=\"#function-setup_lvim\"></a> Function <code>setup_lvim</code></h3>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">setup_lvim</span></span>() {</span><br><span class=\"line\"></span><br><span class=\"line\">  remove_old_cache_files</span><br><span class=\"line\"></span><br><span class=\"line\">  msg <span class=\"string\">\"Installing LunarVim shim\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># output the executable file of `lvim` which lies in `~/.local/bin/lvim`</span></span><br><span class=\"line\">  setup_shim</span><br><span class=\"line\"></span><br><span class=\"line\">  cp <span class=\"string\">\"<span class=\"variable\">$LUNARVIM_BASE_DIR</span>/utils/installer/config.example.lua\"</span> <span class=\"string\">\"<span class=\"variable\">$LUNARVIM_CONFIG_DIR</span>/config.lua\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"Preparing Packer setup\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Prepare Packer, this is done by `nvim -u init.lua --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'`</span></span><br><span class=\"line\">  <span class=\"comment\"># `--headless` means Don't start a user interface.</span></span><br><span class=\"line\">  <span class=\"comment\"># `-c &lt;cmd&gt;` means Execute &lt;cmd&gt; after config and first file</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># packer is often failed to be setup due to the network of the China Mainland</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">\"<span class=\"variable\">$INSTALL_PREFIX</span>/bin/lvim\"</span> --headless \\</span><br><span class=\"line\">    -c <span class=\"string\">'autocmd User PackerComplete quitall'</span> \\</span><br><span class=\"line\">    -c <span class=\"string\">'PackerSync'</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"Packer setup complete\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"function-setup_shim\"><span class=\"post-title-index\">6.1.4. </span><a class=\"markdownIt-Anchor\" href=\"#function-setup_shim\"></a> Function <code>setup_shim</code></h3>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">setup_shim</span></span>() {</span><br><span class=\"line\"> <span class=\"comment\">#  make -C ~/.local/share/lunarvim/lvim install-bin</span></span><br><span class=\"line\"> <span class=\"comment\"># `-C` specifies the directory of `Makefile`</span></span><br><span class=\"line\"> <span class=\"comment\"># `install-bin` is a target defined in `Makefile`</span></span><br><span class=\"line\"> <span class=\"comment\"># install-bin:</span></span><br><span class=\"line\"> <span class=\"comment\">#\t@echo starting LunarVim bin-installer</span></span><br><span class=\"line\"> <span class=\"comment\">#\tbash ./utils/installer/install_bin.sh</span></span><br><span class=\"line\"> <span class=\"comment\"># This command outputs `~/.local/bin/lvim`, the executable file of `lvim`,</span></span><br><span class=\"line\"></span><br><span class=\"line\">  make -C <span class=\"string\">\"<span class=\"variable\">$LUNARVIM_BASE_DIR</span>\"</span> install-bin</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>The <code>~/.local/bin/lvim</code> is</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> LUNARVIM_RUNTIME_DIR=<span class=\"string\">\"<span class=\"variable\">${LUNARVIM_RUNTIME_DIR:-\"~/.local/share/lunarvim\"}</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LUNARVIM_CONFIG_DIR=<span class=\"string\">\"<span class=\"variable\">${LUNARVIM_CONFIG_DIR:-\"~/.config/lvim\"}</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LUNARVIM_CACHE_DIR=<span class=\"string\">\"<span class=\"variable\">${LUNARVIM_CACHE_DIR:-\"~/.cache/nvim\"}</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\"># `exec` is a builtin command of the Bash shell. It allows you to execute a</span></span><br><span class=\"line\"> <span class=\"comment\"># command that completely replaces the current process. The current shell process</span></span><br><span class=\"line\"> <span class=\"comment\"># is destroyed, and entirely replaced by the command you specify.</span></span><br><span class=\"line\"> <span class=\"comment\"># `-u` means use this config file, which is `~/.config/share/lunarvim/lvim/init.lua`</span></span><br><span class=\"line\"><span class=\"built_in\">exec</span> nvim -u <span class=\"string\">\"<span class=\"variable\">$LUNARVIM_RUNTIME_DIR</span>/lvim/init.lua\"</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"function-msg\"><span class=\"post-title-index\">6.1.5. </span><a class=\"markdownIt-Anchor\" href=\"#function-msg\"></a> Function <code>msg</code></h3>\n<p>Message or log is an effective tool to debug and make the users know the detail\nof the programming. Instead of simply using <code>print/echo</code> function, most\nprogrammers define their message functions to enable effective message giving.\nHave a look at this message function.</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">msg</span></span>() {</span><br><span class=\"line\"><span class=\"comment\"># local variable receives the message needed to be print.</span></span><br><span class=\"line\">  <span class=\"built_in\">local</span> text=<span class=\"string\">\"<span class=\"variable\">$1</span>\"</span></span><br><span class=\"line\">  <span class=\"built_in\">local</span> div_width=<span class=\"string\">\"80\"</span></span><br><span class=\"line\">  <span class=\"comment\"># before print the message a line comprised of `-` will be printed.</span></span><br><span class=\"line\">  <span class=\"comment\"># it will makes the message easily been noticed.</span></span><br><span class=\"line\">  <span class=\"comment\"># div_width gives the width of the line.</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span> <span class=\"string\">\"%<span class=\"variable\">${div_width}</span>s\\n\"</span> <span class=\"string\">' '</span> | tr <span class=\"string\">' '</span> -</span><br><span class=\"line\">  <span class=\"built_in\">printf</span> <span class=\"string\">\"%s\\n\"</span> <span class=\"string\">\"<span class=\"variable\">$text</span>\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</body></html>","site":{"data":{}},"excerpt":"<html><head></head><body></body></html>","more":"<h1 id=\"安装-anaconda\"><a class=\"markdownIt-Anchor\" href=\"#安装-anaconda\"></a> 安装 anaconda</h1>\n<p>本来安装 anaconda 应该问题不大，但是却发现了一个问题。\n<code>./Anaconda3-2021.11-Linux-x86_64.sh: 489: [[: Exec format error</code> 这个错，是因为\n直用./Anaconda.sh 启动安装默认用的是 sh 改成了 bash <a href=\"http://Anaconda.sh\">Anaconda.sh</a> 就不会报错了.</p>\n<h1 id=\"一些碎的-linux-知识\"><a class=\"markdownIt-Anchor\" href=\"#一些碎的-linux-知识\"></a> 一些碎的 Linux 知识</h1>\n<h2 id=\"查找包的安装位置\"><a class=\"markdownIt-Anchor\" href=\"#查找包的安装位置\"></a> 查找包的安装位置</h2>\n<p>一些软件用 apt install 了，但是不知道安装位置在哪里 <code>dpkg -L xxx</code>显示包的安装位\n置．</p>\n<h2 id=\"编译错误定位\"><a class=\"markdownIt-Anchor\" href=\"#编译错误定位\"></a> 编译错误定位</h2>\n<p>编译的时候,打印一些 log 但是并不详细一般会有更加详细的编译 log 文件，在里面可以\n更精确的定位错误发生的原因．</p>\n<h2 id=\"linux-的环境变量可能是两个\"><a class=\"markdownIt-Anchor\" href=\"#linux-的环境变量可能是两个\"></a> linux 的环境变量可能是两个</h2>\n<p><code>LIBRARY_PATH</code>编译的时候用到的库的搜索路径 <code>LD_LIBRARY_PATH</code>程序加载时库的搜索路\n径</p>\n<h2 id=\"遇到一个问题明明再搜索路径下有动态库却报错所无法找到\"><a class=\"markdownIt-Anchor\" href=\"#遇到一个问题明明再搜索路径下有动态库却报错所无法找到\"></a> 遇到一个问题明明再搜索路径下有动态库，却报错所无法找到</h2>\n<p>okular: error while loading shared libraries: libQt5Core.so.5: cannot open\nshared object file: No such file or directory 用 strip 处理完之后解决 sudo strip\n–remove-section=.note.ABI-tag /usr/lib/x86_64-linux-gnu/libQt5Core.so.5</p>\n<h1 id=\"编译-vim\"><a class=\"markdownIt-Anchor\" href=\"#编译-vim\"></a> 编译 vim</h1>\n<p>apt 安装的 vim 不能随意的控制 vim 的特性，比如在 latex 反向搜索的时候需要的\n+clietservice。 apt-cache search libc-dev ln -s libXtst.so.6 <a href=\"http://libXtst.so\">libXtst.so</a> 综合两篇\n博客。 <a href=\"https://www.jianshu.com/p/aa5ea81bbc72\">https://www.jianshu.com/p/aa5ea81bbc72</a>\n<a href=\"https://toutiao.io/posts/runvgs/preview\">https://toutiao.io/posts/runvgs/preview</a> 尽量多的保留特性，最终得到的 config 命令\n是</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --<span class=\"keyword\">with</span>-features=huge \\</span><br><span class=\"line\">    --enable-multibyte \\</span><br><span class=\"line\">    --enable-rubyinterp=yes \\</span><br><span class=\"line\">    --enable-python3interp=yes \\</span><br><span class=\"line\">    --enable-perlinterp=yes \\</span><br><span class=\"line\">    --enable-cscope \\</span><br><span class=\"line\">    --enable-fontset \\</span><br><span class=\"line\">    --enable-largefile \\</span><br><span class=\"line\">    --enable-fail-<span class=\"keyword\">if</span>-missing \\</span><br><span class=\"line\">    --prefix=/path-to-install</span><br></pre></td></tr></table></figure>\n<p><code>--enable-fail-if-missing</code> 用于显示错误信息。</p>\n<h2 id=\"很久没有成功最后-apt-安装解决了\"><a class=\"markdownIt-Anchor\" href=\"#很久没有成功最后-apt-安装解决了\"></a> 很久没有成功，最后 apt 安装解决了</h2>\n<p>编译的时候 feature 用了 hug，但是还是没有增加+clientserver。我估计是缺少库。查\nsrc/auto/cofig.log 也没有发现很相关的信息。最后<code>sudo apt-get install vim-gtk</code>成\n功安装了+clientserver 的 vim。</p>\n<h1 id=\"why-lua-instead-of-vimlvim-script\"><a class=\"markdownIt-Anchor\" href=\"#why-lua-instead-of-vimlvim-script\"></a> Why lua instead of vimL(vim script)</h1>\n<h2 id=\"introduction\"><a class=\"markdownIt-Anchor\" href=\"#introduction\"></a> Introduction</h2>\n<p>Neovim has an embedded lua 5.1 runtime which is used to create faster and more\npowerful extentions of you favorite efitor.</p>\n<ol>\n<li>VimL is a slow interpreted language with almost no optimizations. Much of the\ntime spent in vim startup and in actions from plugins that can block the main\nloop in the editor is in parsing and executing vim script.</li>\n</ol>\n<h2 id=\"how-to-use-lua-in-command-line-or-viml-file\"><a class=\"markdownIt-Anchor\" href=\"#how-to-use-lua-in-command-line-or-viml-file\"></a> How to use lua in command line or vimL file</h2>\n<p>see <code>:h lua</code>.</p>\n<ul>\n<li>From the vim command line, you can run <code>lua &lt;you code&gt;</code>. This is useful for\nkeybindings, commands, and other one-off execution cases.</li>\n<li>Inside of a vimL file, you can demarcate lua code with the follow code\nfencing:</li>\n</ul>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lua</span> &lt;&lt; EOF</span><br><span class=\"line\">-- your <span class=\"keyword\">lua</span> code</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Inside of a vimL file you can use the <code>lua</code> keyword to execute commands\nsimilar to the first example,i.e., <code>lua &lt;your code&gt;</code>.</li>\n</ul>\n<p>One important note here is that Neovim will look for lua code in the\n<code>runtimepath</code> you’ve set in your settings. Additionally, it will append your\nruntimepath with <code>/lua/?.lua</code> and <code>lua/?/init.lua</code> so it is common practice to\nsee a <code>/lua</code> sub-directory inside <code>nvim</code>. For more detailed information about\nwhere Neovim looks for lua code, check out <code>:h lua-require</code>.</p>\n<p><a href=\"https://github.com/nanotee/nvim-lua-guide\">More Information</a></p>\n<h1 id=\"a-practice-for-neovim-from-scratch\"><a class=\"markdownIt-Anchor\" href=\"#a-practice-for-neovim-from-scratch\"></a> A Practice for <code>Neovim-from-scratch</code></h1>\n<h2 id=\"install\"><a class=\"markdownIt-Anchor\" href=\"#install\"></a> Install</h2>\n<ol>\n<li>Plugins are defined in <code>~/.config/nvim/lua/user/plugins.lua</code>. The plugins\nwill fail to be installed due to the internet of China Mainland. Thus, git is\nasked to be configured with ssh. Then the path of plugins can be changed by\nadd <code>git@github.com:</code> before the original path.</li>\n<li><code>treesitter</code> is a plugin for syntax-hight. It will install a series of\nlanguage parsers. They are defined in\n<code>~/.config/nvim/lua/user/treesitter.lua</code>. By setting\n<code>ensure_installed = &#123;'astro', 'xxx'&#125;</code>, we can define the parsers to be\ndownload. Also, download errors may be occurred due to the internet. The path\nof these language parsers are defined in\n<code>~/.local/share/nvim/site/pack/packer/start/nvim-treesitter/lua/nvim-treesitter/parsers.lua</code>,\nwhich may be changed by download with ssh.</li>\n</ol>\n<h2 id=\"analysis\"><a class=\"markdownIt-Anchor\" href=\"#analysis\"></a> Analysis</h2>\n<ol>\n<li>\n<p>There are 21 files required in <code>init.lua</code>. They are exactly the 21 files in\n<code>lua/user</code> folder. About 34 plugins are defined in <code>plugins.lua</code>. The lua\nfiles are all the configuration file of the plugins defined in <code>plugins.lua</code>,\nexcept for <code>keymaps.lua</code>, <code>option.lua</code>, <code>autocommand.lua</code>. <code>plugins.lua</code>\nitself is the configuration file of <code>packer.nvim</code>, a plugin manager.</p>\n</li>\n<li>\n<p>Here gives a brief look at the plugins.</p>\n<ol>\n<li><code>packer.nvim</code> is a plugin manager.</li>\n<li><code>Alpha-vim</code> is a plugin used by Neovim-from-scratch. It allow one to\ncustom the greeter for neovim</li>\n<li><code>popup.nvim</code>, An implementation of the Popup API from vim in neovim.</li>\n<li><code>plenary.nvim</code>, implement some useful window management items for neovim.</li>\n<li><code>nvim-autopais</code> A super powerful auto pair plugin for neovim that supports\nmultiple characters.</li>\n<li><code>Comment.nvim</code> Smart and Powerful commenting plugin for neovim.</li>\n<li><code>nvim-web-devicons</code> A lua fork of <code>vim-devicons</code>. This plugin provides the\nsame icons as well as colors for each icon</li>\n<li><code>nvim-tree-lua</code> A file explorer for neovim written in lua.</li>\n<li><code>bufferline.nvim</code> A snazzy buffer line (with tabpage integration) for\nneovim built using lua.</li>\n<li><code>vim-bbye</code> Bbye allows you to do delete buffers (close files) without\ncolosing you windows or messing up your layout.</li>\n<li><code>lualine.nvim</code> A blazing fast and easy to configure neovim status line\nwritten in lua.</li>\n<li><code>toggleterm.nvim</code> A neovim plugin to persist and toggle multiple\nterminals during an editing session.</li>\n<li><code>project.nvim</code> an all in one neovim plugin written in lua that provides\nsuperior project management.</li>\n<li><code>impatient.nvim</code> speed up loading lua modules in neovim to improve start\nup time.</li>\n<li><code>indent-blankline.nvim</code> adds indentation guides to all lines (including\nempty lines.)</li>\n<li><code>FixCursorHold.nvim</code> This is needed to fix lsp doc highlight.</li>\n<li><code>which-key.nvim</code> a lua plugin that displays a popup with possible key\nbindings of the command you started typing.</li>\n<li><code>darkplus.nvim</code> color themes</li>\n<li><code>nvim-cmp</code> The completion plugin</li>\n<li><code>cmp-buffer</code> buffer completions</li>\n<li><code>cmp-path</code> path completions</li>\n<li><code>cmp-cmdline</code> cmdline completions</li>\n<li><code>cmp_luasnip</code> snippet completions.</li>\n<li><code>cmp-nvim-lsp</code> nvim-cmp source for neovim’s built-in language server\nclient.</li>\n<li><code>LuaSnip</code> snippet engin</li>\n<li><code>friendly-snippets</code> a bunch of snippets to use</li>\n<li><code>nvim-lspconfig</code> A collection of common configurations for neovim’s\nbuilt-in language server clinet. Features: go-to-definition,\nfind-references, hover, completion, rename, format, refactor.</li>\n<li><code>nvim-lsp-installer</code> allows you to seamlessly install LSP server\nlocally(inside <code>:echo stdpaht(&quot;data&quot;)</code>)</li>\n<li><code>nlsp-settings.nvim</code> A plugin to configure LSP using json/yaml files like\n<code>coc-setting.json</code></li>\n<li><code>null-ls.nvim</code> for formatters and linters, use neovim as a language\nserver to inject LSP diagnostic, code actions, and more via lua</li>\n<li><code>telescope.nvim</code> a highly extendable fuzzy finder over lists.</li>\n<li><code>nvim-treesitter</code> both provide a simple and easy way to use the interface\nfor <code>tree-sitter</code> in neovim and to provide some basic functionality such\nas highlighting based on it.</li>\n<li><code>nvim-ts-context-commentstring&quot;</code> setting <code>comment string</code> option based on\nthe cursor location in the file. The location is checked via treesitter\nqueries.</li>\n<li><code>gitsigns.nvim</code> Git</li>\n</ol>\n</li>\n<li>\n<p>The plugins are installed in <code>~/.local/share/nvim/site/pack/packer/start</code>,\nwhich is defined in the <code>install_path</code> in <code>plugins.lua</code>.</p>\n</li>\n</ol>\n<h1 id=\"analyze-lunarvim\"><a class=\"markdownIt-Anchor\" href=\"#analyze-lunarvim\"></a> Analyze <code>LunarVim</code></h1>\n<h2 id=\"the-install-script-installsh\"><a class=\"markdownIt-Anchor\" href=\"#the-install-script-installsh\"></a> The Install Script <code>install.sh</code></h2>\n<p>25 functions are defined in <code>install.sh</code>.</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">_</span><span class=\"built_in\">_</span>attempt<span class=\"built_in\">_</span>to<span class=\"built_in\">_</span>install<span class=\"built_in\">_</span>with<span class=\"built_in\">_</span>cargo</span><br><span class=\"line\"><span class=\"built_in\">_</span><span class=\"built_in\">_</span>install<span class=\"built_in\">_</span>nodejs<span class=\"built_in\">_</span>deps<span class=\"built_in\">_</span>npm</span><br><span class=\"line\"><span class=\"built_in\">_</span><span class=\"built_in\">_</span>install<span class=\"built_in\">_</span>nodejs<span class=\"built_in\">_</span>deps<span class=\"built_in\">_</span>pnpm</span><br><span class=\"line\"><span class=\"built_in\">_</span><span class=\"built_in\">_</span>install<span class=\"built_in\">_</span>nodejs<span class=\"built_in\">_</span>deps<span class=\"built_in\">_</span>yarn</span><br><span class=\"line\"><span class=\"built_in\">_</span><span class=\"built_in\">_</span>validate<span class=\"built_in\">_</span>node<span class=\"built_in\">_</span>installation</span><br><span class=\"line\">backup<span class=\"built_in\">_</span>old<span class=\"built_in\">_</span>config</span><br><span class=\"line\">check<span class=\"built_in\">_</span>neovim<span class=\"built_in\">_</span>min<span class=\"built_in\">_</span>version</span><br><span class=\"line\">check<span class=\"built_in\">_</span>system<span class=\"built_in\">_</span>deps</span><br><span class=\"line\">clone<span class=\"built_in\">_</span>lvim</span><br><span class=\"line\">detect<span class=\"built_in\">_</span>platform</span><br><span class=\"line\">install<span class=\"built_in\">_</span>nodejs<span class=\"built_in\">_</span>deps</span><br><span class=\"line\">install<span class=\"built_in\">_</span>python<span class=\"built_in\">_</span>deps</span><br><span class=\"line\">install<span class=\"built_in\">_</span>rust<span class=\"built_in\">_</span>deps</span><br><span class=\"line\">link<span class=\"built_in\">_</span>local<span class=\"built_in\">_</span>lvim</span><br><span class=\"line\">main</span><br><span class=\"line\">msg</span><br><span class=\"line\">parse<span class=\"built_in\">_</span>arguments</span><br><span class=\"line\">print<span class=\"built_in\">_</span>logo</span><br><span class=\"line\">print<span class=\"built_in\">_</span>missing<span class=\"built_in\">_</span>dep<span class=\"built_in\">_</span>msg</span><br><span class=\"line\">remove<span class=\"built_in\">_</span>old<span class=\"built_in\">_</span>cache<span class=\"built_in\">_</span>files</span><br><span class=\"line\">setup<span class=\"built_in\">_</span>lvim</span><br><span class=\"line\">setup<span class=\"built_in\">_</span>shim</span><br><span class=\"line\">usage</span><br><span class=\"line\">validate<span class=\"built_in\">_</span>lunarvim<span class=\"built_in\">_</span>files</span><br><span class=\"line\">verify<span class=\"built_in\">_</span>lvim<span class=\"built_in\">_</span>dirs</span><br></pre></td></tr></table></figure>\n<p>The last line <code>main &quot;$@&quot;</code> shows that it well execute the <code>main</code> function first.\n<code>$@</code> means that all the args will be passed to the function.</p>\n<h3 id=\"function-main\"><a class=\"markdownIt-Anchor\" href=\"#function-main\"></a> Function <code>main</code></h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\"><span class=\"comment\"># function parse_arguments is defined to parse the arguments passed by</span></span><br><span class=\"line\"><span class=\"comment\"># &quot;$@$&quot;</span></span><br><span class=\"line\">  parse_arguments <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># print the logo of lunarvim</span></span><br><span class=\"line\">  print_logo</span><br><span class=\"line\"></span><br><span class=\"line\">  msg <span class=\"string\">&quot;Detecting platform for managing any additional neovim dependencies&quot;</span></span><br><span class=\"line\">  detect_platform</span><br><span class=\"line\">  <span class=\"comment\"># check if the git and neovim is installed</span></span><br><span class=\"line\">  check_system_deps</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$ARGS_INSTALL_DEPENDENCIES</span>&quot;</span> -eq 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$INTERACTIVE_MODE</span>&quot;</span> -eq 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">      msg <span class=\"string\">&quot;Would you like to install LunarVim&#x27;s NodeJS dependencies?&quot;</span></span><br><span class=\"line\">      <span class=\"built_in\">read</span> -p <span class=\"string\">&quot;[y]es or [n]o (default: no) : &quot;</span> -r answer</span><br><span class=\"line\">      [ <span class=\"string\">&quot;<span class=\"variable\">$answer</span>&quot;</span> != <span class=\"string\">&quot;<span class=\"variable\">$&#123;answer#[Yy]&#125;</span>&quot;</span> ] &amp;&amp; install_nodejs_deps</span><br><span class=\"line\"></span><br><span class=\"line\">      msg <span class=\"string\">&quot;Would you like to install LunarVim&#x27;s Python dependencies?&quot;</span></span><br><span class=\"line\">      <span class=\"built_in\">read</span> -p <span class=\"string\">&quot;[y]es or [n]o (default: no) : &quot;</span> -r answer</span><br><span class=\"line\">      [ <span class=\"string\">&quot;<span class=\"variable\">$answer</span>&quot;</span> != <span class=\"string\">&quot;<span class=\"variable\">$&#123;answer#[Yy]&#125;</span>&quot;</span> ] &amp;&amp; install_python_deps</span><br><span class=\"line\"></span><br><span class=\"line\">      msg <span class=\"string\">&quot;Would you like to install LunarVim&#x27;s Rust dependencies?&quot;</span></span><br><span class=\"line\">      <span class=\"built_in\">read</span> -p <span class=\"string\">&quot;[y]es or [n]o (default: no) : &quot;</span> -r answer</span><br><span class=\"line\">      [ <span class=\"string\">&quot;<span class=\"variable\">$answer</span>&quot;</span> != <span class=\"string\">&quot;<span class=\"variable\">$&#123;answer#[Yy]&#125;</span>&quot;</span> ] &amp;&amp; install_rust_deps</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      install_nodejs_deps</span><br><span class=\"line\">      install_python_deps</span><br><span class=\"line\">      install_rust_deps</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># backup old config of lunarvim if it is installed before</span></span><br><span class=\"line\">  backup_old_config</span><br><span class=\"line\">  <span class=\"comment\"># if the paths are not already, mkdir them</span></span><br><span class=\"line\">  verify_lvim_dirs</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"string\">&quot;<span class=\"variable\">$ARGS_LOCAL</span>&quot;</span> -eq 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    link_local_lvim</span><br><span class=\"line\">  <span class=\"keyword\">elif</span> [ -d <span class=\"string\">&quot;<span class=\"variable\">$LUNARVIM_BASE_DIR</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    validate_lunarvim_files</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    clone_lvim</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">  setup_lvim</span><br><span class=\"line\"></span><br><span class=\"line\">  msg <span class=\"string\">&quot;Thank you for installing LunarVim!!&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;You can start it by running: <span class=\"variable\">$INSTALL_PREFIX</span>/bin/lvim&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Do not forget to use a font with glyphs (icons) support [https://github.com/ryanoasis/nerd-fonts]&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"function-clone_lvim\"><a class=\"markdownIt-Anchor\" href=\"#function-clone_lvim\"></a> Function <code>clone_lvim</code></h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">clone_lvim</span></span>() &#123;</span><br><span class=\"line\">  msg <span class=\"string\">&quot;Cloning LunarVim configuration&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ! git <span class=\"built_in\">clone</span> --branch <span class=\"string\">&quot;<span class=\"variable\">$LV_BRANCH</span>&quot;</span> \\</span><br><span class=\"line\">    <span class=\"comment\"># to download by ssh, change this line to</span></span><br><span class=\"line\">    <span class=\"comment\"># `--depth 1 &quot;git@github.com:LunarVim/LunarVim.git&quot; &quot;$LUNARVIM_BASE_DIR&quot;; then`</span></span><br><span class=\"line\">    --depth 1 <span class=\"string\">&quot;https://github.com/<span class=\"variable\">$&#123;LV_REMOTE&#125;</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$LUNARVIM_BASE_DIR</span>&quot;</span>; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Failed to clone repository. Installation failed.&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"function-setup_lvim\"><a class=\"markdownIt-Anchor\" href=\"#function-setup_lvim\"></a> Function <code>setup_lvim</code></h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">setup_lvim</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  remove_old_cache_files</span><br><span class=\"line\"></span><br><span class=\"line\">  msg <span class=\"string\">&quot;Installing LunarVim shim&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># output the executable file of `lvim` which lies in `~/.local/bin/lvim`</span></span><br><span class=\"line\">  setup_shim</span><br><span class=\"line\"></span><br><span class=\"line\">  cp <span class=\"string\">&quot;<span class=\"variable\">$LUNARVIM_BASE_DIR</span>/utils/installer/config.example.lua&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$LUNARVIM_CONFIG_DIR</span>/config.lua&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Preparing Packer setup&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Prepare Packer, this is done by `nvim -u init.lua --headless -c &#x27;autocmd User PackerComplete quitall&#x27; -c &#x27;PackerSync&#x27;`</span></span><br><span class=\"line\">  <span class=\"comment\"># `--headless` means Don&#x27;t start a user interface.</span></span><br><span class=\"line\">  <span class=\"comment\"># `-c &lt;cmd&gt;` means Execute &lt;cmd&gt; after config and first file</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># packer is often failed to be setup due to the network of the China Mainland</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">&quot;<span class=\"variable\">$INSTALL_PREFIX</span>/bin/lvim&quot;</span> --headless \\</span><br><span class=\"line\">    -c <span class=\"string\">&#x27;autocmd User PackerComplete quitall&#x27;</span> \\</span><br><span class=\"line\">    -c <span class=\"string\">&#x27;PackerSync&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Packer setup complete&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"function-setup_shim\"><a class=\"markdownIt-Anchor\" href=\"#function-setup_shim\"></a> Function <code>setup_shim</code></h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">setup_shim</span></span>() &#123;</span><br><span class=\"line\"> <span class=\"comment\">#  make -C ~/.local/share/lunarvim/lvim install-bin</span></span><br><span class=\"line\"> <span class=\"comment\"># `-C` specifies the directory of `Makefile`</span></span><br><span class=\"line\"> <span class=\"comment\"># `install-bin` is a target defined in `Makefile`</span></span><br><span class=\"line\"> <span class=\"comment\"># install-bin:</span></span><br><span class=\"line\"> <span class=\"comment\">#\t@echo starting LunarVim bin-installer</span></span><br><span class=\"line\"> <span class=\"comment\">#\tbash ./utils/installer/install_bin.sh</span></span><br><span class=\"line\"> <span class=\"comment\"># This command outputs `~/.local/bin/lvim`, the executable file of `lvim`,</span></span><br><span class=\"line\"></span><br><span class=\"line\">  make -C <span class=\"string\">&quot;<span class=\"variable\">$LUNARVIM_BASE_DIR</span>&quot;</span> install-bin</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The <code>~/.local/bin/lvim</code> is</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> LUNARVIM_RUNTIME_DIR=<span class=\"string\">&quot;<span class=\"variable\">$&#123;LUNARVIM_RUNTIME_DIR:-&quot;~/.local/share/lunarvim&quot;&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LUNARVIM_CONFIG_DIR=<span class=\"string\">&quot;<span class=\"variable\">$&#123;LUNARVIM_CONFIG_DIR:-&quot;~/.config/lvim&quot;&#125;</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> LUNARVIM_CACHE_DIR=<span class=\"string\">&quot;<span class=\"variable\">$&#123;LUNARVIM_CACHE_DIR:-&quot;~/.cache/nvim&quot;&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\"># `exec` is a builtin command of the Bash shell. It allows you to execute a</span></span><br><span class=\"line\"> <span class=\"comment\"># command that completely replaces the current process. The current shell process</span></span><br><span class=\"line\"> <span class=\"comment\"># is destroyed, and entirely replaced by the command you specify.</span></span><br><span class=\"line\"> <span class=\"comment\"># `-u` means use this config file, which is `~/.config/share/lunarvim/lvim/init.lua`</span></span><br><span class=\"line\"><span class=\"built_in\">exec</span> nvim -u <span class=\"string\">&quot;<span class=\"variable\">$LUNARVIM_RUNTIME_DIR</span>/lvim/init.lua&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"function-msg\"><a class=\"markdownIt-Anchor\" href=\"#function-msg\"></a> Function <code>msg</code></h3>\n<p>Message or log is an effective tool to debug and make the users know the detail\nof the programming. Instead of simply using <code>print/echo</code> function, most\nprogrammers define their message functions to enable effective message giving.\nHave a look at this message function.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">msg</span></span>() &#123;</span><br><span class=\"line\"><span class=\"comment\"># local variable receives the message needed to be print.</span></span><br><span class=\"line\">  <span class=\"built_in\">local</span> text=<span class=\"string\">&quot;<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">local</span> div_width=<span class=\"string\">&quot;80&quot;</span></span><br><span class=\"line\">  <span class=\"comment\"># before print the message a line comprised of `-` will be printed.</span></span><br><span class=\"line\">  <span class=\"comment\"># it will makes the message easily been noticed.</span></span><br><span class=\"line\">  <span class=\"comment\"># div_width gives the width of the line.</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span> <span class=\"string\">&quot;%<span class=\"variable\">$&#123;div_width&#125;</span>s\\n&quot;</span> <span class=\"string\">&#x27; &#x27;</span> | tr <span class=\"string\">&#x27; &#x27;</span> -</span><br><span class=\"line\">  <span class=\"built_in\">printf</span> <span class=\"string\">&quot;%s\\n&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$text</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Experiments","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-12-17T02:00:56.000Z","password":null,"summary":null,"description":"发现统计规律，记录一些自己diy的实验。","_content":"\n# Deep Learning\n\n## Feature Map Multiplication\n\n### dataset: Caltech101\n\n[source code](https://github.com/xyegithub/Featrue-map-multiplication)\n\n3 号服务器\n\n/media/new*2t/yexiang/image_classification/multiply/from*#1/ffmnst/Caltech101\n\n#### bn，sig\n\n| 配置                                                                                                                                                   | accuracy |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------ | -------- |\n| `out = self.bn(out) + self.shortcut(x) `                                                                                                               | 87.62    |\n| `out = (out.sigmoid() + 1)* self.bn_s(self.shortcut(x))`                                                                                               | 78.23    |\n| `out = (self.bn(out).sigmoid() + 1) * self.bn_s(self.shortcut(x))`                                                                                     | 78.69    |\n| `(self.bn(out).sigmoid() + 0.5) * self.bn_s(self.shortcut(x)) `                                                                                        | 78.57    |\n| `self.bn_s.bias.data[:]=1`<br>`out = (self.bn(out).sigmoid() + 1) * self.bn_s(self.shortcut(x)) `                                                      | 82.26    |\n| `self.bn_s.bias.data[:]=1` <br>`out = (self.bn(out).sigmoid() + 0.5) * self.bn_s(self.shortcut(x)) `                                                   | 84.10    |\n| ` self.bn.bias.data[:]=0`<br>`self.bn_s.bias.data[:]=1`<br>`out = (self.bn(out).sigmoid() + 0.5) * self.bn_s(self.shortcut(x)) `                       | 84.85    |\n| `self.bn.bias.data[:]=0`<br>`self.bn_s.bias.data[:]=1`<br>`out = (self.bn(out).sigmoid()) * self.bn_s(self.shortcut(x))`                               | 85.83    |\n| `self.bn.bias.data[:]=0`<br>`self.bn.weight.data[:]=1`<br>`self.bn_s.bias.data[:]=1`<br>`out = (self.bn(out).sigmoid()) * self.bn_s(self.shortcut(x))` | 81.57    |\n\n1. 从这个结果看出 shortcut 的均值为 1，会使得优化更好\n2. Res 分支的 sigmoid 不需要加 0.5 或者 1，性能提高了。乘以 sigmoid 本身有恒等的\n   特性。sigmoid 分支输出都为 0 时，sigmoid 输入都是 0.5。\n3. 在 Res 分支的 sigmoid 之前，先对 out 进行 bn 归一化，会优化的更好，而且让归一\n   化的均值为 0，会优化的更好。但是如果同时也控制归一化的方差，效果变差。无参的\n   bn 限制了表达能力。\n\n#### sig, bn\n\n| 配置                                                                                                                                                   | accuracy |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------ | -------- |\n| `out = self.bn(out) + self.shortcut(x) `                                                                                                               | 87.62    |\n| `out = (self.shortcut(x).sigmoid() + 1)* self.bn_s(out)`                                                                                               | 83.93    |\n| `out = (self.bn(self.shortcut(x)).sigmoid() + 1) * self.bn_s(out)`                                                                                     | 85.54    |\n| `(self.bn(self.shortcut(x)).sigmoid() + 0.5) * self.bn_s(out) `                                                                                        | 85.14    |\n| `self.bn_s.bias.data[:]=1`<br>`out = (self.bn(self.shortcut(x)).sigmoid() + 1) * self.bn_s(out) `                                                      | 85.43    |\n| `self.bn_s.bias.data[:]=1` <br>`out = (self.bn(self.shortcut(x)).sigmoid() + 0.5) * self.bn_s(out) `                                                   | 87.44    |\n| ` self.bn.bias.data[:]=0`<br>`self.bn_s.bias.data[:]=1`<br>`out = (self.bn(self.shortcut(x)).sigmoid() + 0.5) * self.bn_s(out) `                       | 84.39    |\n| `self.bn.bias.data[:]=0`<br>`self.bn_s.bias.data[:]=1`<br>`out = (self.bn(self.shortcut(x)).sigmoid()) * self.bn_s(out)`                               | 84.39    |\n| `self.bn.bias.data[:]=0`<br>`self.bn.weight.data[:]=1`<br>`self.bn_s.bias.data[:]=1`<br>`out = (self.bn(self.shortcut(x)).sigmoid()) * self.bn_s(out)` | 84.91    |\n\n**sig, bn 比 bn, sig 的效果好。原因可能是，sig 本来就有梯度的问题，然而\n，shortcut 分支没有需要优化的参数，所以把 sigmoid 放在 shortcut 分支更好？**\n\n#### bn, bn\n\n| 配置                                                                                                                                                                      | Accuracy |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------- |\n| `out = self.bn(out)* self.bn_s(self.shortcut(x))`                                                                                                                         | 77.13    |\n| `self.bn_s.bias.data[:]=1`<br>`out = self.bn(out)* self.bn_s(self.shortcut(x)) `                                                                                          | 75.75    |\n| `self.bn.bias.data[:] = 1`<br>`out = self.bn(out)* self.bn_s(self.shortcut(x))`                                                                                           | 79.55    |\n| `self.bn.bias.data[:]=1`<br>`self.bn_s.bias.data[:]=1`<br>`out = self.bn(out)* self.bn_s(self.shortcut(x))`                                                               | 81.39    |\n| `self.bn.bias.data[:]=1`<br>`self.bn.weight.data[:]=1`<br>`self.bn_s.bias.data[:]=1`<br>`out = self.bn(out)* self.bn_s(self.shortcut(x))`                                 | 81.05    |\n| `self.bn.bias.data[:]=1`<br>`self.bn_s.bias.data[:]=1`<br>`self.bn_s.weight.data[:]=1`<br>`out = self.bn(out)* self.bn_s(self.shortcut(x))`                               | 80.24    |\n| `self.bn.bias.data[:]=1`<br>`self.bn.weight.data[:]=1`<br>`self.bn_s.bias.data[:]=1`<br>`self.bn_s.weight.data[:]=1`<br>`out = self.bn(out)* self.bn_s(self.shortcut(x))` | 81.22    |\n\n均值为 1 的话，一般来说还是会获益。但是 bn 的效果不是很好。\n\n#### sig, sig\n\n| 配置                                                         | Accuracy |\n| ------------------------------------------------------------ | -------- |\n| `out = (self.shortcut(x).sigmoid()) * out.sigmoid())`        | 79.44    |\n| `out = (self.shortcut(x).sigmoid()) * (out.sigmoid() + 0.5)` | 70.05    |\n| `out = (self.shortcut(x).sigmoid() + 0.5) * (out.sigmoid())` | 76.61    |\n| `out = (self.shortcut(x).sigmoid()) * (out.sigmoid() + 1)`   | 72.64    |\n| `out = (self.shortcut(x).sigmoid() + 1) * (out.sigmoid())`   | 71.77    |\n\n没有加 bn，sigmoid 会过饱和，效果不是很好。一边加 bn\n\n| 配置                                                                                                | Accuracy |\n| --------------------------------------------------------------------------------------------------- | -------- |\n| `out = (self.shortcut(x).sigmoid()) * self.bn(out).sigmoid()`                                       | 86.69    |\n| `out = (self.bn_s(self.shortcut(x)).sigmoid()) * out.sigmoid()`                                     | 79.90    |\n| `self.bn_s.bias.data[:]=0`<br>`out = (self.bn_s(self.shortcut(x)).sigmoid()) * out.sigmoid()`       | 76.32    |\n| `self.bn.bias.data[:]=0`<br>`out = (self.shortcut(x).sigmoid()) * self.bn(out).sigmoid()`           | 83.99    |\n| `self.bn.bias.data[:]=0 `<br>` out = (self.shortcut(x).sigmoid()) * (self.bn(out).sigmoid() + 0.5)` | 86.52    |\n| `self.bn.bias.data[:]=0 `<br>`out = (self.shortcut(x).sigmoid()) * (self.bn(out).sigmoid() + 1) `   | 82.83    |\n| `self.bn.weight.data[:]=1`<br>`out = (self.shortcut(x).sigmoid()) * self.bn(out).sigmoid()`         | 78.74    |\n| `self.bn_s.bias.data[:]=0`<br>`out = (self.bn_s(self.shortcut(x)).sigmoid() + 0.5) * out.sigmoid()` | 73.39    |\n\n两边加 bn\n\n| 配置                                                                                                                                                                 | Accuracy |\n| -------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------- |\n| ` out = (self.bn_s(self.shortcut(x)).sigmoid()) * self.bn(out).sigmoid()`                                                                                            | 86.23    |\n| `self.bn.bias.data[:]=0`<br>`out = (self.bn_s(self.shortcut(x)).sigmoid()) * self.bn(out).sigmoid()`                                                                 | 86.41    |\n| `self.bn.bias.data[:]=0`<br>`out = (self.bn_s(self.shortcut(x)).sigmoid()) * (self.bn(out).sigmoid() + 1)`                                                           | 85.83    |\n| `self.bn.bias.data[:]=0`<br>`out = (self.bn_s(self.shortcut(x)).sigmoid()) * (self.bn(out).sigmoid() + 0.5)`                                                         | 86.23    |\n| `self.bn.bias.data[:]=0`<br>`self.bn_s.bias.data[:]=0`<br/>`out = (self.bn_s(self.shortcut(x)).sigmoid()) * self.bn(out).sigmoid()`                                  | 86.52    |\n| `self.bn.bias.data[:]=0`<br/>`self.bn_s.bias.data[:]=0`<br/>`self.bn_s.weight.data[:]=1`<br>`out = (self.bn_s(self.shortcut(x)).sigmoid()) * self.bn(out).sigmoid()` | 82.49    |\n| `self.bn.bias.data[:]=0`<br/>`self.bn.weight.data[:]=1`<br/>`self.bn_s.bias.data[:]=0`<br>`out = (self.bn_s(self.shortcut(x)).sigmoid()) * self.bn(out).sigmoid()`   | 83.47    |\n| `self.bn.bias.data[:]=0`<br>`self.bn_s.bias.data[:]=0`<br>`out = (self.bn_s(self.shortcut(x)).sigmoid()) * (self.bn(out).sigmoid() + 0.5)`                           | 84.91    |\n| `self.bn.bias.data[:]=0`<br/>`self.bn_s.bias.data[:]=0`<br/>`out = (self.bn_s(self.shortcut(x)).sigmoid() + 0.5) * self.bn(out).sigmoid())`                          | 86.92    |\n| `self.bn.bias.data[:]=0`<br/>`self.bn_s.bias.data[:]=0`<br/>`out = (self.bn_s(self.shortcut(x)).sigmoid() + 1) * self.bn(out).sigmoid())`                            | 86.75    |\n| `self.bn.bias.data[:]=0`<br/>`self.bn_s.bias.data[:]=0`<br/>`out = (self.bn_s(self.shortcut(x)).sigmoid() + 0.5) * (self.bn(out).sigmoid() + 0.5)`                   | 84.79    |\n| `self.bn.weight.data[:]=1`<br>`out = (self.bn_s(self.shortcut(x)).sigmoid()) * self.bn(out).sigmoid()`                                                               | 81.91    |\n| `self.bn_s.weight.data[:]=1`<br>`out = (self.bn_s(self.shortcut(x)).sigmoid()) * self.bn(out).sigmoid()`                                                             | 80.93    |\n\n#### Resdual 分支内部使用乘法\n\n| 配置                                                                                                                                    | Accuracy |\n| --------------------------------------------------------------------------------------------------------------------------------------- | -------- |\n| `out_1 = F.relu(self.bn2(out_1))`<br>`out *= self.adap(out_1)`                                                                          | 86.06    |\n| `out_1 = F.relu(self.bn2(out_1))`<br>`out *= self.adap(out_1).sigmoid()`                                                                | 87.33    |\n| `out_1 = self.bn2(out_1)`<br>`out = self.conv2(out_1)`<br>`out *= self.adap(out_1).sigmoid()`                                           | 85.71    |\n| `out_1 = self.bn2(out_1)`<br/>`out = self.conv2(out_1.relu())`<br/>`out *= self.adap(out_1).sigmoid()`                                  | 87.85    |\n| `self.bn2.bias.data[:]=0`<br>`out_1 = self.bn2(out_1)`<br>`out = self.conv2(out_1)`<br>`out *= self.adap(out_1).sigmoid()`              | 86.64    |\n| `self.bn2.bias.data[:]=0`<br/>`out_1 = self.bn2(out_1)`<br/>`out = self.conv2(out_1.relu())`<br/>`out *= self.adap(out_1).sigmoid()`    | 81.51    |\n| `self.bn2.bias.data[:]=0`<br/>`out_1 = self.bn2(out_1)`<br/>`out = self.conv2(out_1.sigmoid())`<br/>`out *= self.adap(out_1).sigmoid()` | 82.66    |\n| `out_1 = F.relu(self.bn2(out_1))`<br>`out = self.conv2(out_1).sigmoid()`<br>`out = self.adap(out_1) * out`                              | 84.22    |\n|                                                                                                                                         |          |\n\n#### 借鉴 NAM\n\n1. 用了 sigmoid 乘以原矩阵\n2. sigmoid 之前用了 bn\n3. 还在每个通道上乘以了和为 1 的数\n\n$$\n\\begin{align}\natt &= norm(x) \\\\\natt &= att \\times \\gamma + \\delta \\\\\natt &= att \\times \\frac\\gamma{sum(\\gamma)} \\\\\nout &= att.sigmoid() \\times x\n\\end{align}\n$$\n\n| 配置                                 | Accuracy |\n| ------------------------------------ | -------- |\n| `out = self.nam(x) + self.bn_s(out)` | 86.41    |\n","source":"_posts/Experiments.md","raw":"---\ntitle: Experiments\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-12-17 10:00:56\npassword:\nsummary:\ndescription: 发现统计规律，记录一些自己diy的实验。\ncategories:\n  - Machine Learning\n  - Experiments\ntags:\n  - Personal Thought\n  - Experiments\n  - private\n---\n\n# Deep Learning\n\n## Feature Map Multiplication\n\n### dataset: Caltech101\n\n[source code](https://github.com/xyegithub/Featrue-map-multiplication)\n\n3 号服务器\n\n/media/new*2t/yexiang/image_classification/multiply/from*#1/ffmnst/Caltech101\n\n#### bn，sig\n\n| 配置                                                                                                                                                   | accuracy |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------ | -------- |\n| `out = self.bn(out) + self.shortcut(x) `                                                                                                               | 87.62    |\n| `out = (out.sigmoid() + 1)* self.bn_s(self.shortcut(x))`                                                                                               | 78.23    |\n| `out = (self.bn(out).sigmoid() + 1) * self.bn_s(self.shortcut(x))`                                                                                     | 78.69    |\n| `(self.bn(out).sigmoid() + 0.5) * self.bn_s(self.shortcut(x)) `                                                                                        | 78.57    |\n| `self.bn_s.bias.data[:]=1`<br>`out = (self.bn(out).sigmoid() + 1) * self.bn_s(self.shortcut(x)) `                                                      | 82.26    |\n| `self.bn_s.bias.data[:]=1` <br>`out = (self.bn(out).sigmoid() + 0.5) * self.bn_s(self.shortcut(x)) `                                                   | 84.10    |\n| ` self.bn.bias.data[:]=0`<br>`self.bn_s.bias.data[:]=1`<br>`out = (self.bn(out).sigmoid() + 0.5) * self.bn_s(self.shortcut(x)) `                       | 84.85    |\n| `self.bn.bias.data[:]=0`<br>`self.bn_s.bias.data[:]=1`<br>`out = (self.bn(out).sigmoid()) * self.bn_s(self.shortcut(x))`                               | 85.83    |\n| `self.bn.bias.data[:]=0`<br>`self.bn.weight.data[:]=1`<br>`self.bn_s.bias.data[:]=1`<br>`out = (self.bn(out).sigmoid()) * self.bn_s(self.shortcut(x))` | 81.57    |\n\n1. 从这个结果看出 shortcut 的均值为 1，会使得优化更好\n2. Res 分支的 sigmoid 不需要加 0.5 或者 1，性能提高了。乘以 sigmoid 本身有恒等的\n   特性。sigmoid 分支输出都为 0 时，sigmoid 输入都是 0.5。\n3. 在 Res 分支的 sigmoid 之前，先对 out 进行 bn 归一化，会优化的更好，而且让归一\n   化的均值为 0，会优化的更好。但是如果同时也控制归一化的方差，效果变差。无参的\n   bn 限制了表达能力。\n\n#### sig, bn\n\n| 配置                                                                                                                                                   | accuracy |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------ | -------- |\n| `out = self.bn(out) + self.shortcut(x) `                                                                                                               | 87.62    |\n| `out = (self.shortcut(x).sigmoid() + 1)* self.bn_s(out)`                                                                                               | 83.93    |\n| `out = (self.bn(self.shortcut(x)).sigmoid() + 1) * self.bn_s(out)`                                                                                     | 85.54    |\n| `(self.bn(self.shortcut(x)).sigmoid() + 0.5) * self.bn_s(out) `                                                                                        | 85.14    |\n| `self.bn_s.bias.data[:]=1`<br>`out = (self.bn(self.shortcut(x)).sigmoid() + 1) * self.bn_s(out) `                                                      | 85.43    |\n| `self.bn_s.bias.data[:]=1` <br>`out = (self.bn(self.shortcut(x)).sigmoid() + 0.5) * self.bn_s(out) `                                                   | 87.44    |\n| ` self.bn.bias.data[:]=0`<br>`self.bn_s.bias.data[:]=1`<br>`out = (self.bn(self.shortcut(x)).sigmoid() + 0.5) * self.bn_s(out) `                       | 84.39    |\n| `self.bn.bias.data[:]=0`<br>`self.bn_s.bias.data[:]=1`<br>`out = (self.bn(self.shortcut(x)).sigmoid()) * self.bn_s(out)`                               | 84.39    |\n| `self.bn.bias.data[:]=0`<br>`self.bn.weight.data[:]=1`<br>`self.bn_s.bias.data[:]=1`<br>`out = (self.bn(self.shortcut(x)).sigmoid()) * self.bn_s(out)` | 84.91    |\n\n**sig, bn 比 bn, sig 的效果好。原因可能是，sig 本来就有梯度的问题，然而\n，shortcut 分支没有需要优化的参数，所以把 sigmoid 放在 shortcut 分支更好？**\n\n#### bn, bn\n\n| 配置                                                                                                                                                                      | Accuracy |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------- |\n| `out = self.bn(out)* self.bn_s(self.shortcut(x))`                                                                                                                         | 77.13    |\n| `self.bn_s.bias.data[:]=1`<br>`out = self.bn(out)* self.bn_s(self.shortcut(x)) `                                                                                          | 75.75    |\n| `self.bn.bias.data[:] = 1`<br>`out = self.bn(out)* self.bn_s(self.shortcut(x))`                                                                                           | 79.55    |\n| `self.bn.bias.data[:]=1`<br>`self.bn_s.bias.data[:]=1`<br>`out = self.bn(out)* self.bn_s(self.shortcut(x))`                                                               | 81.39    |\n| `self.bn.bias.data[:]=1`<br>`self.bn.weight.data[:]=1`<br>`self.bn_s.bias.data[:]=1`<br>`out = self.bn(out)* self.bn_s(self.shortcut(x))`                                 | 81.05    |\n| `self.bn.bias.data[:]=1`<br>`self.bn_s.bias.data[:]=1`<br>`self.bn_s.weight.data[:]=1`<br>`out = self.bn(out)* self.bn_s(self.shortcut(x))`                               | 80.24    |\n| `self.bn.bias.data[:]=1`<br>`self.bn.weight.data[:]=1`<br>`self.bn_s.bias.data[:]=1`<br>`self.bn_s.weight.data[:]=1`<br>`out = self.bn(out)* self.bn_s(self.shortcut(x))` | 81.22    |\n\n均值为 1 的话，一般来说还是会获益。但是 bn 的效果不是很好。\n\n#### sig, sig\n\n| 配置                                                         | Accuracy |\n| ------------------------------------------------------------ | -------- |\n| `out = (self.shortcut(x).sigmoid()) * out.sigmoid())`        | 79.44    |\n| `out = (self.shortcut(x).sigmoid()) * (out.sigmoid() + 0.5)` | 70.05    |\n| `out = (self.shortcut(x).sigmoid() + 0.5) * (out.sigmoid())` | 76.61    |\n| `out = (self.shortcut(x).sigmoid()) * (out.sigmoid() + 1)`   | 72.64    |\n| `out = (self.shortcut(x).sigmoid() + 1) * (out.sigmoid())`   | 71.77    |\n\n没有加 bn，sigmoid 会过饱和，效果不是很好。一边加 bn\n\n| 配置                                                                                                | Accuracy |\n| --------------------------------------------------------------------------------------------------- | -------- |\n| `out = (self.shortcut(x).sigmoid()) * self.bn(out).sigmoid()`                                       | 86.69    |\n| `out = (self.bn_s(self.shortcut(x)).sigmoid()) * out.sigmoid()`                                     | 79.90    |\n| `self.bn_s.bias.data[:]=0`<br>`out = (self.bn_s(self.shortcut(x)).sigmoid()) * out.sigmoid()`       | 76.32    |\n| `self.bn.bias.data[:]=0`<br>`out = (self.shortcut(x).sigmoid()) * self.bn(out).sigmoid()`           | 83.99    |\n| `self.bn.bias.data[:]=0 `<br>` out = (self.shortcut(x).sigmoid()) * (self.bn(out).sigmoid() + 0.5)` | 86.52    |\n| `self.bn.bias.data[:]=0 `<br>`out = (self.shortcut(x).sigmoid()) * (self.bn(out).sigmoid() + 1) `   | 82.83    |\n| `self.bn.weight.data[:]=1`<br>`out = (self.shortcut(x).sigmoid()) * self.bn(out).sigmoid()`         | 78.74    |\n| `self.bn_s.bias.data[:]=0`<br>`out = (self.bn_s(self.shortcut(x)).sigmoid() + 0.5) * out.sigmoid()` | 73.39    |\n\n两边加 bn\n\n| 配置                                                                                                                                                                 | Accuracy |\n| -------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------- |\n| ` out = (self.bn_s(self.shortcut(x)).sigmoid()) * self.bn(out).sigmoid()`                                                                                            | 86.23    |\n| `self.bn.bias.data[:]=0`<br>`out = (self.bn_s(self.shortcut(x)).sigmoid()) * self.bn(out).sigmoid()`                                                                 | 86.41    |\n| `self.bn.bias.data[:]=0`<br>`out = (self.bn_s(self.shortcut(x)).sigmoid()) * (self.bn(out).sigmoid() + 1)`                                                           | 85.83    |\n| `self.bn.bias.data[:]=0`<br>`out = (self.bn_s(self.shortcut(x)).sigmoid()) * (self.bn(out).sigmoid() + 0.5)`                                                         | 86.23    |\n| `self.bn.bias.data[:]=0`<br>`self.bn_s.bias.data[:]=0`<br/>`out = (self.bn_s(self.shortcut(x)).sigmoid()) * self.bn(out).sigmoid()`                                  | 86.52    |\n| `self.bn.bias.data[:]=0`<br/>`self.bn_s.bias.data[:]=0`<br/>`self.bn_s.weight.data[:]=1`<br>`out = (self.bn_s(self.shortcut(x)).sigmoid()) * self.bn(out).sigmoid()` | 82.49    |\n| `self.bn.bias.data[:]=0`<br/>`self.bn.weight.data[:]=1`<br/>`self.bn_s.bias.data[:]=0`<br>`out = (self.bn_s(self.shortcut(x)).sigmoid()) * self.bn(out).sigmoid()`   | 83.47    |\n| `self.bn.bias.data[:]=0`<br>`self.bn_s.bias.data[:]=0`<br>`out = (self.bn_s(self.shortcut(x)).sigmoid()) * (self.bn(out).sigmoid() + 0.5)`                           | 84.91    |\n| `self.bn.bias.data[:]=0`<br/>`self.bn_s.bias.data[:]=0`<br/>`out = (self.bn_s(self.shortcut(x)).sigmoid() + 0.5) * self.bn(out).sigmoid())`                          | 86.92    |\n| `self.bn.bias.data[:]=0`<br/>`self.bn_s.bias.data[:]=0`<br/>`out = (self.bn_s(self.shortcut(x)).sigmoid() + 1) * self.bn(out).sigmoid())`                            | 86.75    |\n| `self.bn.bias.data[:]=0`<br/>`self.bn_s.bias.data[:]=0`<br/>`out = (self.bn_s(self.shortcut(x)).sigmoid() + 0.5) * (self.bn(out).sigmoid() + 0.5)`                   | 84.79    |\n| `self.bn.weight.data[:]=1`<br>`out = (self.bn_s(self.shortcut(x)).sigmoid()) * self.bn(out).sigmoid()`                                                               | 81.91    |\n| `self.bn_s.weight.data[:]=1`<br>`out = (self.bn_s(self.shortcut(x)).sigmoid()) * self.bn(out).sigmoid()`                                                             | 80.93    |\n\n#### Resdual 分支内部使用乘法\n\n| 配置                                                                                                                                    | Accuracy |\n| --------------------------------------------------------------------------------------------------------------------------------------- | -------- |\n| `out_1 = F.relu(self.bn2(out_1))`<br>`out *= self.adap(out_1)`                                                                          | 86.06    |\n| `out_1 = F.relu(self.bn2(out_1))`<br>`out *= self.adap(out_1).sigmoid()`                                                                | 87.33    |\n| `out_1 = self.bn2(out_1)`<br>`out = self.conv2(out_1)`<br>`out *= self.adap(out_1).sigmoid()`                                           | 85.71    |\n| `out_1 = self.bn2(out_1)`<br/>`out = self.conv2(out_1.relu())`<br/>`out *= self.adap(out_1).sigmoid()`                                  | 87.85    |\n| `self.bn2.bias.data[:]=0`<br>`out_1 = self.bn2(out_1)`<br>`out = self.conv2(out_1)`<br>`out *= self.adap(out_1).sigmoid()`              | 86.64    |\n| `self.bn2.bias.data[:]=0`<br/>`out_1 = self.bn2(out_1)`<br/>`out = self.conv2(out_1.relu())`<br/>`out *= self.adap(out_1).sigmoid()`    | 81.51    |\n| `self.bn2.bias.data[:]=0`<br/>`out_1 = self.bn2(out_1)`<br/>`out = self.conv2(out_1.sigmoid())`<br/>`out *= self.adap(out_1).sigmoid()` | 82.66    |\n| `out_1 = F.relu(self.bn2(out_1))`<br>`out = self.conv2(out_1).sigmoid()`<br>`out = self.adap(out_1) * out`                              | 84.22    |\n|                                                                                                                                         |          |\n\n#### 借鉴 NAM\n\n1. 用了 sigmoid 乘以原矩阵\n2. sigmoid 之前用了 bn\n3. 还在每个通道上乘以了和为 1 的数\n\n$$\n\\begin{align}\natt &= norm(x) \\\\\natt &= att \\times \\gamma + \\delta \\\\\natt &= att \\times \\frac\\gamma{sum(\\gamma)} \\\\\nout &= att.sigmoid() \\times x\n\\end{align}\n$$\n\n| 配置                                 | Accuracy |\n| ------------------------------------ | -------- |\n| `out = self.nam(x) + self.bn_s(out)` | 86.41    |\n","slug":"Experiments","published":1,"updated":"2022-04-12T07:40:51.794Z","_id":"cl0thb1hw0009gqulc4uv70a4","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"43e126f1924f7084e07de12b0868d77f2dbe8b2c3f112ac4d624a7fa9c593b8e\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{}},"excerpt":"这是一篇加密文章，需要密码才能继续阅读。","more":"这是一篇加密文章，需要密码才能继续阅读。","origin":"<html><head></head><body><h1 id=\"deep-learning\"><span class=\"post-title-index\">1. </span><a class=\"markdownIt-Anchor\" href=\"#deep-learning\"></a> Deep Learning</h1>\n<h2 id=\"feature-map-multiplication\"><span class=\"post-title-index\">1.1. </span><a class=\"markdownIt-Anchor\" href=\"#feature-map-multiplication\"></a> Feature Map Multiplication</h2>\n<h3 id=\"dataset-caltech101\"><span class=\"post-title-index\">1.1.1. </span><a class=\"markdownIt-Anchor\" href=\"#dataset-caltech101\"></a> dataset: Caltech101</h3>\n<p><a href=\"https://github.com/xyegithub/Featrue-map-multiplication\">source code</a></p>\n<p>3 号服务器</p>\n<p>/media/new<em>2t/yexiang/image_classification/multiply/from</em>#1/ffmnst/Caltech101</p>\n<h4 id=\"bnsig\"><span class=\"post-title-index\">1.1.1.1. </span><a class=\"markdownIt-Anchor\" href=\"#bnsig\"></a> bn，sig</h4>\n<table>\n<thead>\n<tr>\n<th>配置</th>\n<th>accuracy</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>out = self.bn(out) + self.shortcut(x)</code></td>\n<td>87.62</td>\n</tr>\n<tr>\n<td><code>out = (out.sigmoid() + 1)* self.bn_s(self.shortcut(x))</code></td>\n<td>78.23</td>\n</tr>\n<tr>\n<td><code>out = (self.bn(out).sigmoid() + 1) * self.bn_s(self.shortcut(x))</code></td>\n<td>78.69</td>\n</tr>\n<tr>\n<td><code>(self.bn(out).sigmoid() + 0.5) * self.bn_s(self.shortcut(x))</code></td>\n<td>78.57</td>\n</tr>\n<tr>\n<td><code>self.bn_s.bias.data[:]=1</code><br><code>out = (self.bn(out).sigmoid() + 1) * self.bn_s(self.shortcut(x))</code></td>\n<td>82.26</td>\n</tr>\n<tr>\n<td><code>self.bn_s.bias.data[:]=1</code> <br><code>out = (self.bn(out).sigmoid() + 0.5) * self.bn_s(self.shortcut(x))</code></td>\n<td>84.10</td>\n</tr>\n<tr>\n<td><code>self.bn.bias.data[:]=0</code><br><code>self.bn_s.bias.data[:]=1</code><br><code>out = (self.bn(out).sigmoid() + 0.5) * self.bn_s(self.shortcut(x))</code></td>\n<td>84.85</td>\n</tr>\n<tr>\n<td><code>self.bn.bias.data[:]=0</code><br><code>self.bn_s.bias.data[:]=1</code><br><code>out = (self.bn(out).sigmoid()) * self.bn_s(self.shortcut(x))</code></td>\n<td>85.83</td>\n</tr>\n<tr>\n<td><code>self.bn.bias.data[:]=0</code><br><code>self.bn.weight.data[:]=1</code><br><code>self.bn_s.bias.data[:]=1</code><br><code>out = (self.bn(out).sigmoid()) * self.bn_s(self.shortcut(x))</code></td>\n<td>81.57</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>从这个结果看出 shortcut 的均值为 1，会使得优化更好</li>\n<li>Res 分支的 sigmoid 不需要加 0.5 或者 1，性能提高了。乘以 sigmoid 本身有恒等的\n特性。sigmoid 分支输出都为 0 时，sigmoid 输入都是 0.5。</li>\n<li>在 Res 分支的 sigmoid 之前，先对 out 进行 bn 归一化，会优化的更好，而且让归一\n化的均值为 0，会优化的更好。但是如果同时也控制归一化的方差，效果变差。无参的\nbn 限制了表达能力。</li>\n</ol>\n<h4 id=\"sig-bn\"><span class=\"post-title-index\">1.1.1.2. </span><a class=\"markdownIt-Anchor\" href=\"#sig-bn\"></a> sig, bn</h4>\n<table>\n<thead>\n<tr>\n<th>配置</th>\n<th>accuracy</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>out = self.bn(out) + self.shortcut(x)</code></td>\n<td>87.62</td>\n</tr>\n<tr>\n<td><code>out = (self.shortcut(x).sigmoid() + 1)* self.bn_s(out)</code></td>\n<td>83.93</td>\n</tr>\n<tr>\n<td><code>out = (self.bn(self.shortcut(x)).sigmoid() + 1) * self.bn_s(out)</code></td>\n<td>85.54</td>\n</tr>\n<tr>\n<td><code>(self.bn(self.shortcut(x)).sigmoid() + 0.5) * self.bn_s(out)</code></td>\n<td>85.14</td>\n</tr>\n<tr>\n<td><code>self.bn_s.bias.data[:]=1</code><br><code>out = (self.bn(self.shortcut(x)).sigmoid() + 1) * self.bn_s(out)</code></td>\n<td>85.43</td>\n</tr>\n<tr>\n<td><code>self.bn_s.bias.data[:]=1</code> <br><code>out = (self.bn(self.shortcut(x)).sigmoid() + 0.5) * self.bn_s(out)</code></td>\n<td>87.44</td>\n</tr>\n<tr>\n<td><code>self.bn.bias.data[:]=0</code><br><code>self.bn_s.bias.data[:]=1</code><br><code>out = (self.bn(self.shortcut(x)).sigmoid() + 0.5) * self.bn_s(out)</code></td>\n<td>84.39</td>\n</tr>\n<tr>\n<td><code>self.bn.bias.data[:]=0</code><br><code>self.bn_s.bias.data[:]=1</code><br><code>out = (self.bn(self.shortcut(x)).sigmoid()) * self.bn_s(out)</code></td>\n<td>84.39</td>\n</tr>\n<tr>\n<td><code>self.bn.bias.data[:]=0</code><br><code>self.bn.weight.data[:]=1</code><br><code>self.bn_s.bias.data[:]=1</code><br><code>out = (self.bn(self.shortcut(x)).sigmoid()) * self.bn_s(out)</code></td>\n<td>84.91</td>\n</tr>\n</tbody>\n</table>\n<p><strong>sig, bn 比 bn, sig 的效果好。原因可能是，sig 本来就有梯度的问题，然而\n，shortcut 分支没有需要优化的参数，所以把 sigmoid 放在 shortcut 分支更好？</strong></p>\n<h4 id=\"bn-bn\"><span class=\"post-title-index\">1.1.1.3. </span><a class=\"markdownIt-Anchor\" href=\"#bn-bn\"></a> bn, bn</h4>\n<table>\n<thead>\n<tr>\n<th>配置</th>\n<th>Accuracy</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>out = self.bn(out)* self.bn_s(self.shortcut(x))</code></td>\n<td>77.13</td>\n</tr>\n<tr>\n<td><code>self.bn_s.bias.data[:]=1</code><br><code>out = self.bn(out)* self.bn_s(self.shortcut(x))</code></td>\n<td>75.75</td>\n</tr>\n<tr>\n<td><code>self.bn.bias.data[:] = 1</code><br><code>out = self.bn(out)* self.bn_s(self.shortcut(x))</code></td>\n<td>79.55</td>\n</tr>\n<tr>\n<td><code>self.bn.bias.data[:]=1</code><br><code>self.bn_s.bias.data[:]=1</code><br><code>out = self.bn(out)* self.bn_s(self.shortcut(x))</code></td>\n<td>81.39</td>\n</tr>\n<tr>\n<td><code>self.bn.bias.data[:]=1</code><br><code>self.bn.weight.data[:]=1</code><br><code>self.bn_s.bias.data[:]=1</code><br><code>out = self.bn(out)* self.bn_s(self.shortcut(x))</code></td>\n<td>81.05</td>\n</tr>\n<tr>\n<td><code>self.bn.bias.data[:]=1</code><br><code>self.bn_s.bias.data[:]=1</code><br><code>self.bn_s.weight.data[:]=1</code><br><code>out = self.bn(out)* self.bn_s(self.shortcut(x))</code></td>\n<td>80.24</td>\n</tr>\n<tr>\n<td><code>self.bn.bias.data[:]=1</code><br><code>self.bn.weight.data[:]=1</code><br><code>self.bn_s.bias.data[:]=1</code><br><code>self.bn_s.weight.data[:]=1</code><br><code>out = self.bn(out)* self.bn_s(self.shortcut(x))</code></td>\n<td>81.22</td>\n</tr>\n</tbody>\n</table>\n<p>均值为 1 的话，一般来说还是会获益。但是 bn 的效果不是很好。</p>\n<h4 id=\"sig-sig\"><span class=\"post-title-index\">1.1.1.4. </span><a class=\"markdownIt-Anchor\" href=\"#sig-sig\"></a> sig, sig</h4>\n<table>\n<thead>\n<tr>\n<th>配置</th>\n<th>Accuracy</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>out = (self.shortcut(x).sigmoid()) * out.sigmoid())</code></td>\n<td>79.44</td>\n</tr>\n<tr>\n<td><code>out = (self.shortcut(x).sigmoid()) * (out.sigmoid() + 0.5)</code></td>\n<td>70.05</td>\n</tr>\n<tr>\n<td><code>out = (self.shortcut(x).sigmoid() + 0.5) * (out.sigmoid())</code></td>\n<td>76.61</td>\n</tr>\n<tr>\n<td><code>out = (self.shortcut(x).sigmoid()) * (out.sigmoid() + 1)</code></td>\n<td>72.64</td>\n</tr>\n<tr>\n<td><code>out = (self.shortcut(x).sigmoid() + 1) * (out.sigmoid())</code></td>\n<td>71.77</td>\n</tr>\n</tbody>\n</table>\n<p>没有加 bn，sigmoid 会过饱和，效果不是很好。一边加 bn</p>\n<table>\n<thead>\n<tr>\n<th>配置</th>\n<th>Accuracy</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>out = (self.shortcut(x).sigmoid()) * self.bn(out).sigmoid()</code></td>\n<td>86.69</td>\n</tr>\n<tr>\n<td><code>out = (self.bn_s(self.shortcut(x)).sigmoid()) * out.sigmoid()</code></td>\n<td>79.90</td>\n</tr>\n<tr>\n<td><code>self.bn_s.bias.data[:]=0</code><br><code>out = (self.bn_s(self.shortcut(x)).sigmoid()) * out.sigmoid()</code></td>\n<td>76.32</td>\n</tr>\n<tr>\n<td><code>self.bn.bias.data[:]=0</code><br><code>out = (self.shortcut(x).sigmoid()) * self.bn(out).sigmoid()</code></td>\n<td>83.99</td>\n</tr>\n<tr>\n<td><code>self.bn.bias.data[:]=0</code><br><code>out = (self.shortcut(x).sigmoid()) * (self.bn(out).sigmoid() + 0.5)</code></td>\n<td>86.52</td>\n</tr>\n<tr>\n<td><code>self.bn.bias.data[:]=0</code><br><code>out = (self.shortcut(x).sigmoid()) * (self.bn(out).sigmoid() + 1)</code></td>\n<td>82.83</td>\n</tr>\n<tr>\n<td><code>self.bn.weight.data[:]=1</code><br><code>out = (self.shortcut(x).sigmoid()) * self.bn(out).sigmoid()</code></td>\n<td>78.74</td>\n</tr>\n<tr>\n<td><code>self.bn_s.bias.data[:]=0</code><br><code>out = (self.bn_s(self.shortcut(x)).sigmoid() + 0.5) * out.sigmoid()</code></td>\n<td>73.39</td>\n</tr>\n</tbody>\n</table>\n<p>两边加 bn</p>\n<table>\n<thead>\n<tr>\n<th>配置</th>\n<th>Accuracy</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>out = (self.bn_s(self.shortcut(x)).sigmoid()) * self.bn(out).sigmoid()</code></td>\n<td>86.23</td>\n</tr>\n<tr>\n<td><code>self.bn.bias.data[:]=0</code><br><code>out = (self.bn_s(self.shortcut(x)).sigmoid()) * self.bn(out).sigmoid()</code></td>\n<td>86.41</td>\n</tr>\n<tr>\n<td><code>self.bn.bias.data[:]=0</code><br><code>out = (self.bn_s(self.shortcut(x)).sigmoid()) * (self.bn(out).sigmoid() + 1)</code></td>\n<td>85.83</td>\n</tr>\n<tr>\n<td><code>self.bn.bias.data[:]=0</code><br><code>out = (self.bn_s(self.shortcut(x)).sigmoid()) * (self.bn(out).sigmoid() + 0.5)</code></td>\n<td>86.23</td>\n</tr>\n<tr>\n<td><code>self.bn.bias.data[:]=0</code><br><code>self.bn_s.bias.data[:]=0</code><br><code>out = (self.bn_s(self.shortcut(x)).sigmoid()) * self.bn(out).sigmoid()</code></td>\n<td>86.52</td>\n</tr>\n<tr>\n<td><code>self.bn.bias.data[:]=0</code><br><code>self.bn_s.bias.data[:]=0</code><br><code>self.bn_s.weight.data[:]=1</code><br><code>out = (self.bn_s(self.shortcut(x)).sigmoid()) * self.bn(out).sigmoid()</code></td>\n<td>82.49</td>\n</tr>\n<tr>\n<td><code>self.bn.bias.data[:]=0</code><br><code>self.bn.weight.data[:]=1</code><br><code>self.bn_s.bias.data[:]=0</code><br><code>out = (self.bn_s(self.shortcut(x)).sigmoid()) * self.bn(out).sigmoid()</code></td>\n<td>83.47</td>\n</tr>\n<tr>\n<td><code>self.bn.bias.data[:]=0</code><br><code>self.bn_s.bias.data[:]=0</code><br><code>out = (self.bn_s(self.shortcut(x)).sigmoid()) * (self.bn(out).sigmoid() + 0.5)</code></td>\n<td>84.91</td>\n</tr>\n<tr>\n<td><code>self.bn.bias.data[:]=0</code><br><code>self.bn_s.bias.data[:]=0</code><br><code>out = (self.bn_s(self.shortcut(x)).sigmoid() + 0.5) * self.bn(out).sigmoid())</code></td>\n<td>86.92</td>\n</tr>\n<tr>\n<td><code>self.bn.bias.data[:]=0</code><br><code>self.bn_s.bias.data[:]=0</code><br><code>out = (self.bn_s(self.shortcut(x)).sigmoid() + 1) * self.bn(out).sigmoid())</code></td>\n<td>86.75</td>\n</tr>\n<tr>\n<td><code>self.bn.bias.data[:]=0</code><br><code>self.bn_s.bias.data[:]=0</code><br><code>out = (self.bn_s(self.shortcut(x)).sigmoid() + 0.5) * (self.bn(out).sigmoid() + 0.5)</code></td>\n<td>84.79</td>\n</tr>\n<tr>\n<td><code>self.bn.weight.data[:]=1</code><br><code>out = (self.bn_s(self.shortcut(x)).sigmoid()) * self.bn(out).sigmoid()</code></td>\n<td>81.91</td>\n</tr>\n<tr>\n<td><code>self.bn_s.weight.data[:]=1</code><br><code>out = (self.bn_s(self.shortcut(x)).sigmoid()) * self.bn(out).sigmoid()</code></td>\n<td>80.93</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"resdual-分支内部使用乘法\"><span class=\"post-title-index\">1.1.1.5. </span><a class=\"markdownIt-Anchor\" href=\"#resdual-分支内部使用乘法\"></a> Resdual 分支内部使用乘法</h4>\n<table>\n<thead>\n<tr>\n<th>配置</th>\n<th>Accuracy</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>out_1 = F.relu(self.bn2(out_1))</code><br><code>out *= self.adap(out_1)</code></td>\n<td>86.06</td>\n</tr>\n<tr>\n<td><code>out_1 = F.relu(self.bn2(out_1))</code><br><code>out *= self.adap(out_1).sigmoid()</code></td>\n<td>87.33</td>\n</tr>\n<tr>\n<td><code>out_1 = self.bn2(out_1)</code><br><code>out = self.conv2(out_1)</code><br><code>out *= self.adap(out_1).sigmoid()</code></td>\n<td>85.71</td>\n</tr>\n<tr>\n<td><code>out_1 = self.bn2(out_1)</code><br><code>out = self.conv2(out_1.relu())</code><br><code>out *= self.adap(out_1).sigmoid()</code></td>\n<td>87.85</td>\n</tr>\n<tr>\n<td><code>self.bn2.bias.data[:]=0</code><br><code>out_1 = self.bn2(out_1)</code><br><code>out = self.conv2(out_1)</code><br><code>out *= self.adap(out_1).sigmoid()</code></td>\n<td>86.64</td>\n</tr>\n<tr>\n<td><code>self.bn2.bias.data[:]=0</code><br><code>out_1 = self.bn2(out_1)</code><br><code>out = self.conv2(out_1.relu())</code><br><code>out *= self.adap(out_1).sigmoid()</code></td>\n<td>81.51</td>\n</tr>\n<tr>\n<td><code>self.bn2.bias.data[:]=0</code><br><code>out_1 = self.bn2(out_1)</code><br><code>out = self.conv2(out_1.sigmoid())</code><br><code>out *= self.adap(out_1).sigmoid()</code></td>\n<td>82.66</td>\n</tr>\n<tr>\n<td><code>out_1 = F.relu(self.bn2(out_1))</code><br><code>out = self.conv2(out_1).sigmoid()</code><br><code>out = self.adap(out_1) * out</code></td>\n<td>84.22</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"借鉴-nam\"><span class=\"post-title-index\">1.1.1.6. </span><a class=\"markdownIt-Anchor\" href=\"#借鉴-nam\"></a> 借鉴 NAM</h4>\n<ol>\n<li>用了 sigmoid 乘以原矩阵</li>\n<li>sigmoid 之前用了 bn</li>\n<li>还在每个通道上乘以了和为 1 的数</li>\n</ol>\n<p class=\"katex-block katex-error\" title=\"ParseError: KaTeX parse error: No such environment: align at position 7: \\begin{̲a̲l̲i̲g̲n̲}̲\natt &amp;= norm(x)…\">\\begin{align}\natt &amp;= norm(x) \\\\\natt &amp;= att \\times \\gamma + \\delta \\\\\natt &amp;= att \\times \\frac\\gamma{sum(\\gamma)} \\\\\nout &amp;= att.sigmoid() \\times x\n\\end{align}\n</p>\n<table>\n<thead>\n<tr>\n<th>配置</th>\n<th>Accuracy</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>out = self.nam(x) + self.bn_s(out)</code></td>\n<td>86.41</td>\n</tr>\n</tbody>\n</table>\n</body></html>","encrypt":true},{"title":"First Step to Reinforcement Learning","date":"2021-12-03T08:48:41.000Z","description":"An introduction to Reinforcement Learning","_content":"\n### 什么是强化学习，关于强化学习的几点疑问\n\n<font color=green size=3>强化学习三要素：环境状态，行动，奖励</font>\n\n<font color=green size=3>目标：尽量多的获得奖励</font>\n\n<font color=green size=3>本质：连续决策</font>\n\n基本的强化学习模型包括：\n\n- 环境状态的集合 S\n- 动作的集合 A\n- 状态之间的转换规则（是环境的一部分）\n- 规定转换后“即时奖励”的规则（是环境的一部分）\n- 描述主体（智能体）能够观察到什么的规则（是环境的一部分）\n- 能够做出决策/动作的主体（智能体）\n\n#### 区别于深度学习，强化学习的本质特点是什么？\n\n**两个定义**\n\n1，强化学习是机器学习的一个重要分支，主要用来解决连续决策问题。\n\n2，强化学习又称 再励学习，评价学习或增强学习，是机器学习的范式和方法论之一，用于\n描述和解决智能体（agent）在于环境交互过程中通过学习策略以达成回报最大或实现特定\n目标的问题。\n\n强化学习的本质是<font color=deeppink> 描述和解决智能体（agent）在于环境交互过程\n中通过学习策略以达成回报最大或实现特定目标的问题。</font>它本质是这样一种场景，\n在这种场景中它为了达到某种目的，做出连续的决策。这样符合这种场景，那就是强化学习\n。\n\n强化学习和深度学习这两个名词的维度是不一样的。深度学习描述的是算法本身的特点，深\n度够不够，是不是连接主义的模型。深度学习可以用来做无监督，也可以用来做半监督，也\n可以用来做弱监督，甚至可以用来作为强化学习算法的一部分。深度学习这个名词，不管应\n用场景只管模型本身是不是满足深度学习的特点。\n\n而强化学习描述的是应用场景的特点，只要能提供智能体决策的算法，管它是什么模型，什\n么结构，那就是强化学习的算法。从这个角度上讲，我现在认为强化学习和监督学习，无监\n督学习，弱监督学习，是并列的，是对应用场景的描述。和深度学习不是同一维度的。\n\n<font color=deeppink>强化学习的本质在于目标给定的形式，不像无监督学习那样完全没\n有学习目标，也不像监督学习那样有非常明确的目标（label），强化学习的目标一般是变\n化的，不明确的，甚至可能不存在绝对正确的目标。，强化学习的问题都可以抽象成，环境\n状态，行动和奖励。应该说只要能抽象为这三个要素，目标是获得最大奖励的模型，就是强\n化学习的模型。</font>\n\n强化学习的最大的特点是“试错”，是尝试各种可能，而强化结果好的可能。（策略网络的特\n点，估值网络的特点是修正和预测获益）\n\n由于强化学习是一种决策学习，这个问题的特点就是离散型。但是离散并不就是强化学习（\n连续的决策才是，目标的模糊和不确定性是决策问题的特点）。深度学习本质是函数的拟合\n，所以连续可微是它的特点。并不能说连续可微的问题就是深度学习，离散的问题就是强化\n学习。\n\n#### 深度学习用梯度下降的算法实现模型的优化，强化学习无法求导，甚至连学习目标都是模糊的如何优化模型参数？\n\n这个问题要了解下一节，具体的强化学习方法。\n\n#### 强化学习与弱监督学习？\n\n弱监督是属于有监督学习，只是它学习的目标不是被给予的标签，而是比被给予标签更强的\n标签（强弱是指标签做含有的信息量），也就是说弱监督是根据少量信息的标签，推测出更\n多的信息。\n\n强化学习的本质是连续决策。连续决策的特点是目标的模糊和不确定性。\n\n所以，虽然弱监督和强化学习都没有给出最终准确的目标，但是他们任然很不同的\n\n#### 深度学习是死的，没有智能的机器学习算法，强化学习是“活的”，有智能的机器学习算法\n\n深度学习大部分我们用作有监督的学习算法。其实说深度学习是死的，不如说有监督学习是\n死的。\n\n有监督学习其实是完全的复刻标签里面含有的知识，它的本质就是一个函数拟合的问题，它\n无法摆脱对绝对的标签的依赖，无法超越标签。\n\n而强化学习，正由于它的目标是模糊和不确定的。使得算法在设计上必须具有随机性和探索\n性，它能够探索出人类从来没有到过的领域。就像在围棋上，下出人类完全无法理解的棋，\n人从来没有想过的一些下法。这就是强化学习算法探索出来的知识。所以我觉得它是活着的\n，拥有智能的算法。\n\n<font color=green>从感性的层面，强化学习算法很接近人脑的行为：感知环境，探索环境\n，强化有益行为</font>\n\n#### 关于深度学习，强化学习，连续可导性和离散不可导性的讨论\n\n1.  从函数的角度，深度学习和强化学习都需要学习一个函数映射。深度学习是从输入到\n    target 的映射。强化学习是学从环境状态到 Action 的映射。这两个映射可以看成性\n    质一样的，因为深度学习可以作为强化学习的智能体。所以从函数的角度，他们没有连\n    续和离散的区别。（PS. 深度学习模型和强化学习的智能体都是连续可导的函数\n    。target 和 Action 都可以是离散的或者连续的。）\n\n2.  深度学习作为用梯度下降算法优化的模型，无法优化对 loss 不可导的参数。如在深度\n    学习中，设计一个分支来决定模型是否应该包含某个模块，这个分支的参数是不可优化\n    的。因为包含和不包含是离散的，对 loss 不可导。\n\n不过假设，如果包含与不包含是连续的。也就是说，可以以 0.1 的权重包含。那么，这些\n参数是可以优化的。从这点来看，离散就是导致模型参数不可优化的原因。\n\n3.  强化学习在离散的情况下解决 2 中的问题。由此，我得到了一个概念，强化学习解决\n    离散的问题。\n\n4.  下面我们来分析一下这个场景。首先，决定一个模块该不该被使用，这个场景是一次\n    Action 的场景，不是连续决策的场景。也就是说 Action 一次，我就能知道最终\n    reward 多少了，只有单步的 reward。\n\n限于这个单次决策的场景来看，如果 Action 相对于 reward 是连续可导的，那么深度学习\n就能解决这个问题。如果 Action 相对于 reward 是离散的，那么仅仅深度学习无法解决这\n个问题，要靠强化学习。\n\n<font color=green>这里单次 Action 就知道 reward，实际上这个问题就退化为了有监督\n学习，因为这个单步的 reward 就可以看成我的标签了。所以深度学习解决这个问题是很自\n然的。</font>\n\n5.  多次决策的问题，无论是连续的还是离散的都只能用强化学习的方法。因为多次决策，\n    这个问题就不可以退化为监督学习的问题了。它是一个真正的强化学习的问题。\n\n综上所诉，强化学习解决深度学习解决不了的离散问题，那只是在单次决策的时候，这个问\n题退化为了有监督学习。强化学习的方法，恰好可以提供离散变量的学习。\n\n强化学习方法解决深度学习中的离散问题，仅仅是强化学习附带的一个小福利。\n\n**<font color=green>因为它能把经验转化为可导的目标，就拿策略网络来说，从梯度的角\n度，它只管增加当前随机 Action 的概率，而加入 advatage 之后，自动就优化除了想要的\n大 reward 的行为。</font>**\n\n#### 深度学习优化和强化学习优化的感性理解\n\n前面说了深度学习优化可导的参数，强化学习可以优化不可导的参数。这里说一下对深度学\n习优化方法和强化学习优化方法的感性理解。\n\n还是说前面包不会包含某模块的例子，由于连续可导，对于每一个参数值，深度学习模型其\n实都同时参与了两种 Action（包含和不包含）。score = 0.1 包含，其实其中包含了含有\n的成分，也包含了不含有的成分。所以我们可以连续的变动 score，看看包含多好，还是不\n好含多好。这其实就是梯度下降算法的方式。得益于每一个参数，其实我都对包含和不包含\n的情况都有了解，我当然知道哪个更好，就往那边移动（优化）。\n\n然而，对于离散的情况，要么只能包含，要么只能不包含。当选择包含的时候，模型对不包\n含的情况完全是无知的。可能更好，也可能差。当不包含的时候，也是一样的。无论哪种情\n况，我都没有办法优化，两种情况是完全隔离开的，信息不沟通的，是离散的。所以梯度下\n降算法无法优化它。\n\n强化学习用随机探索的方法让两者信息又沟通起来。包含一下试一下，然后，不包含也试一\n下。尝试的结果是哪种 reward 多，就增大哪种的概率。\n\n**<font color=green>所以，无论哪种优化方法，信息的沟通都是必要的。要对所有的\naction 都了解，才能知道选择哪种 action。 只是深度学习是连续的，它的每一种参数，\n都包含了所有 Action 的信息（reward），每一种 Action 都参与了，所以它能直接连续的\n梯度下降的优化，不需要随机探索了。而对于离散的，每种 action 只能知道自己的\nreward，对其他 Action 一无所知的时候，梯度的优化是不行的。必须要探索各种\nAction，还是要知道了每一种 Action 的情况(reward)之后，才能优化。这是方法论\n。</font>**\n\n更进一步，离散的地方，相对于 reward 一定是不可导的，所以深度学习不行。而强化学习\n，更准确的说是策略网络，相当于给离散的地方加了标签，这样它就在离散的地方有监督了\n，它就可以根据增加的标签优化。而标签的设计就是根据探索的结果，增大 reward 大的\nAction，reward 大的 Action 就是它的标签，而且这个标签是动态的，是对抗得出的。\n\n强化学习方法算出的梯度是策略梯度。\n\n**<font color=green>强化学习： 不知道选哪边了； 试试呗；按试出来 reward 大的\nAction 优化它。</font>**\n\n**<font color=green>强化学习：它离散，对于 reward 不可导；不直接用 reward 优化它\n，给它加个标签，把试出来 reward 大的 Action，作为标签去优化</font>**\n\n在不可导的地方加标签。\n\n**<font color=green>由此，强化学习算法的本质是制作标签，无论是连续决策，标签不确\n定的情况，还是它能解决离散问题的情况，它都是用制作标签的方法解决的。</font>**\n\n### 策略网络(Policy Network)和估值网络(Value Network)\n\nAlphaGo 使用了快速走子，策略网络，估值网络和蒙特卡洛搜索树等技术。\n\n强化学习算法的一个关键是<font color=green>随机性和探索性</font>，我们需要让算法\n通过试验样本自己学习什么才是某个环境状态下比较好的 Action，而不是像有监督学习一\n样，告诉模型什么是好的 Action，因为我们也不知道什么是好的 Action.\n\n深度强化学习模型的本质是神经网络，神经网络是工具，根据问题转化以及建模的不同，主\n要分为策略网络和估值网络。\n\n强化学习中最重要的两类方法**Policy-based,Value-based**。第一种直接预测在某个环境\n下应该采取的行动（直接输出改采取 Action 的概率）。第二种预测在某个环境下所有行动\n的期望价值，然后通过选择 q 值最高的行动执行策略。\n\n他们都能完成决策，但由于建模的不同，估值网络包含有更多的信息，它不仅能提供决策，\n还预测了决策带来的收益。\n\n<font color=deeppink>策略网络是隐式的学习了某一 Action 所带来的全部获益（当前获\n益+后续获益），而估值网络直接显示的学习 Action 所带来的全部获益。</font>强化学习\n算法做出最佳抉择只需要知道哪个 Action 全部获益最大，策略网络就是这样做的，估值网\n络不仅学习了哪个 Action 全部获益最大，还把每个 Action 的全部获益给计算出来了。\n\n<font color=green>相对来说，策略网络的性能会比估值网络好一些。</font>\n\n<font color=green>Value Based 方法适合仅有少量 Action 的环境，而 Policy Based 方\n法更通用，适合 Action 种类非常多，或者具有连续取值的 Action 的环境。结合了深度学\n习之后，Policy Based 方法就变成了策略网络，Value Based 方法就变成了估值网络\n。</font>\n\n#### 策略网络(Policy Network)\n\n直接看一个例子，学习的目标是，左右用力使得木棍不倒地\n，[Policy_Network.py](https://github.com/xyegithub/myBlog/blob/main/2021/12/03/First-Step-to-RL/policy_network.py)\n[Policy_Network.py](policy_network.py)\n\n关键代码\n\n```python\nscore = tf.matmul(layer1,W2)\nprobability = tf.nn.sigmoid(score)#网络输出采取Action 1的概率。\ninput_y = tf.placeholder(tf.float32,[None,1], \\\\\nname=\"input_y\")# 输入采取过的行为，这个行为是随机生成的。\nadvantages = tf.placeholder(tf.float32,name=\"reward_signal\")\n# 输入获益\nloglik = tf.log(input_y*(input_y - probability) + \\\\\n(1 - input_y)*(input_y + probability))\n# 损失函数，如果行为是1，则增大\n\n#概率，如果行为是 0，则减小概率（相当于也是增加0的概率），也就是说这个损\n#失函数无论当前行为是什么都会增大当前行为的概率。\nloss = -tf.reduce_mean(loglik * advantages) # 这行代码很关键，\n#相当于给损失函数成了一个权重advantages，得到最终的损失函数。\n#advantages是当前试验的全部获益。如果全部获益大，将以更大的权重，增加\n#当前行为的概率。\n\n#所以，策略网络其实也是一个对抗学习的过程，增加所有采取过行为的概率，只是\n#获益多的行为以更大的权重增加。\n\n#一个试验： 由初始状态开始，随机采取一连串的行为\n#（Policy_Network.py 中是根据当前模型输出的概率,来生成随机的行为，但\n#是我感觉直接用0.5的概率随机生成一连串的0和1的行为也是可以的，下面将实\n#验一下），直到任务结束。\n\n## 由于每个试验，都可以一直行为到任务结束，所以每个action，我们都可以得\n#到它在该试验中的全部获益（当前获益 + 之后所有行为的获益）\n\n## 随机生成了n个试验，其中又各种各样的决策（随机探索），全部获益大的\n#action，它的advantages也大，那么它的概率就增大的多，它被强化的厉害。\n\n##试验生成的过程，实际上就是数据集构建的过程。策略网络的数据集是由环境\n#和一系列随机的行为构成的。它提供了环境在各种行为下的反应（获益）。模型\n#学习为环境带来高获益的行为的规律。\n```\n\n由上面的代码可知，从策略网络的角度看强化学习的话，强化学习的关键其实是对数据集的\n构建---如何构建数据集。\n\n在构建数据集的时候，随机探索肯定是必要的。随机探索的结果会得到一系列好的行为，也\n会得到一系列不好的行为。如何强化好的行为就是算法设计的时候需要注意的。\n\n上面的代码在探索阶段借用了当前的模型，即根据当前模型输出的概率随机生成行为，从而\n形成数据集。如果完全的随机（一直使用 0.5 的概率随机的生成 Action）会什么样呢？\n\n##### 数据集是否可以和模型无关（不随着模型变化）？\n\n关键修改代码\n\n```python\n###基于当前模型，根据当前的状态x，生成Action 1的概率\ntfprob = sess.run(probability,feed_dict={observations: x})\n### 基于预测概率，随机生成行为，并试探环境。生成数据集。\naction = 1 if np.random.uniform() < tfprob else 0\n```\n\n修改后\n\n```python\n### 注释掉这句，并不需要根据当前模型生成概率\n### tfprob = sess.run(probability,feed_dict={observations: x})\n### 直接设置概率为0.5，随机完全随机探索生成数据集。\ntfprob = 0.5\naction = 1 if np.random.uniform() < tfprob else 0\n```\n\n结果：修改后，模型无法收敛。\n\n完全随机很小的概率能探索出很好的试验，这些好的行为也很难持续的得到强化。\n\n所以，强化学习也有一种效果叠加的感觉。在完全随机的情况下 ，探索出相对好的\naction，再在这个相对好的 action 的基础上，在探索探索出更好的 action。\n\n如果数据集不依赖模型，就是一直在完全随机的基础上探索。这样很难收敛。\n\n也可以这样看，完全随机的话，最多能学到前几步的策略（因为完全随机就走不了几步，探\n索的经验就只有那几步）。依赖于模型，探索的行为更有价值，因为是依赖于学到过的知识\n的，一方面确认了，按学到的知识走，确实获益多，一方面又在学到的知识的基础上，做了\n一些随机，探索更好的知识。\n\n#### 估值网络(Value Network，Q-learning)\n\nQ-Learing 用神经网络实现，得到的模型就是估值网络。\n\n也看一个例子\n，[Value_Network.py](https://github.com/xyegithub/myBlog/blob/main/2021/12/03/First-Step-to-RL/policy_network.py)\n\n学习每个 Action 所对应的 reward 的期望。\n\n我们先看看数据集的结构\n\n```python\n###Save the experience to our episode buffer.\nepisodeBuffer.add(np.reshape(np.array([s,a,r,s1,d]),[1,5]))\n### 其中s是当前时刻的环境状态，a是当前随机采取的Action，r是这个Action的当前reward\n### s1是采取Action之后的下一状态，d是布尔型表示是否任务结束。\n```\n\n1.  现在目标是学习 Q(s<sub>t</sub>, a<sub>t</sub>)，也就是当前环境状态，采取行为\n    a 的全部 reward 的期望。\n\n2.  现在假设我们有模型 Q<sub>desird</sub>，可以预测全部 reward 了，那么这个模型\n    应该满足条件，Q<sub>desired</sub>(s<sub>t</sub>, a<sub>t</sub>) = r +\n    $\\lambda$ Max<sub>a</sub> Q<sub>desired</sub>(s<sub>t+1</sub>, a)，这有点递\n    归的感觉了。\n\n3.  现在我们能不能根据这个公式 ， 来优化出 Q<sub>desired</sub>。肯定是能的。对于\n    探索过的所有试验，公式都满足的话，此时的模型就可以看成我们想要的模型了。我感\n    觉这就是估值网络方法的核心。\n\n直接看关键代码\n\n```python\n###Choose an action by greedily (with e chance of random action)\n### from the Q-network\nif np.random.rand(1) < e or total_steps < pre_train_steps:\na = np.random.randint(0,4)\nelse:\na = sess.run(mainQN.predict,feed_dict={mainQN.scalarInput:[s]})[0]\n### 这段代码其实是探索的代码，当最开始的时候是完全随机探索（total_steps < pre_train_steps的时候）\n### 当total_steps >= pre_train_steps之后呢，就不是完全随机探索了。\n### 有e的概率是随机探索的，（1-e）的概率是由训练好的模型决定之后的Action。\n### 这里是估值网络和策略网络的不同，策略网络本身就具有随机性，所以不需要引入\n### 额外的参数e和pre_train_steps来控制随机探索的强度。\n### 策略网络在训练的过程中，本身就是由随机性大，到慢慢的收敛到好的Action\n### 所以可以直接得到好的探索的训练样本。估值网络没有这样好的性质，它连\n### 随机性都没有，就需要人为的制造，满足从完全随机探索，到在好的Action的\n### 基础上具有一定的随机性进行探索。\n```\n\n**这是策略网络和估值网络的共通之处，其实这也最上面那个注释\"by greedily (with e\nchance of random action) from the Q-network\"的意思。**\n\n**<font color=green>“贪心”两个字完美的诠释了强化学习，无论是策略网络还是估值网络\n，在探索阶段，在生成数据集上的特点。</font>**\n\n在策略网络那一节，我做的那个试验，和模型无关生成数据集。其实就是不贪心了，不贪心\n不行。\n\n```python\nif total_steps > pre_train_steps:\nif e > endE:\ne -= stepDrop\n### 完全随机了之后，开始慢慢减小随机性。\n### 模型约不可靠的时候，探索性和随机性越强。后来模型慢慢变得可靠就减弱随机性。\n### 因为模型越来越可靠的时候，随机性大就会得到很多远远低于当前模型性能的试验\n### 这些试验都是早就被pass了的，学不到什么东西，损坏模型的探索。\n### endE=0.1 说明无论训练的多好，模型都保持了随机性，保持了探索性\n###　人永远要有好奇心，永远要觉得自己的知识还可能不是最好的\n```\n\n下面的代码是将在数据集弄好的情况下，如何训练模型的。\n\n```python\nif total_steps % (update_freq) == 0:\ntrainBatch = myBuffer.sample(batch_size) #Get a random batch of experiences.\n#Below we perform the Double-DQN update to the target Q-values\n# 主网络预测了下一刻需要采取的Action，trainBatch[:,3]是当前的下一刻的环境\n# 回顾公式，Q(st, at) = r + $\\lambda$ Max Q(s_t+1, a)\n# 这里主函数预测的Action就是t+1时刻（下一时刻）获益值最大的Action\nQ1 = sess.run(mainQN.predict,feed_dict={mainQN.scalarInput:np.vstack(trainBatch[:,3])})\n# target网络预测了下一时刻的reward\nQ2 = sess.run(targetQN.Qout,feed_dict={targetQN.scalarInput:np.vstack(trainBatch[:,3])})\nend_multiplier = -(trainBatch[:,4] - 1)\n# 用主网络预测出的Action以及target网络预测出的所有行为的reward\n# 选择了最大的reward,也就是公式中的 Max Q(s_t+1, a)\ndoubleQ = Q2[range(batch_size),Q1]\n# 这里得到的就是公式Q(st, at) = r + $\\lambda$ Max Q(s_t+1, a)\n# 的右边，当前reward加上乘以衰减系数之后的，下一步最大reward\ntargetQ = trainBatch[:,2] + (y*doubleQ * end_multiplier)\n#Update the network with our target values.\n# 公式右边得到了之后，在把真正的当前状态输入进去，得到左边\n# 左边以右边作为标签进行学习。更新主网络的参数\n_ = sess.run(mainQN.updateModel, \\\nfeed_dict={mainQN.scalarInput:np.vstack(trainBatch[:,0]),mainQN.targetQ:targetQ, mainQN.actions:trainBatch[:,1]})\n# 更新target网络的参数。\nupdateTarget(targetOps,sess) #Update the target network toward the primary network.\n```\n\ntarget 网络参数的更新方式代码\n\n````python\ndef updateTargetGraph(tfVars,tau):\ntotal_vars = len(tfVars)\nop_holder = []\n# 主网络是和target网络一样的，前一半参数正好是主网络的参数\nfor idx,var in enumerate(tfVars[0:total_vars//2]):\n# idx+total_vars对应的时候后一半的参数也就是target网络的参数\n# 这里相当于是target参数 = 主网络参数 * tau + （1- tau）*target参数\n# 也就是说target网络在以一定的速度向主网络靠近\n# 结合前面的代码，主网络才是真正学习的网络，target网络的作用仅仅是得到等式\n# 右边的值，即标签，即使是等式右边，也不是target网络完全决定的\n# target网络得到了所有Action的reward，最大的Action是主网络选择的\n# 为什么要这么做，target网络也是在模仿主网络，只用主网络也能得到等式的右边\n# 理论上其实右边也应该是主网络决定，现在搞了个主网络的模仿者target网络\n# 是出于优化的考虑。我们后面叙述。\nop_holder.append(tfVars[idx+total_vars//2].assign\\\\\n((var.value()*tau) \\\\\n                      + ((1-tau)*tfVars[idx+total_vars//2].value())))\n                      return op_holder\n\n                      def updateTarget(op_holder,sess):\n                      for op in op_holder:\n                      sess.run(op)\n\n                      ```\n\n                      现在其实我们把关键的代码都看了，在这段代码实现中，引入了一些state of the art的trick，下面我们结合看过的代码在提一遍。\n\n                      1.  引入卷积层，这段代码比较简单，我们没有看。环境状态是用图片的形式给的，用CNN提取特征是比较自然的。\n                      2.  Experience replay。估值网络不像策略网络一样得到试验之后，用一次就扔掉再去制作新的试验（数据集）来训练。它把每次试验都放在一个试验池里面。试验池长度为N，如果超过了N，那就把最老的试验样本扔掉。每次 训练的时候从试验池里面随机选择batchsize个样本进行训练，保持了对样本的利用率，同时其实也增加了模型的稳定性，因为数据集是相对稳定的（相比于N=1而言，每次训练了就扔掉，进来的都是新的，不那么稳定）。\n                      3.  使用target网络来辅助训练。\\*\\*之所以要用target网络来制造训练目标，用主网络来实际训练，是为了让Q-Learing训练的目标保持平稳。\\*\\*强化学习不像普通的监督学习，它的目标是变化的，\\*\\*因为学习目标的一部分就是模型本身输出的。\\*\\*每次更新模型参数都会导致学习目标发生变化，如果更新频繁，幅度很大，我们的训练过程就会变得非常不稳定并且失控。\\*\\*DQN的训练会陷入目标Q与预测Q的反馈循环中，震荡发散。\\*\\*所以用target网络来制造目标，target网络和主网络又不是矛盾的，因为target网络会逼近主网络，它是主网络的模仿者，所以它提供的目标Q也是有权威的。\n                      4.  Double DQN。这个trick源于target网络选的最大Action不准。模仿的不够好，现在就让主网络来帮它选。也就是上面代码中我们看过了主网络输出action，选择target网络输出的reward，得到公式的右边。\n                      5.  Dueling DQN。上代码\n\n                      ```python\n                      self.AW = tf.Variable(xavier_init([h_size//2,env.actions]))\n                      self.VW = tf.Variable(xavier_init([h_size//2,1]))\n                      self.Advantage = tf.matmul(self.streamA,self.AW)\n                      self.Value = tf.matmul(self.streamV,self.VW)\n\n###Then combine them together to get our final Q-values.\n### 看这里Qout是网络最终预测的所有Action的reward。它由两部分组成Value和Advantage\n### 由最上面两行可以看出Value是一维的，是实数，advantage是#action维度的向量\n### 所以，Dueling DQN就是将reward裁成了两部分，一部分是环境状态本身具有的价值Value\n### 另一部分就是Action本身具有的价值，相加起来就是在这个环境下Action具有的价值。\n### 其实我感觉这些解释都是人为的，具体是不是这样谁也不知道，可能只是这样优化的好。\n###　因为即使不分为两部分，网络输出Ｑout的时候，输入也是环境状态，肯定都会把环境考虑\n### 进去才有Action的价值。然而直接输出这个价值，发现优化的不好，分为两部分之后，发现\n### 优化的好了。其实谁也不知道其中到底是什么原因起作用。\nself.Qout = self.Value + tf.subtract(self.Advantage,tf.reduce_mean(self.Advantage,axis=1,keep_dims=True))\n\n````\n\n#### 策略网络和估值网络的不同\n\n从策略网络和估值网络看，强化学习都有探索和对抗两个过程。通过探索，得到数据集，包\n含了各种可能性。通过对抗，让数据集中好的（reward 高的试验胜出）。他们的不同点在\n于对抗的方法。\n\n1.  策略网络：对抗的焦点在于选择 Action 的概率。\n2.  估值网络：对抗的焦点在于评估 Action 的 reward。\n3.  两者都会影响数据集的制作，而且影响的方式是相同的：贪心和随机探索\n4.  比起策略网络，估值网络更加没有对抗的感觉。因为策略网络在提高某一个 Action 的\n    概率的时候，会抑制其他 Action 的概率（总的概率为 1）。而估值网络在提高某一个\n    Action 的 reward 的时候，和其他 Action 是无关的。**而且其实不能说是提高\n    reward，它是预测出正确的 reward。**（这是两者的很大的不同处，策略网络更像是\n    一个分类问题，而估值网络像是一个回归问题）\n\n### 回顾\n\n强化学习的本质是连续决策。强化学习算法的关键是标签制作，数据集制作。\n\n连续决策问题是没有确定的标签的，它通过探索试验得到数据集和标签，为没有提供标签的\n问题，做了标签，让问题可以解决。\n\n深度学习无法优化离散的不可导的参数，强化学习也可以通过在离散的地方做数据集做标签\n，把它转换为可导的，可用 sgd 优化的问题。\n\n做标签和数据集的关键是随机性以及贪心，贪心让它立足于以往的知识，随机让它不刚愎自\n用，保持谦卑，给新的可能保留空间。\n\n无论是策略网络还是估值网络，在数据集的制作上都是一样的，随机性和贪心。估值网络的\n数据集制作，可以看出强化学习探索的本质（由于估值网络本身没有随机性，它在制作数据\n集的时候，显示的暴露了，探索和贪心的本质。策略网络这方面还不太好看出来，因为它是\n隐式的利用探索和贪心）。\n\n策略网络，增大所有行为的概率，但是对于 reward 大 的行为增大的权重大。这个思路在\n我得感觉上更加符合强化两个字。强化好的行为嘛。\n\n估值网络的本质是公式 Q<sub>desired</sub>(s<sub>t</sub>, a<sub>t</sub>) = r +\n$\\lambda$ Max<sub>a</sub> Q<sub>desired</sub>(s<sub>t+1</sub>, a)，有点递归的感\n觉。\n\n策略网络和估值网络数据集也有一点不同，策略网络的数据集是纵向的，一串行为一起的。\n而估值网络的数据集是单个单个的。\n\n由下面代码可以看出，策略网络中，每一窜试验就会训练一次，只是网络参数更新会积累了\n好几次试验之后才更新。策略网络关心从开始到结束一系列行为。而估值网络只关心当前和\n下一状态。\n\n```python\nif done:\nepisode_number += 1\nepx = np.vstack(xs)\nepy = np.vstack(ys)\nepr = np.vstack(drs)\ntfp = tfps\nxs,hs,dlogps,drs,ys,tfps = [],[],[],[],[],[]\n\ndiscounted_epr = discount_rewards(epr)\ndiscounted_epr -= np.mean(discounted_epr)\ndiscounted_epr //= np.std(discounted_epr)\n\ntGrad = sess.run(newGrads,feed_dict={observations: epx, input_y: epy, advantages: discounted_epr})\nfor ix,grad in enumerate(tGrad):\ngradBuffer[ix] += grad\n\nif episode_number % batch_size == 0:\nsess.run(updateGrads,feed_dict={W1Grad: gradBuffer[0],W1_1Grad:gradBuffer[1],W2Grad:gradBuffer[2]})\n```\n\n估值网络人为的控制随机强度，也是一个值得考虑的问题。\n","source":"_posts/First-Step-to-RL.md","raw":"---\ntitle: First Step to Reinforcement Learning\ndate: 2021-12-03 16:48:41\ndescription: An introduction to Reinforcement Learning\ntags:\n  - Reinforcement Learning\n\ncategories:\n  - Machine Learning\n  - Reinforcement Learning\n---\n\n### 什么是强化学习，关于强化学习的几点疑问\n\n<font color=green size=3>强化学习三要素：环境状态，行动，奖励</font>\n\n<font color=green size=3>目标：尽量多的获得奖励</font>\n\n<font color=green size=3>本质：连续决策</font>\n\n基本的强化学习模型包括：\n\n- 环境状态的集合 S\n- 动作的集合 A\n- 状态之间的转换规则（是环境的一部分）\n- 规定转换后“即时奖励”的规则（是环境的一部分）\n- 描述主体（智能体）能够观察到什么的规则（是环境的一部分）\n- 能够做出决策/动作的主体（智能体）\n\n#### 区别于深度学习，强化学习的本质特点是什么？\n\n**两个定义**\n\n1，强化学习是机器学习的一个重要分支，主要用来解决连续决策问题。\n\n2，强化学习又称 再励学习，评价学习或增强学习，是机器学习的范式和方法论之一，用于\n描述和解决智能体（agent）在于环境交互过程中通过学习策略以达成回报最大或实现特定\n目标的问题。\n\n强化学习的本质是<font color=deeppink> 描述和解决智能体（agent）在于环境交互过程\n中通过学习策略以达成回报最大或实现特定目标的问题。</font>它本质是这样一种场景，\n在这种场景中它为了达到某种目的，做出连续的决策。这样符合这种场景，那就是强化学习\n。\n\n强化学习和深度学习这两个名词的维度是不一样的。深度学习描述的是算法本身的特点，深\n度够不够，是不是连接主义的模型。深度学习可以用来做无监督，也可以用来做半监督，也\n可以用来做弱监督，甚至可以用来作为强化学习算法的一部分。深度学习这个名词，不管应\n用场景只管模型本身是不是满足深度学习的特点。\n\n而强化学习描述的是应用场景的特点，只要能提供智能体决策的算法，管它是什么模型，什\n么结构，那就是强化学习的算法。从这个角度上讲，我现在认为强化学习和监督学习，无监\n督学习，弱监督学习，是并列的，是对应用场景的描述。和深度学习不是同一维度的。\n\n<font color=deeppink>强化学习的本质在于目标给定的形式，不像无监督学习那样完全没\n有学习目标，也不像监督学习那样有非常明确的目标（label），强化学习的目标一般是变\n化的，不明确的，甚至可能不存在绝对正确的目标。，强化学习的问题都可以抽象成，环境\n状态，行动和奖励。应该说只要能抽象为这三个要素，目标是获得最大奖励的模型，就是强\n化学习的模型。</font>\n\n强化学习的最大的特点是“试错”，是尝试各种可能，而强化结果好的可能。（策略网络的特\n点，估值网络的特点是修正和预测获益）\n\n由于强化学习是一种决策学习，这个问题的特点就是离散型。但是离散并不就是强化学习（\n连续的决策才是，目标的模糊和不确定性是决策问题的特点）。深度学习本质是函数的拟合\n，所以连续可微是它的特点。并不能说连续可微的问题就是深度学习，离散的问题就是强化\n学习。\n\n#### 深度学习用梯度下降的算法实现模型的优化，强化学习无法求导，甚至连学习目标都是模糊的如何优化模型参数？\n\n这个问题要了解下一节，具体的强化学习方法。\n\n#### 强化学习与弱监督学习？\n\n弱监督是属于有监督学习，只是它学习的目标不是被给予的标签，而是比被给予标签更强的\n标签（强弱是指标签做含有的信息量），也就是说弱监督是根据少量信息的标签，推测出更\n多的信息。\n\n强化学习的本质是连续决策。连续决策的特点是目标的模糊和不确定性。\n\n所以，虽然弱监督和强化学习都没有给出最终准确的目标，但是他们任然很不同的\n\n#### 深度学习是死的，没有智能的机器学习算法，强化学习是“活的”，有智能的机器学习算法\n\n深度学习大部分我们用作有监督的学习算法。其实说深度学习是死的，不如说有监督学习是\n死的。\n\n有监督学习其实是完全的复刻标签里面含有的知识，它的本质就是一个函数拟合的问题，它\n无法摆脱对绝对的标签的依赖，无法超越标签。\n\n而强化学习，正由于它的目标是模糊和不确定的。使得算法在设计上必须具有随机性和探索\n性，它能够探索出人类从来没有到过的领域。就像在围棋上，下出人类完全无法理解的棋，\n人从来没有想过的一些下法。这就是强化学习算法探索出来的知识。所以我觉得它是活着的\n，拥有智能的算法。\n\n<font color=green>从感性的层面，强化学习算法很接近人脑的行为：感知环境，探索环境\n，强化有益行为</font>\n\n#### 关于深度学习，强化学习，连续可导性和离散不可导性的讨论\n\n1.  从函数的角度，深度学习和强化学习都需要学习一个函数映射。深度学习是从输入到\n    target 的映射。强化学习是学从环境状态到 Action 的映射。这两个映射可以看成性\n    质一样的，因为深度学习可以作为强化学习的智能体。所以从函数的角度，他们没有连\n    续和离散的区别。（PS. 深度学习模型和强化学习的智能体都是连续可导的函数\n    。target 和 Action 都可以是离散的或者连续的。）\n\n2.  深度学习作为用梯度下降算法优化的模型，无法优化对 loss 不可导的参数。如在深度\n    学习中，设计一个分支来决定模型是否应该包含某个模块，这个分支的参数是不可优化\n    的。因为包含和不包含是离散的，对 loss 不可导。\n\n不过假设，如果包含与不包含是连续的。也就是说，可以以 0.1 的权重包含。那么，这些\n参数是可以优化的。从这点来看，离散就是导致模型参数不可优化的原因。\n\n3.  强化学习在离散的情况下解决 2 中的问题。由此，我得到了一个概念，强化学习解决\n    离散的问题。\n\n4.  下面我们来分析一下这个场景。首先，决定一个模块该不该被使用，这个场景是一次\n    Action 的场景，不是连续决策的场景。也就是说 Action 一次，我就能知道最终\n    reward 多少了，只有单步的 reward。\n\n限于这个单次决策的场景来看，如果 Action 相对于 reward 是连续可导的，那么深度学习\n就能解决这个问题。如果 Action 相对于 reward 是离散的，那么仅仅深度学习无法解决这\n个问题，要靠强化学习。\n\n<font color=green>这里单次 Action 就知道 reward，实际上这个问题就退化为了有监督\n学习，因为这个单步的 reward 就可以看成我的标签了。所以深度学习解决这个问题是很自\n然的。</font>\n\n5.  多次决策的问题，无论是连续的还是离散的都只能用强化学习的方法。因为多次决策，\n    这个问题就不可以退化为监督学习的问题了。它是一个真正的强化学习的问题。\n\n综上所诉，强化学习解决深度学习解决不了的离散问题，那只是在单次决策的时候，这个问\n题退化为了有监督学习。强化学习的方法，恰好可以提供离散变量的学习。\n\n强化学习方法解决深度学习中的离散问题，仅仅是强化学习附带的一个小福利。\n\n**<font color=green>因为它能把经验转化为可导的目标，就拿策略网络来说，从梯度的角\n度，它只管增加当前随机 Action 的概率，而加入 advatage 之后，自动就优化除了想要的\n大 reward 的行为。</font>**\n\n#### 深度学习优化和强化学习优化的感性理解\n\n前面说了深度学习优化可导的参数，强化学习可以优化不可导的参数。这里说一下对深度学\n习优化方法和强化学习优化方法的感性理解。\n\n还是说前面包不会包含某模块的例子，由于连续可导，对于每一个参数值，深度学习模型其\n实都同时参与了两种 Action（包含和不包含）。score = 0.1 包含，其实其中包含了含有\n的成分，也包含了不含有的成分。所以我们可以连续的变动 score，看看包含多好，还是不\n好含多好。这其实就是梯度下降算法的方式。得益于每一个参数，其实我都对包含和不包含\n的情况都有了解，我当然知道哪个更好，就往那边移动（优化）。\n\n然而，对于离散的情况，要么只能包含，要么只能不包含。当选择包含的时候，模型对不包\n含的情况完全是无知的。可能更好，也可能差。当不包含的时候，也是一样的。无论哪种情\n况，我都没有办法优化，两种情况是完全隔离开的，信息不沟通的，是离散的。所以梯度下\n降算法无法优化它。\n\n强化学习用随机探索的方法让两者信息又沟通起来。包含一下试一下，然后，不包含也试一\n下。尝试的结果是哪种 reward 多，就增大哪种的概率。\n\n**<font color=green>所以，无论哪种优化方法，信息的沟通都是必要的。要对所有的\naction 都了解，才能知道选择哪种 action。 只是深度学习是连续的，它的每一种参数，\n都包含了所有 Action 的信息（reward），每一种 Action 都参与了，所以它能直接连续的\n梯度下降的优化，不需要随机探索了。而对于离散的，每种 action 只能知道自己的\nreward，对其他 Action 一无所知的时候，梯度的优化是不行的。必须要探索各种\nAction，还是要知道了每一种 Action 的情况(reward)之后，才能优化。这是方法论\n。</font>**\n\n更进一步，离散的地方，相对于 reward 一定是不可导的，所以深度学习不行。而强化学习\n，更准确的说是策略网络，相当于给离散的地方加了标签，这样它就在离散的地方有监督了\n，它就可以根据增加的标签优化。而标签的设计就是根据探索的结果，增大 reward 大的\nAction，reward 大的 Action 就是它的标签，而且这个标签是动态的，是对抗得出的。\n\n强化学习方法算出的梯度是策略梯度。\n\n**<font color=green>强化学习： 不知道选哪边了； 试试呗；按试出来 reward 大的\nAction 优化它。</font>**\n\n**<font color=green>强化学习：它离散，对于 reward 不可导；不直接用 reward 优化它\n，给它加个标签，把试出来 reward 大的 Action，作为标签去优化</font>**\n\n在不可导的地方加标签。\n\n**<font color=green>由此，强化学习算法的本质是制作标签，无论是连续决策，标签不确\n定的情况，还是它能解决离散问题的情况，它都是用制作标签的方法解决的。</font>**\n\n### 策略网络(Policy Network)和估值网络(Value Network)\n\nAlphaGo 使用了快速走子，策略网络，估值网络和蒙特卡洛搜索树等技术。\n\n强化学习算法的一个关键是<font color=green>随机性和探索性</font>，我们需要让算法\n通过试验样本自己学习什么才是某个环境状态下比较好的 Action，而不是像有监督学习一\n样，告诉模型什么是好的 Action，因为我们也不知道什么是好的 Action.\n\n深度强化学习模型的本质是神经网络，神经网络是工具，根据问题转化以及建模的不同，主\n要分为策略网络和估值网络。\n\n强化学习中最重要的两类方法**Policy-based,Value-based**。第一种直接预测在某个环境\n下应该采取的行动（直接输出改采取 Action 的概率）。第二种预测在某个环境下所有行动\n的期望价值，然后通过选择 q 值最高的行动执行策略。\n\n他们都能完成决策，但由于建模的不同，估值网络包含有更多的信息，它不仅能提供决策，\n还预测了决策带来的收益。\n\n<font color=deeppink>策略网络是隐式的学习了某一 Action 所带来的全部获益（当前获\n益+后续获益），而估值网络直接显示的学习 Action 所带来的全部获益。</font>强化学习\n算法做出最佳抉择只需要知道哪个 Action 全部获益最大，策略网络就是这样做的，估值网\n络不仅学习了哪个 Action 全部获益最大，还把每个 Action 的全部获益给计算出来了。\n\n<font color=green>相对来说，策略网络的性能会比估值网络好一些。</font>\n\n<font color=green>Value Based 方法适合仅有少量 Action 的环境，而 Policy Based 方\n法更通用，适合 Action 种类非常多，或者具有连续取值的 Action 的环境。结合了深度学\n习之后，Policy Based 方法就变成了策略网络，Value Based 方法就变成了估值网络\n。</font>\n\n#### 策略网络(Policy Network)\n\n直接看一个例子，学习的目标是，左右用力使得木棍不倒地\n，[Policy_Network.py](https://github.com/xyegithub/myBlog/blob/main/2021/12/03/First-Step-to-RL/policy_network.py)\n[Policy_Network.py](policy_network.py)\n\n关键代码\n\n```python\nscore = tf.matmul(layer1,W2)\nprobability = tf.nn.sigmoid(score)#网络输出采取Action 1的概率。\ninput_y = tf.placeholder(tf.float32,[None,1], \\\\\nname=\"input_y\")# 输入采取过的行为，这个行为是随机生成的。\nadvantages = tf.placeholder(tf.float32,name=\"reward_signal\")\n# 输入获益\nloglik = tf.log(input_y*(input_y - probability) + \\\\\n(1 - input_y)*(input_y + probability))\n# 损失函数，如果行为是1，则增大\n\n#概率，如果行为是 0，则减小概率（相当于也是增加0的概率），也就是说这个损\n#失函数无论当前行为是什么都会增大当前行为的概率。\nloss = -tf.reduce_mean(loglik * advantages) # 这行代码很关键，\n#相当于给损失函数成了一个权重advantages，得到最终的损失函数。\n#advantages是当前试验的全部获益。如果全部获益大，将以更大的权重，增加\n#当前行为的概率。\n\n#所以，策略网络其实也是一个对抗学习的过程，增加所有采取过行为的概率，只是\n#获益多的行为以更大的权重增加。\n\n#一个试验： 由初始状态开始，随机采取一连串的行为\n#（Policy_Network.py 中是根据当前模型输出的概率,来生成随机的行为，但\n#是我感觉直接用0.5的概率随机生成一连串的0和1的行为也是可以的，下面将实\n#验一下），直到任务结束。\n\n## 由于每个试验，都可以一直行为到任务结束，所以每个action，我们都可以得\n#到它在该试验中的全部获益（当前获益 + 之后所有行为的获益）\n\n## 随机生成了n个试验，其中又各种各样的决策（随机探索），全部获益大的\n#action，它的advantages也大，那么它的概率就增大的多，它被强化的厉害。\n\n##试验生成的过程，实际上就是数据集构建的过程。策略网络的数据集是由环境\n#和一系列随机的行为构成的。它提供了环境在各种行为下的反应（获益）。模型\n#学习为环境带来高获益的行为的规律。\n```\n\n由上面的代码可知，从策略网络的角度看强化学习的话，强化学习的关键其实是对数据集的\n构建---如何构建数据集。\n\n在构建数据集的时候，随机探索肯定是必要的。随机探索的结果会得到一系列好的行为，也\n会得到一系列不好的行为。如何强化好的行为就是算法设计的时候需要注意的。\n\n上面的代码在探索阶段借用了当前的模型，即根据当前模型输出的概率随机生成行为，从而\n形成数据集。如果完全的随机（一直使用 0.5 的概率随机的生成 Action）会什么样呢？\n\n##### 数据集是否可以和模型无关（不随着模型变化）？\n\n关键修改代码\n\n```python\n###基于当前模型，根据当前的状态x，生成Action 1的概率\ntfprob = sess.run(probability,feed_dict={observations: x})\n### 基于预测概率，随机生成行为，并试探环境。生成数据集。\naction = 1 if np.random.uniform() < tfprob else 0\n```\n\n修改后\n\n```python\n### 注释掉这句，并不需要根据当前模型生成概率\n### tfprob = sess.run(probability,feed_dict={observations: x})\n### 直接设置概率为0.5，随机完全随机探索生成数据集。\ntfprob = 0.5\naction = 1 if np.random.uniform() < tfprob else 0\n```\n\n结果：修改后，模型无法收敛。\n\n完全随机很小的概率能探索出很好的试验，这些好的行为也很难持续的得到强化。\n\n所以，强化学习也有一种效果叠加的感觉。在完全随机的情况下 ，探索出相对好的\naction，再在这个相对好的 action 的基础上，在探索探索出更好的 action。\n\n如果数据集不依赖模型，就是一直在完全随机的基础上探索。这样很难收敛。\n\n也可以这样看，完全随机的话，最多能学到前几步的策略（因为完全随机就走不了几步，探\n索的经验就只有那几步）。依赖于模型，探索的行为更有价值，因为是依赖于学到过的知识\n的，一方面确认了，按学到的知识走，确实获益多，一方面又在学到的知识的基础上，做了\n一些随机，探索更好的知识。\n\n#### 估值网络(Value Network，Q-learning)\n\nQ-Learing 用神经网络实现，得到的模型就是估值网络。\n\n也看一个例子\n，[Value_Network.py](https://github.com/xyegithub/myBlog/blob/main/2021/12/03/First-Step-to-RL/policy_network.py)\n\n学习每个 Action 所对应的 reward 的期望。\n\n我们先看看数据集的结构\n\n```python\n###Save the experience to our episode buffer.\nepisodeBuffer.add(np.reshape(np.array([s,a,r,s1,d]),[1,5]))\n### 其中s是当前时刻的环境状态，a是当前随机采取的Action，r是这个Action的当前reward\n### s1是采取Action之后的下一状态，d是布尔型表示是否任务结束。\n```\n\n1.  现在目标是学习 Q(s<sub>t</sub>, a<sub>t</sub>)，也就是当前环境状态，采取行为\n    a 的全部 reward 的期望。\n\n2.  现在假设我们有模型 Q<sub>desird</sub>，可以预测全部 reward 了，那么这个模型\n    应该满足条件，Q<sub>desired</sub>(s<sub>t</sub>, a<sub>t</sub>) = r +\n    $\\lambda$ Max<sub>a</sub> Q<sub>desired</sub>(s<sub>t+1</sub>, a)，这有点递\n    归的感觉了。\n\n3.  现在我们能不能根据这个公式 ， 来优化出 Q<sub>desired</sub>。肯定是能的。对于\n    探索过的所有试验，公式都满足的话，此时的模型就可以看成我们想要的模型了。我感\n    觉这就是估值网络方法的核心。\n\n直接看关键代码\n\n```python\n###Choose an action by greedily (with e chance of random action)\n### from the Q-network\nif np.random.rand(1) < e or total_steps < pre_train_steps:\na = np.random.randint(0,4)\nelse:\na = sess.run(mainQN.predict,feed_dict={mainQN.scalarInput:[s]})[0]\n### 这段代码其实是探索的代码，当最开始的时候是完全随机探索（total_steps < pre_train_steps的时候）\n### 当total_steps >= pre_train_steps之后呢，就不是完全随机探索了。\n### 有e的概率是随机探索的，（1-e）的概率是由训练好的模型决定之后的Action。\n### 这里是估值网络和策略网络的不同，策略网络本身就具有随机性，所以不需要引入\n### 额外的参数e和pre_train_steps来控制随机探索的强度。\n### 策略网络在训练的过程中，本身就是由随机性大，到慢慢的收敛到好的Action\n### 所以可以直接得到好的探索的训练样本。估值网络没有这样好的性质，它连\n### 随机性都没有，就需要人为的制造，满足从完全随机探索，到在好的Action的\n### 基础上具有一定的随机性进行探索。\n```\n\n**这是策略网络和估值网络的共通之处，其实这也最上面那个注释\"by greedily (with e\nchance of random action) from the Q-network\"的意思。**\n\n**<font color=green>“贪心”两个字完美的诠释了强化学习，无论是策略网络还是估值网络\n，在探索阶段，在生成数据集上的特点。</font>**\n\n在策略网络那一节，我做的那个试验，和模型无关生成数据集。其实就是不贪心了，不贪心\n不行。\n\n```python\nif total_steps > pre_train_steps:\nif e > endE:\ne -= stepDrop\n### 完全随机了之后，开始慢慢减小随机性。\n### 模型约不可靠的时候，探索性和随机性越强。后来模型慢慢变得可靠就减弱随机性。\n### 因为模型越来越可靠的时候，随机性大就会得到很多远远低于当前模型性能的试验\n### 这些试验都是早就被pass了的，学不到什么东西，损坏模型的探索。\n### endE=0.1 说明无论训练的多好，模型都保持了随机性，保持了探索性\n###　人永远要有好奇心，永远要觉得自己的知识还可能不是最好的\n```\n\n下面的代码是将在数据集弄好的情况下，如何训练模型的。\n\n```python\nif total_steps % (update_freq) == 0:\ntrainBatch = myBuffer.sample(batch_size) #Get a random batch of experiences.\n#Below we perform the Double-DQN update to the target Q-values\n# 主网络预测了下一刻需要采取的Action，trainBatch[:,3]是当前的下一刻的环境\n# 回顾公式，Q(st, at) = r + $\\lambda$ Max Q(s_t+1, a)\n# 这里主函数预测的Action就是t+1时刻（下一时刻）获益值最大的Action\nQ1 = sess.run(mainQN.predict,feed_dict={mainQN.scalarInput:np.vstack(trainBatch[:,3])})\n# target网络预测了下一时刻的reward\nQ2 = sess.run(targetQN.Qout,feed_dict={targetQN.scalarInput:np.vstack(trainBatch[:,3])})\nend_multiplier = -(trainBatch[:,4] - 1)\n# 用主网络预测出的Action以及target网络预测出的所有行为的reward\n# 选择了最大的reward,也就是公式中的 Max Q(s_t+1, a)\ndoubleQ = Q2[range(batch_size),Q1]\n# 这里得到的就是公式Q(st, at) = r + $\\lambda$ Max Q(s_t+1, a)\n# 的右边，当前reward加上乘以衰减系数之后的，下一步最大reward\ntargetQ = trainBatch[:,2] + (y*doubleQ * end_multiplier)\n#Update the network with our target values.\n# 公式右边得到了之后，在把真正的当前状态输入进去，得到左边\n# 左边以右边作为标签进行学习。更新主网络的参数\n_ = sess.run(mainQN.updateModel, \\\nfeed_dict={mainQN.scalarInput:np.vstack(trainBatch[:,0]),mainQN.targetQ:targetQ, mainQN.actions:trainBatch[:,1]})\n# 更新target网络的参数。\nupdateTarget(targetOps,sess) #Update the target network toward the primary network.\n```\n\ntarget 网络参数的更新方式代码\n\n````python\ndef updateTargetGraph(tfVars,tau):\ntotal_vars = len(tfVars)\nop_holder = []\n# 主网络是和target网络一样的，前一半参数正好是主网络的参数\nfor idx,var in enumerate(tfVars[0:total_vars//2]):\n# idx+total_vars对应的时候后一半的参数也就是target网络的参数\n# 这里相当于是target参数 = 主网络参数 * tau + （1- tau）*target参数\n# 也就是说target网络在以一定的速度向主网络靠近\n# 结合前面的代码，主网络才是真正学习的网络，target网络的作用仅仅是得到等式\n# 右边的值，即标签，即使是等式右边，也不是target网络完全决定的\n# target网络得到了所有Action的reward，最大的Action是主网络选择的\n# 为什么要这么做，target网络也是在模仿主网络，只用主网络也能得到等式的右边\n# 理论上其实右边也应该是主网络决定，现在搞了个主网络的模仿者target网络\n# 是出于优化的考虑。我们后面叙述。\nop_holder.append(tfVars[idx+total_vars//2].assign\\\\\n((var.value()*tau) \\\\\n                      + ((1-tau)*tfVars[idx+total_vars//2].value())))\n                      return op_holder\n\n                      def updateTarget(op_holder,sess):\n                      for op in op_holder:\n                      sess.run(op)\n\n                      ```\n\n                      现在其实我们把关键的代码都看了，在这段代码实现中，引入了一些state of the art的trick，下面我们结合看过的代码在提一遍。\n\n                      1.  引入卷积层，这段代码比较简单，我们没有看。环境状态是用图片的形式给的，用CNN提取特征是比较自然的。\n                      2.  Experience replay。估值网络不像策略网络一样得到试验之后，用一次就扔掉再去制作新的试验（数据集）来训练。它把每次试验都放在一个试验池里面。试验池长度为N，如果超过了N，那就把最老的试验样本扔掉。每次 训练的时候从试验池里面随机选择batchsize个样本进行训练，保持了对样本的利用率，同时其实也增加了模型的稳定性，因为数据集是相对稳定的（相比于N=1而言，每次训练了就扔掉，进来的都是新的，不那么稳定）。\n                      3.  使用target网络来辅助训练。\\*\\*之所以要用target网络来制造训练目标，用主网络来实际训练，是为了让Q-Learing训练的目标保持平稳。\\*\\*强化学习不像普通的监督学习，它的目标是变化的，\\*\\*因为学习目标的一部分就是模型本身输出的。\\*\\*每次更新模型参数都会导致学习目标发生变化，如果更新频繁，幅度很大，我们的训练过程就会变得非常不稳定并且失控。\\*\\*DQN的训练会陷入目标Q与预测Q的反馈循环中，震荡发散。\\*\\*所以用target网络来制造目标，target网络和主网络又不是矛盾的，因为target网络会逼近主网络，它是主网络的模仿者，所以它提供的目标Q也是有权威的。\n                      4.  Double DQN。这个trick源于target网络选的最大Action不准。模仿的不够好，现在就让主网络来帮它选。也就是上面代码中我们看过了主网络输出action，选择target网络输出的reward，得到公式的右边。\n                      5.  Dueling DQN。上代码\n\n                      ```python\n                      self.AW = tf.Variable(xavier_init([h_size//2,env.actions]))\n                      self.VW = tf.Variable(xavier_init([h_size//2,1]))\n                      self.Advantage = tf.matmul(self.streamA,self.AW)\n                      self.Value = tf.matmul(self.streamV,self.VW)\n\n###Then combine them together to get our final Q-values.\n### 看这里Qout是网络最终预测的所有Action的reward。它由两部分组成Value和Advantage\n### 由最上面两行可以看出Value是一维的，是实数，advantage是#action维度的向量\n### 所以，Dueling DQN就是将reward裁成了两部分，一部分是环境状态本身具有的价值Value\n### 另一部分就是Action本身具有的价值，相加起来就是在这个环境下Action具有的价值。\n### 其实我感觉这些解释都是人为的，具体是不是这样谁也不知道，可能只是这样优化的好。\n###　因为即使不分为两部分，网络输出Ｑout的时候，输入也是环境状态，肯定都会把环境考虑\n### 进去才有Action的价值。然而直接输出这个价值，发现优化的不好，分为两部分之后，发现\n### 优化的好了。其实谁也不知道其中到底是什么原因起作用。\nself.Qout = self.Value + tf.subtract(self.Advantage,tf.reduce_mean(self.Advantage,axis=1,keep_dims=True))\n\n````\n\n#### 策略网络和估值网络的不同\n\n从策略网络和估值网络看，强化学习都有探索和对抗两个过程。通过探索，得到数据集，包\n含了各种可能性。通过对抗，让数据集中好的（reward 高的试验胜出）。他们的不同点在\n于对抗的方法。\n\n1.  策略网络：对抗的焦点在于选择 Action 的概率。\n2.  估值网络：对抗的焦点在于评估 Action 的 reward。\n3.  两者都会影响数据集的制作，而且影响的方式是相同的：贪心和随机探索\n4.  比起策略网络，估值网络更加没有对抗的感觉。因为策略网络在提高某一个 Action 的\n    概率的时候，会抑制其他 Action 的概率（总的概率为 1）。而估值网络在提高某一个\n    Action 的 reward 的时候，和其他 Action 是无关的。**而且其实不能说是提高\n    reward，它是预测出正确的 reward。**（这是两者的很大的不同处，策略网络更像是\n    一个分类问题，而估值网络像是一个回归问题）\n\n### 回顾\n\n强化学习的本质是连续决策。强化学习算法的关键是标签制作，数据集制作。\n\n连续决策问题是没有确定的标签的，它通过探索试验得到数据集和标签，为没有提供标签的\n问题，做了标签，让问题可以解决。\n\n深度学习无法优化离散的不可导的参数，强化学习也可以通过在离散的地方做数据集做标签\n，把它转换为可导的，可用 sgd 优化的问题。\n\n做标签和数据集的关键是随机性以及贪心，贪心让它立足于以往的知识，随机让它不刚愎自\n用，保持谦卑，给新的可能保留空间。\n\n无论是策略网络还是估值网络，在数据集的制作上都是一样的，随机性和贪心。估值网络的\n数据集制作，可以看出强化学习探索的本质（由于估值网络本身没有随机性，它在制作数据\n集的时候，显示的暴露了，探索和贪心的本质。策略网络这方面还不太好看出来，因为它是\n隐式的利用探索和贪心）。\n\n策略网络，增大所有行为的概率，但是对于 reward 大 的行为增大的权重大。这个思路在\n我得感觉上更加符合强化两个字。强化好的行为嘛。\n\n估值网络的本质是公式 Q<sub>desired</sub>(s<sub>t</sub>, a<sub>t</sub>) = r +\n$\\lambda$ Max<sub>a</sub> Q<sub>desired</sub>(s<sub>t+1</sub>, a)，有点递归的感\n觉。\n\n策略网络和估值网络数据集也有一点不同，策略网络的数据集是纵向的，一串行为一起的。\n而估值网络的数据集是单个单个的。\n\n由下面代码可以看出，策略网络中，每一窜试验就会训练一次，只是网络参数更新会积累了\n好几次试验之后才更新。策略网络关心从开始到结束一系列行为。而估值网络只关心当前和\n下一状态。\n\n```python\nif done:\nepisode_number += 1\nepx = np.vstack(xs)\nepy = np.vstack(ys)\nepr = np.vstack(drs)\ntfp = tfps\nxs,hs,dlogps,drs,ys,tfps = [],[],[],[],[],[]\n\ndiscounted_epr = discount_rewards(epr)\ndiscounted_epr -= np.mean(discounted_epr)\ndiscounted_epr //= np.std(discounted_epr)\n\ntGrad = sess.run(newGrads,feed_dict={observations: epx, input_y: epy, advantages: discounted_epr})\nfor ix,grad in enumerate(tGrad):\ngradBuffer[ix] += grad\n\nif episode_number % batch_size == 0:\nsess.run(updateGrads,feed_dict={W1Grad: gradBuffer[0],W1_1Grad:gradBuffer[1],W2Grad:gradBuffer[2]})\n```\n\n估值网络人为的控制随机强度，也是一个值得考虑的问题。\n","slug":"First-Step-to-RL","published":1,"updated":"2022-04-12T07:47:08.510Z","_id":"cl0thb1hx000cgquld3xogjs2","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><h3 id=\"什么是强化学习关于强化学习的几点疑问\"><span class=\"post-title-index\">.1. </span><a class=\"markdownIt-Anchor\" href=\"#什么是强化学习关于强化学习的几点疑问\"></a> 什么是强化学习，关于强化学习的几点疑问</h3>\n<p><font color=\"green\" size=\"3\">强化学习三要素：环境状态，行动，奖励</font></p>\n<p><font color=\"green\" size=\"3\">目标：尽量多的获得奖励</font></p>\n<p><font color=\"green\" size=\"3\">本质：连续决策</font></p>\n<p>基本的强化学习模型包括：</p>\n<ul>\n<li>环境状态的集合 S</li>\n<li>动作的集合 A</li>\n<li>状态之间的转换规则（是环境的一部分）</li>\n<li>规定转换后“即时奖励”的规则（是环境的一部分）</li>\n<li>描述主体（智能体）能够观察到什么的规则（是环境的一部分）</li>\n<li>能够做出决策/动作的主体（智能体）</li>\n</ul>\n<h4 id=\"区别于深度学习强化学习的本质特点是什么\"><span class=\"post-title-index\">.1.1. </span><a class=\"markdownIt-Anchor\" href=\"#区别于深度学习强化学习的本质特点是什么\"></a> 区别于深度学习，强化学习的本质特点是什么？</h4>\n<p><strong>两个定义</strong></p>\n<p>1，强化学习是机器学习的一个重要分支，主要用来解决连续决策问题。</p>\n<p>2，强化学习又称 再励学习，评价学习或增强学习，是机器学习的范式和方法论之一，用于\n描述和解决智能体（agent）在于环境交互过程中通过学习策略以达成回报最大或实现特定\n目标的问题。</p>\n<p>强化学习的本质是<font color=\"deeppink\"> 描述和解决智能体（agent）在于环境交互过程\n中通过学习策略以达成回报最大或实现特定目标的问题。</font>它本质是这样一种场景，\n在这种场景中它为了达到某种目的，做出连续的决策。这样符合这种场景，那就是强化学习\n。</p>\n<p>强化学习和深度学习这两个名词的维度是不一样的。深度学习描述的是算法本身的特点，深\n度够不够，是不是连接主义的模型。深度学习可以用来做无监督，也可以用来做半监督，也\n可以用来做弱监督，甚至可以用来作为强化学习算法的一部分。深度学习这个名词，不管应\n用场景只管模型本身是不是满足深度学习的特点。</p>\n<p>而强化学习描述的是应用场景的特点，只要能提供智能体决策的算法，管它是什么模型，什\n么结构，那就是强化学习的算法。从这个角度上讲，我现在认为强化学习和监督学习，无监\n督学习，弱监督学习，是并列的，是对应用场景的描述。和深度学习不是同一维度的。</p>\n<p><font color=\"deeppink\">强化学习的本质在于目标给定的形式，不像无监督学习那样完全没\n有学习目标，也不像监督学习那样有非常明确的目标（label），强化学习的目标一般是变\n化的，不明确的，甚至可能不存在绝对正确的目标。，强化学习的问题都可以抽象成，环境\n状态，行动和奖励。应该说只要能抽象为这三个要素，目标是获得最大奖励的模型，就是强\n化学习的模型。</font></p>\n<p>强化学习的最大的特点是“试错”，是尝试各种可能，而强化结果好的可能。（策略网络的特\n点，估值网络的特点是修正和预测获益）</p>\n<p>由于强化学习是一种决策学习，这个问题的特点就是离散型。但是离散并不就是强化学习（\n连续的决策才是，目标的模糊和不确定性是决策问题的特点）。深度学习本质是函数的拟合\n，所以连续可微是它的特点。并不能说连续可微的问题就是深度学习，离散的问题就是强化\n学习。</p>\n<h4 id=\"深度学习用梯度下降的算法实现模型的优化强化学习无法求导甚至连学习目标都是模糊的如何优化模型参数\"><span class=\"post-title-index\">.1.2. </span><a class=\"markdownIt-Anchor\" href=\"#深度学习用梯度下降的算法实现模型的优化强化学习无法求导甚至连学习目标都是模糊的如何优化模型参数\"></a> 深度学习用梯度下降的算法实现模型的优化，强化学习无法求导，甚至连学习目标都是模糊的如何优化模型参数？</h4>\n<p>这个问题要了解下一节，具体的强化学习方法。</p>\n<h4 id=\"强化学习与弱监督学习\"><span class=\"post-title-index\">.1.3. </span><a class=\"markdownIt-Anchor\" href=\"#强化学习与弱监督学习\"></a> 强化学习与弱监督学习？</h4>\n<p>弱监督是属于有监督学习，只是它学习的目标不是被给予的标签，而是比被给予标签更强的\n标签（强弱是指标签做含有的信息量），也就是说弱监督是根据少量信息的标签，推测出更\n多的信息。</p>\n<p>强化学习的本质是连续决策。连续决策的特点是目标的模糊和不确定性。</p>\n<p>所以，虽然弱监督和强化学习都没有给出最终准确的目标，但是他们任然很不同的</p>\n<h4 id=\"深度学习是死的没有智能的机器学习算法强化学习是活的有智能的机器学习算法\"><span class=\"post-title-index\">.1.4. </span><a class=\"markdownIt-Anchor\" href=\"#深度学习是死的没有智能的机器学习算法强化学习是活的有智能的机器学习算法\"></a> 深度学习是死的，没有智能的机器学习算法，强化学习是“活的”，有智能的机器学习算法</h4>\n<p>深度学习大部分我们用作有监督的学习算法。其实说深度学习是死的，不如说有监督学习是\n死的。</p>\n<p>有监督学习其实是完全的复刻标签里面含有的知识，它的本质就是一个函数拟合的问题，它\n无法摆脱对绝对的标签的依赖，无法超越标签。</p>\n<p>而强化学习，正由于它的目标是模糊和不确定的。使得算法在设计上必须具有随机性和探索\n性，它能够探索出人类从来没有到过的领域。就像在围棋上，下出人类完全无法理解的棋，\n人从来没有想过的一些下法。这就是强化学习算法探索出来的知识。所以我觉得它是活着的\n，拥有智能的算法。</p>\n<p><font color=\"green\">从感性的层面，强化学习算法很接近人脑的行为：感知环境，探索环境\n，强化有益行为</font></p>\n<h4 id=\"关于深度学习强化学习连续可导性和离散不可导性的讨论\"><span class=\"post-title-index\">.1.5. </span><a class=\"markdownIt-Anchor\" href=\"#关于深度学习强化学习连续可导性和离散不可导性的讨论\"></a> 关于深度学习，强化学习，连续可导性和离散不可导性的讨论</h4>\n<ol>\n<li>\n<p>从函数的角度，深度学习和强化学习都需要学习一个函数映射。深度学习是从输入到\ntarget 的映射。强化学习是学从环境状态到 Action 的映射。这两个映射可以看成性\n质一样的，因为深度学习可以作为强化学习的智能体。所以从函数的角度，他们没有连\n续和离散的区别。（PS. 深度学习模型和强化学习的智能体都是连续可导的函数\n。target 和 Action 都可以是离散的或者连续的。）</p>\n</li>\n<li>\n<p>深度学习作为用梯度下降算法优化的模型，无法优化对 loss 不可导的参数。如在深度\n学习中，设计一个分支来决定模型是否应该包含某个模块，这个分支的参数是不可优化\n的。因为包含和不包含是离散的，对 loss 不可导。</p>\n</li>\n</ol>\n<p>不过假设，如果包含与不包含是连续的。也就是说，可以以 0.1 的权重包含。那么，这些\n参数是可以优化的。从这点来看，离散就是导致模型参数不可优化的原因。</p>\n<ol start=\"3\">\n<li>\n<p>强化学习在离散的情况下解决 2 中的问题。由此，我得到了一个概念，强化学习解决\n离散的问题。</p>\n</li>\n<li>\n<p>下面我们来分析一下这个场景。首先，决定一个模块该不该被使用，这个场景是一次\nAction 的场景，不是连续决策的场景。也就是说 Action 一次，我就能知道最终\nreward 多少了，只有单步的 reward。</p>\n</li>\n</ol>\n<p>限于这个单次决策的场景来看，如果 Action 相对于 reward 是连续可导的，那么深度学习\n就能解决这个问题。如果 Action 相对于 reward 是离散的，那么仅仅深度学习无法解决这\n个问题，要靠强化学习。</p>\n<p><font color=\"green\">这里单次 Action 就知道 reward，实际上这个问题就退化为了有监督\n学习，因为这个单步的 reward 就可以看成我的标签了。所以深度学习解决这个问题是很自\n然的。</font></p>\n<ol start=\"5\">\n<li>多次决策的问题，无论是连续的还是离散的都只能用强化学习的方法。因为多次决策，\n这个问题就不可以退化为监督学习的问题了。它是一个真正的强化学习的问题。</li>\n</ol>\n<p>综上所诉，强化学习解决深度学习解决不了的离散问题，那只是在单次决策的时候，这个问\n题退化为了有监督学习。强化学习的方法，恰好可以提供离散变量的学习。</p>\n<p>强化学习方法解决深度学习中的离散问题，仅仅是强化学习附带的一个小福利。</p>\n<p><strong><font color=\"green\">因为它能把经验转化为可导的目标，就拿策略网络来说，从梯度的角\n度，它只管增加当前随机 Action 的概率，而加入 advatage 之后，自动就优化除了想要的\n大 reward 的行为。</font></strong></p>\n<h4 id=\"深度学习优化和强化学习优化的感性理解\"><span class=\"post-title-index\">.1.6. </span><a class=\"markdownIt-Anchor\" href=\"#深度学习优化和强化学习优化的感性理解\"></a> 深度学习优化和强化学习优化的感性理解</h4>\n<p>前面说了深度学习优化可导的参数，强化学习可以优化不可导的参数。这里说一下对深度学\n习优化方法和强化学习优化方法的感性理解。</p>\n<p>还是说前面包不会包含某模块的例子，由于连续可导，对于每一个参数值，深度学习模型其\n实都同时参与了两种 Action（包含和不包含）。score = 0.1 包含，其实其中包含了含有\n的成分，也包含了不含有的成分。所以我们可以连续的变动 score，看看包含多好，还是不\n好含多好。这其实就是梯度下降算法的方式。得益于每一个参数，其实我都对包含和不包含\n的情况都有了解，我当然知道哪个更好，就往那边移动（优化）。</p>\n<p>然而，对于离散的情况，要么只能包含，要么只能不包含。当选择包含的时候，模型对不包\n含的情况完全是无知的。可能更好，也可能差。当不包含的时候，也是一样的。无论哪种情\n况，我都没有办法优化，两种情况是完全隔离开的，信息不沟通的，是离散的。所以梯度下\n降算法无法优化它。</p>\n<p>强化学习用随机探索的方法让两者信息又沟通起来。包含一下试一下，然后，不包含也试一\n下。尝试的结果是哪种 reward 多，就增大哪种的概率。</p>\n<p><strong><font color=\"green\">所以，无论哪种优化方法，信息的沟通都是必要的。要对所有的\naction 都了解，才能知道选择哪种 action。 只是深度学习是连续的，它的每一种参数，\n都包含了所有 Action 的信息（reward），每一种 Action 都参与了，所以它能直接连续的\n梯度下降的优化，不需要随机探索了。而对于离散的，每种 action 只能知道自己的\nreward，对其他 Action 一无所知的时候，梯度的优化是不行的。必须要探索各种\nAction，还是要知道了每一种 Action 的情况(reward)之后，才能优化。这是方法论\n。</font></strong></p>\n<p>更进一步，离散的地方，相对于 reward 一定是不可导的，所以深度学习不行。而强化学习\n，更准确的说是策略网络，相当于给离散的地方加了标签，这样它就在离散的地方有监督了\n，它就可以根据增加的标签优化。而标签的设计就是根据探索的结果，增大 reward 大的\nAction，reward 大的 Action 就是它的标签，而且这个标签是动态的，是对抗得出的。</p>\n<p>强化学习方法算出的梯度是策略梯度。</p>\n<p><strong><font color=\"green\">强化学习： 不知道选哪边了； 试试呗；按试出来 reward 大的\nAction 优化它。</font></strong></p>\n<p><strong><font color=\"green\">强化学习：它离散，对于 reward 不可导；不直接用 reward 优化它\n，给它加个标签，把试出来 reward 大的 Action，作为标签去优化</font></strong></p>\n<p>在不可导的地方加标签。</p>\n<p><strong><font color=\"green\">由此，强化学习算法的本质是制作标签，无论是连续决策，标签不确\n定的情况，还是它能解决离散问题的情况，它都是用制作标签的方法解决的。</font></strong></p>\n<h3 id=\"策略网络policy-network和估值网络value-network\"><span class=\"post-title-index\">.2. </span><a class=\"markdownIt-Anchor\" href=\"#策略网络policy-network和估值网络value-network\"></a> 策略网络(Policy Network)和估值网络(Value Network)</h3>\n<p>AlphaGo 使用了快速走子，策略网络，估值网络和蒙特卡洛搜索树等技术。</p>\n<p>强化学习算法的一个关键是<font color=\"green\">随机性和探索性</font>，我们需要让算法\n通过试验样本自己学习什么才是某个环境状态下比较好的 Action，而不是像有监督学习一\n样，告诉模型什么是好的 Action，因为我们也不知道什么是好的 Action.</p>\n<p>深度强化学习模型的本质是神经网络，神经网络是工具，根据问题转化以及建模的不同，主\n要分为策略网络和估值网络。</p>\n<p>强化学习中最重要的两类方法<strong>Policy-based,Value-based</strong>。第一种直接预测在某个环境\n下应该采取的行动（直接输出改采取 Action 的概率）。第二种预测在某个环境下所有行动\n的期望价值，然后通过选择 q 值最高的行动执行策略。</p>\n<p>他们都能完成决策，但由于建模的不同，估值网络包含有更多的信息，它不仅能提供决策，\n还预测了决策带来的收益。</p>\n<p><font color=\"deeppink\">策略网络是隐式的学习了某一 Action 所带来的全部获益（当前获\n益+后续获益），而估值网络直接显示的学习 Action 所带来的全部获益。</font>强化学习\n算法做出最佳抉择只需要知道哪个 Action 全部获益最大，策略网络就是这样做的，估值网\n络不仅学习了哪个 Action 全部获益最大，还把每个 Action 的全部获益给计算出来了。</p>\n<p><font color=\"green\">相对来说，策略网络的性能会比估值网络好一些。</font></p>\n<p><font color=\"green\">Value Based 方法适合仅有少量 Action 的环境，而 Policy Based 方\n法更通用，适合 Action 种类非常多，或者具有连续取值的 Action 的环境。结合了深度学\n习之后，Policy Based 方法就变成了策略网络，Value Based 方法就变成了估值网络\n。</font></p>\n<h4 id=\"策略网络policy-network\"><span class=\"post-title-index\">.2.1. </span><a class=\"markdownIt-Anchor\" href=\"#策略网络policy-network\"></a> 策略网络(Policy Network)</h4>\n<p>直接看一个例子，学习的目标是，左右用力使得木棍不倒地\n，<a href=\"https://github.com/xyegithub/myBlog/blob/main/2021/12/03/First-Step-to-RL/policy_network.py\">Policy_Network.py</a>\n<a href=\"policy_network.py\">Policy_Network.py</a></p>\n<p>关键代码</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">score = tf.matmul(layer1,W2)</span><br><span class=\"line\">probability = tf.nn.sigmoid(score)<span class=\"comment\">#网络输出采取Action 1的概率。</span></span><br><span class=\"line\">input_y = tf.placeholder(tf.float32,[<span class=\"literal\">None</span>,<span class=\"number\">1</span>], \\\\</span><br><span class=\"line\">name=<span class=\"string\">\"input_y\"</span>)<span class=\"comment\"># 输入采取过的行为，这个行为是随机生成的。</span></span><br><span class=\"line\">advantages = tf.placeholder(tf.float32,name=<span class=\"string\">\"reward_signal\"</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输入获益</span></span><br><span class=\"line\">loglik = tf.log(input_y*(input_y - probability) + \\\\</span><br><span class=\"line\">(<span class=\"number\">1</span> - input_y)*(input_y + probability))</span><br><span class=\"line\"><span class=\"comment\"># 损失函数，如果行为是1，则增大</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#概率，如果行为是 0，则减小概率（相当于也是增加0的概率），也就是说这个损</span></span><br><span class=\"line\"><span class=\"comment\">#失函数无论当前行为是什么都会增大当前行为的概率。</span></span><br><span class=\"line\">loss = -tf.reduce_mean(loglik * advantages) <span class=\"comment\"># 这行代码很关键，</span></span><br><span class=\"line\"><span class=\"comment\">#相当于给损失函数成了一个权重advantages，得到最终的损失函数。</span></span><br><span class=\"line\"><span class=\"comment\">#advantages是当前试验的全部获益。如果全部获益大，将以更大的权重，增加</span></span><br><span class=\"line\"><span class=\"comment\">#当前行为的概率。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#所以，策略网络其实也是一个对抗学习的过程，增加所有采取过行为的概率，只是</span></span><br><span class=\"line\"><span class=\"comment\">#获益多的行为以更大的权重增加。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#一个试验： 由初始状态开始，随机采取一连串的行为</span></span><br><span class=\"line\"><span class=\"comment\">#（Policy_Network.py 中是根据当前模型输出的概率,来生成随机的行为，但</span></span><br><span class=\"line\"><span class=\"comment\">#是我感觉直接用0.5的概率随机生成一连串的0和1的行为也是可以的，下面将实</span></span><br><span class=\"line\"><span class=\"comment\">#验一下），直到任务结束。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 由于每个试验，都可以一直行为到任务结束，所以每个action，我们都可以得</span></span><br><span class=\"line\"><span class=\"comment\">#到它在该试验中的全部获益（当前获益 + 之后所有行为的获益）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 随机生成了n个试验，其中又各种各样的决策（随机探索），全部获益大的</span></span><br><span class=\"line\"><span class=\"comment\">#action，它的advantages也大，那么它的概率就增大的多，它被强化的厉害。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##试验生成的过程，实际上就是数据集构建的过程。策略网络的数据集是由环境</span></span><br><span class=\"line\"><span class=\"comment\">#和一系列随机的行为构成的。它提供了环境在各种行为下的反应（获益）。模型</span></span><br><span class=\"line\"><span class=\"comment\">#学习为环境带来高获益的行为的规律。</span></span><br></pre></td></tr></tbody></table></figure>\n<p>由上面的代码可知，从策略网络的角度看强化学习的话，强化学习的关键其实是对数据集的\n构建—如何构建数据集。</p>\n<p>在构建数据集的时候，随机探索肯定是必要的。随机探索的结果会得到一系列好的行为，也\n会得到一系列不好的行为。如何强化好的行为就是算法设计的时候需要注意的。</p>\n<p>上面的代码在探索阶段借用了当前的模型，即根据当前模型输出的概率随机生成行为，从而\n形成数据集。如果完全的随机（一直使用 0.5 的概率随机的生成 Action）会什么样呢？</p>\n<h5 id=\"数据集是否可以和模型无关不随着模型变化\"><span class=\"post-title-index\">.2.1.1. </span><a class=\"markdownIt-Anchor\" href=\"#数据集是否可以和模型无关不随着模型变化\"></a> 数据集是否可以和模型无关（不随着模型变化）？</h5>\n<p>关键修改代码</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">###基于当前模型，根据当前的状态x，生成Action 1的概率</span></span><br><span class=\"line\">tfprob = sess.run(probability,feed_dict={observations: x})</span><br><span class=\"line\"><span class=\"comment\">### 基于预测概率，随机生成行为，并试探环境。生成数据集。</span></span><br><span class=\"line\">action = <span class=\"number\">1</span> <span class=\"keyword\">if</span> np.random.uniform() &lt; tfprob <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br></pre></td></tr></tbody></table></figure>\n<p>修改后</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 注释掉这句，并不需要根据当前模型生成概率</span></span><br><span class=\"line\"><span class=\"comment\">### tfprob = sess.run(probability,feed_dict={observations: x})</span></span><br><span class=\"line\"><span class=\"comment\">### 直接设置概率为0.5，随机完全随机探索生成数据集。</span></span><br><span class=\"line\">tfprob = <span class=\"number\">0.5</span></span><br><span class=\"line\">action = <span class=\"number\">1</span> <span class=\"keyword\">if</span> np.random.uniform() &lt; tfprob <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br></pre></td></tr></tbody></table></figure>\n<p>结果：修改后，模型无法收敛。</p>\n<p>完全随机很小的概率能探索出很好的试验，这些好的行为也很难持续的得到强化。</p>\n<p>所以，强化学习也有一种效果叠加的感觉。在完全随机的情况下 ，探索出相对好的\naction，再在这个相对好的 action 的基础上，在探索探索出更好的 action。</p>\n<p>如果数据集不依赖模型，就是一直在完全随机的基础上探索。这样很难收敛。</p>\n<p>也可以这样看，完全随机的话，最多能学到前几步的策略（因为完全随机就走不了几步，探\n索的经验就只有那几步）。依赖于模型，探索的行为更有价值，因为是依赖于学到过的知识\n的，一方面确认了，按学到的知识走，确实获益多，一方面又在学到的知识的基础上，做了\n一些随机，探索更好的知识。</p>\n<h4 id=\"估值网络value-networkq-learning\"><span class=\"post-title-index\">.2.2. </span><a class=\"markdownIt-Anchor\" href=\"#估值网络value-networkq-learning\"></a> 估值网络(Value Network，Q-learning)</h4>\n<p>Q-Learing 用神经网络实现，得到的模型就是估值网络。</p>\n<p>也看一个例子\n，<a href=\"https://github.com/xyegithub/myBlog/blob/main/2021/12/03/First-Step-to-RL/policy_network.py\">Value_Network.py</a></p>\n<p>学习每个 Action 所对应的 reward 的期望。</p>\n<p>我们先看看数据集的结构</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">###Save the experience to our episode buffer.</span></span><br><span class=\"line\">episodeBuffer.add(np.reshape(np.array([s,a,r,s1,d]),[<span class=\"number\">1</span>,<span class=\"number\">5</span>]))</span><br><span class=\"line\"><span class=\"comment\">### 其中s是当前时刻的环境状态，a是当前随机采取的Action，r是这个Action的当前reward</span></span><br><span class=\"line\"><span class=\"comment\">### s1是采取Action之后的下一状态，d是布尔型表示是否任务结束。</span></span><br></pre></td></tr></tbody></table></figure>\n<ol>\n<li>\n<p>现在目标是学习 Q(s<sub>t</sub>, a<sub>t</sub>)，也就是当前环境状态，采取行为\na 的全部 reward 的期望。</p>\n</li>\n<li>\n<p>现在假设我们有模型 Q<sub>desird</sub>，可以预测全部 reward 了，那么这个模型\n应该满足条件，Q<sub>desired</sub>(s<sub>t</sub>, a<sub>t</sub>) = r +\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">λ</span></span></span></span> Max<sub>a</sub> Q<sub>desired</sub>(s<sub>t+1</sub>, a)，这有点递\n归的感觉了。</p>\n</li>\n<li>\n<p>现在我们能不能根据这个公式 ， 来优化出 Q<sub>desired</sub>。肯定是能的。对于\n探索过的所有试验，公式都满足的话，此时的模型就可以看成我们想要的模型了。我感\n觉这就是估值网络方法的核心。</p>\n</li>\n</ol>\n<p>直接看关键代码</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">###Choose an action by greedily (with e chance of random action)</span></span><br><span class=\"line\"><span class=\"comment\">### from the Q-network</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> np.random.rand(<span class=\"number\">1</span>) &lt; e <span class=\"keyword\">or</span> total_steps &lt; pre_train_steps:</span><br><span class=\"line\">a = np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">a = sess.run(mainQN.predict,feed_dict={mainQN.scalarInput:[s]})[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"comment\">### 这段代码其实是探索的代码，当最开始的时候是完全随机探索（total_steps &lt; pre_train_steps的时候）</span></span><br><span class=\"line\"><span class=\"comment\">### 当total_steps &gt;= pre_train_steps之后呢，就不是完全随机探索了。</span></span><br><span class=\"line\"><span class=\"comment\">### 有e的概率是随机探索的，（1-e）的概率是由训练好的模型决定之后的Action。</span></span><br><span class=\"line\"><span class=\"comment\">### 这里是估值网络和策略网络的不同，策略网络本身就具有随机性，所以不需要引入</span></span><br><span class=\"line\"><span class=\"comment\">### 额外的参数e和pre_train_steps来控制随机探索的强度。</span></span><br><span class=\"line\"><span class=\"comment\">### 策略网络在训练的过程中，本身就是由随机性大，到慢慢的收敛到好的Action</span></span><br><span class=\"line\"><span class=\"comment\">### 所以可以直接得到好的探索的训练样本。估值网络没有这样好的性质，它连</span></span><br><span class=\"line\"><span class=\"comment\">### 随机性都没有，就需要人为的制造，满足从完全随机探索，到在好的Action的</span></span><br><span class=\"line\"><span class=\"comment\">### 基础上具有一定的随机性进行探索。</span></span><br></pre></td></tr></tbody></table></figure>\n<p><strong>这是策略网络和估值网络的共通之处，其实这也最上面那个注释\"by greedily (with e\nchance of random action) from the Q-network\"的意思。</strong></p>\n<p><strong><font color=\"green\">“贪心”两个字完美的诠释了强化学习，无论是策略网络还是估值网络\n，在探索阶段，在生成数据集上的特点。</font></strong></p>\n<p>在策略网络那一节，我做的那个试验，和模型无关生成数据集。其实就是不贪心了，不贪心\n不行。</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> total_steps &gt; pre_train_steps:</span><br><span class=\"line\"><span class=\"keyword\">if</span> e &gt; endE:</span><br><span class=\"line\">e -= stepDrop</span><br><span class=\"line\"><span class=\"comment\">### 完全随机了之后，开始慢慢减小随机性。</span></span><br><span class=\"line\"><span class=\"comment\">### 模型约不可靠的时候，探索性和随机性越强。后来模型慢慢变得可靠就减弱随机性。</span></span><br><span class=\"line\"><span class=\"comment\">### 因为模型越来越可靠的时候，随机性大就会得到很多远远低于当前模型性能的试验</span></span><br><span class=\"line\"><span class=\"comment\">### 这些试验都是早就被pass了的，学不到什么东西，损坏模型的探索。</span></span><br><span class=\"line\"><span class=\"comment\">### endE=0.1 说明无论训练的多好，模型都保持了随机性，保持了探索性</span></span><br><span class=\"line\"><span class=\"comment\">###　人永远要有好奇心，永远要觉得自己的知识还可能不是最好的</span></span><br></pre></td></tr></tbody></table></figure>\n<p>下面的代码是将在数据集弄好的情况下，如何训练模型的。</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> total_steps % (update_freq) == <span class=\"number\">0</span>:</span><br><span class=\"line\">trainBatch = myBuffer.sample(batch_size) <span class=\"comment\">#Get a random batch of experiences.</span></span><br><span class=\"line\"><span class=\"comment\">#Below we perform the Double-DQN update to the target Q-values</span></span><br><span class=\"line\"><span class=\"comment\"># 主网络预测了下一刻需要采取的Action，trainBatch[:,3]是当前的下一刻的环境</span></span><br><span class=\"line\"><span class=\"comment\"># 回顾公式，Q(st, at) = r + $\\lambda$ Max Q(s_t+1, a)</span></span><br><span class=\"line\"><span class=\"comment\"># 这里主函数预测的Action就是t+1时刻（下一时刻）获益值最大的Action</span></span><br><span class=\"line\">Q1 = sess.run(mainQN.predict,feed_dict={mainQN.scalarInput:np.vstack(trainBatch[:,<span class=\"number\">3</span>])})</span><br><span class=\"line\"><span class=\"comment\"># target网络预测了下一时刻的reward</span></span><br><span class=\"line\">Q2 = sess.run(targetQN.Qout,feed_dict={targetQN.scalarInput:np.vstack(trainBatch[:,<span class=\"number\">3</span>])})</span><br><span class=\"line\">end_multiplier = -(trainBatch[:,<span class=\"number\">4</span>] - <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\"># 用主网络预测出的Action以及target网络预测出的所有行为的reward</span></span><br><span class=\"line\"><span class=\"comment\"># 选择了最大的reward,也就是公式中的 Max Q(s_t+1, a)</span></span><br><span class=\"line\">doubleQ = Q2[<span class=\"built_in\">range</span>(batch_size),Q1]</span><br><span class=\"line\"><span class=\"comment\"># 这里得到的就是公式Q(st, at) = r + $\\lambda$ Max Q(s_t+1, a)</span></span><br><span class=\"line\"><span class=\"comment\"># 的右边，当前reward加上乘以衰减系数之后的，下一步最大reward</span></span><br><span class=\"line\">targetQ = trainBatch[:,<span class=\"number\">2</span>] + (y*doubleQ * end_multiplier)</span><br><span class=\"line\"><span class=\"comment\">#Update the network with our target values.</span></span><br><span class=\"line\"><span class=\"comment\"># 公式右边得到了之后，在把真正的当前状态输入进去，得到左边</span></span><br><span class=\"line\"><span class=\"comment\"># 左边以右边作为标签进行学习。更新主网络的参数</span></span><br><span class=\"line\">_ = sess.run(mainQN.updateModel, \\</span><br><span class=\"line\">feed_dict={mainQN.scalarInput:np.vstack(trainBatch[:,<span class=\"number\">0</span>]),mainQN.targetQ:targetQ, mainQN.actions:trainBatch[:,<span class=\"number\">1</span>]})</span><br><span class=\"line\"><span class=\"comment\"># 更新target网络的参数。</span></span><br><span class=\"line\">updateTarget(targetOps,sess) <span class=\"comment\">#Update the target network toward the primary network.</span></span><br></pre></td></tr></tbody></table></figure>\n<p>target 网络参数的更新方式代码</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">updateTargetGraph</span>(<span class=\"params\">tfVars,tau</span>):</span></span><br><span class=\"line\">total_vars = <span class=\"built_in\">len</span>(tfVars)</span><br><span class=\"line\">op_holder = []</span><br><span class=\"line\"><span class=\"comment\"># 主网络是和target网络一样的，前一半参数正好是主网络的参数</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> idx,var <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(tfVars[<span class=\"number\">0</span>:total_vars//<span class=\"number\">2</span>]):</span><br><span class=\"line\"><span class=\"comment\"># idx+total_vars对应的时候后一半的参数也就是target网络的参数</span></span><br><span class=\"line\"><span class=\"comment\"># 这里相当于是target参数 = 主网络参数 * tau + （1- tau）*target参数</span></span><br><span class=\"line\"><span class=\"comment\"># 也就是说target网络在以一定的速度向主网络靠近</span></span><br><span class=\"line\"><span class=\"comment\"># 结合前面的代码，主网络才是真正学习的网络，target网络的作用仅仅是得到等式</span></span><br><span class=\"line\"><span class=\"comment\"># 右边的值，即标签，即使是等式右边，也不是target网络完全决定的</span></span><br><span class=\"line\"><span class=\"comment\"># target网络得到了所有Action的reward，最大的Action是主网络选择的</span></span><br><span class=\"line\"><span class=\"comment\"># 为什么要这么做，target网络也是在模仿主网络，只用主网络也能得到等式的右边</span></span><br><span class=\"line\"><span class=\"comment\"># 理论上其实右边也应该是主网络决定，现在搞了个主网络的模仿者target网络</span></span><br><span class=\"line\"><span class=\"comment\"># 是出于优化的考虑。我们后面叙述。</span></span><br><span class=\"line\">op_holder.append(tfVars[idx+total_vars//<span class=\"number\">2</span>].assign\\\\</span><br><span class=\"line\">((var.value()*tau) \\\\</span><br><span class=\"line\">                      + ((<span class=\"number\">1</span>-tau)*tfVars[idx+total_vars//<span class=\"number\">2</span>].value())))</span><br><span class=\"line\">                      <span class=\"keyword\">return</span> op_holder</span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">updateTarget</span>(<span class=\"params\">op_holder,sess</span>):</span></span><br><span class=\"line\">                      <span class=\"keyword\">for</span> op <span class=\"keyword\">in</span> op_holder:</span><br><span class=\"line\">                      sess.run(op)</span><br><span class=\"line\"></span><br><span class=\"line\">                      ```</span><br><span class=\"line\"></span><br><span class=\"line\">                      现在其实我们把关键的代码都看了，在这段代码实现中，引入了一些state of the art的trick，下面我们结合看过的代码在提一遍。</span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"number\">1.</span>  引入卷积层，这段代码比较简单，我们没有看。环境状态是用图片的形式给的，用CNN提取特征是比较自然的。</span><br><span class=\"line\">                      <span class=\"number\">2.</span>  Experience replay。估值网络不像策略网络一样得到试验之后，用一次就扔掉再去制作新的试验（数据集）来训练。它把每次试验都放在一个试验池里面。试验池长度为N，如果超过了N，那就把最老的试验样本扔掉。每次 训练的时候从试验池里面随机选择batchsize个样本进行训练，保持了对样本的利用率，同时其实也增加了模型的稳定性，因为数据集是相对稳定的（相比于N=<span class=\"number\">1</span>而言，每次训练了就扔掉，进来的都是新的，不那么稳定）。</span><br><span class=\"line\">                      <span class=\"number\">3.</span>  使用target网络来辅助训练。\\*\\*之所以要用target网络来制造训练目标，用主网络来实际训练，是为了让Q-Learing训练的目标保持平稳。\\*\\*强化学习不像普通的监督学习，它的目标是变化的，\\*\\*因为学习目标的一部分就是模型本身输出的。\\*\\*每次更新模型参数都会导致学习目标发生变化，如果更新频繁，幅度很大，我们的训练过程就会变得非常不稳定并且失控。\\*\\*DQN的训练会陷入目标Q与预测Q的反馈循环中，震荡发散。\\*\\*所以用target网络来制造目标，target网络和主网络又不是矛盾的，因为target网络会逼近主网络，它是主网络的模仿者，所以它提供的目标Q也是有权威的。</span><br><span class=\"line\">                      <span class=\"number\">4.</span>  Double DQN。这个trick源于target网络选的最大Action不准。模仿的不够好，现在就让主网络来帮它选。也就是上面代码中我们看过了主网络输出action，选择target网络输出的reward，得到公式的右边。</span><br><span class=\"line\">                      <span class=\"number\">5.</span>  Dueling DQN。上代码</span><br><span class=\"line\"></span><br><span class=\"line\">                      ```python</span><br><span class=\"line\">                      self.AW = tf.Variable(xavier_init([h_size//<span class=\"number\">2</span>,env.actions]))</span><br><span class=\"line\">                      self.VW = tf.Variable(xavier_init([h_size//<span class=\"number\">2</span>,<span class=\"number\">1</span>]))</span><br><span class=\"line\">                      self.Advantage = tf.matmul(self.streamA,self.AW)</span><br><span class=\"line\">                      self.Value = tf.matmul(self.streamV,self.VW)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###Then combine them together to get our final Q-values.</span></span><br><span class=\"line\"><span class=\"comment\">### 看这里Qout是网络最终预测的所有Action的reward。它由两部分组成Value和Advantage</span></span><br><span class=\"line\"><span class=\"comment\">### 由最上面两行可以看出Value是一维的，是实数，advantage是#action维度的向量</span></span><br><span class=\"line\"><span class=\"comment\">### 所以，Dueling DQN就是将reward裁成了两部分，一部分是环境状态本身具有的价值Value</span></span><br><span class=\"line\"><span class=\"comment\">### 另一部分就是Action本身具有的价值，相加起来就是在这个环境下Action具有的价值。</span></span><br><span class=\"line\"><span class=\"comment\">### 其实我感觉这些解释都是人为的，具体是不是这样谁也不知道，可能只是这样优化的好。</span></span><br><span class=\"line\"><span class=\"comment\">###　因为即使不分为两部分，网络输出Ｑout的时候，输入也是环境状态，肯定都会把环境考虑</span></span><br><span class=\"line\"><span class=\"comment\">### 进去才有Action的价值。然而直接输出这个价值，发现优化的不好，分为两部分之后，发现</span></span><br><span class=\"line\"><span class=\"comment\">### 优化的好了。其实谁也不知道其中到底是什么原因起作用。</span></span><br><span class=\"line\">self.Qout = self.Value + tf.subtract(self.Advantage,tf.reduce_mean(self.Advantage,axis=<span class=\"number\">1</span>,keep_dims=<span class=\"literal\">True</span>))</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"策略网络和估值网络的不同\"><span class=\"post-title-index\">.2.3. </span><a class=\"markdownIt-Anchor\" href=\"#策略网络和估值网络的不同\"></a> 策略网络和估值网络的不同</h4>\n<p>从策略网络和估值网络看，强化学习都有探索和对抗两个过程。通过探索，得到数据集，包\n含了各种可能性。通过对抗，让数据集中好的（reward 高的试验胜出）。他们的不同点在\n于对抗的方法。</p>\n<ol>\n<li>策略网络：对抗的焦点在于选择 Action 的概率。</li>\n<li>估值网络：对抗的焦点在于评估 Action 的 reward。</li>\n<li>两者都会影响数据集的制作，而且影响的方式是相同的：贪心和随机探索</li>\n<li>比起策略网络，估值网络更加没有对抗的感觉。因为策略网络在提高某一个 Action 的\n概率的时候，会抑制其他 Action 的概率（总的概率为 1）。而估值网络在提高某一个\nAction 的 reward 的时候，和其他 Action 是无关的。<strong>而且其实不能说是提高\nreward，它是预测出正确的 reward。</strong>（这是两者的很大的不同处，策略网络更像是\n一个分类问题，而估值网络像是一个回归问题）</li>\n</ol>\n<h3 id=\"回顾\"><span class=\"post-title-index\">.3. </span><a class=\"markdownIt-Anchor\" href=\"#回顾\"></a> 回顾</h3>\n<p>强化学习的本质是连续决策。强化学习算法的关键是标签制作，数据集制作。</p>\n<p>连续决策问题是没有确定的标签的，它通过探索试验得到数据集和标签，为没有提供标签的\n问题，做了标签，让问题可以解决。</p>\n<p>深度学习无法优化离散的不可导的参数，强化学习也可以通过在离散的地方做数据集做标签\n，把它转换为可导的，可用 sgd 优化的问题。</p>\n<p>做标签和数据集的关键是随机性以及贪心，贪心让它立足于以往的知识，随机让它不刚愎自\n用，保持谦卑，给新的可能保留空间。</p>\n<p>无论是策略网络还是估值网络，在数据集的制作上都是一样的，随机性和贪心。估值网络的\n数据集制作，可以看出强化学习探索的本质（由于估值网络本身没有随机性，它在制作数据\n集的时候，显示的暴露了，探索和贪心的本质。策略网络这方面还不太好看出来，因为它是\n隐式的利用探索和贪心）。</p>\n<p>策略网络，增大所有行为的概率，但是对于 reward 大 的行为增大的权重大。这个思路在\n我得感觉上更加符合强化两个字。强化好的行为嘛。</p>\n<p>估值网络的本质是公式 Q<sub>desired</sub>(s<sub>t</sub>, a<sub>t</sub>) = r +\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">λ</span></span></span></span> Max<sub>a</sub> Q<sub>desired</sub>(s<sub>t+1</sub>, a)，有点递归的感\n觉。</p>\n<p>策略网络和估值网络数据集也有一点不同，策略网络的数据集是纵向的，一串行为一起的。\n而估值网络的数据集是单个单个的。</p>\n<p>由下面代码可以看出，策略网络中，每一窜试验就会训练一次，只是网络参数更新会积累了\n好几次试验之后才更新。策略网络关心从开始到结束一系列行为。而估值网络只关心当前和\n下一状态。</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> done:</span><br><span class=\"line\">episode_number += <span class=\"number\">1</span></span><br><span class=\"line\">epx = np.vstack(xs)</span><br><span class=\"line\">epy = np.vstack(ys)</span><br><span class=\"line\">epr = np.vstack(drs)</span><br><span class=\"line\">tfp = tfps</span><br><span class=\"line\">xs,hs,dlogps,drs,ys,tfps = [],[],[],[],[],[]</span><br><span class=\"line\"></span><br><span class=\"line\">discounted_epr = discount_rewards(epr)</span><br><span class=\"line\">discounted_epr -= np.mean(discounted_epr)</span><br><span class=\"line\">discounted_epr //= np.std(discounted_epr)</span><br><span class=\"line\"></span><br><span class=\"line\">tGrad = sess.run(newGrads,feed_dict={observations: epx, input_y: epy, advantages: discounted_epr})</span><br><span class=\"line\"><span class=\"keyword\">for</span> ix,grad <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(tGrad):</span><br><span class=\"line\">gradBuffer[ix] += grad</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> episode_number % batch_size == <span class=\"number\">0</span>:</span><br><span class=\"line\">sess.run(updateGrads,feed_dict={W1Grad: gradBuffer[<span class=\"number\">0</span>],W1_1Grad:gradBuffer[<span class=\"number\">1</span>],W2Grad:gradBuffer[<span class=\"number\">2</span>]})</span><br></pre></td></tr></tbody></table></figure>\n<p>估值网络人为的控制随机强度，也是一个值得考虑的问题。</p>\n</body></html>","site":{"data":{}},"excerpt":"<html><head></head><body></body></html>","more":"<h3 id=\"什么是强化学习关于强化学习的几点疑问\"><a class=\"markdownIt-Anchor\" href=\"#什么是强化学习关于强化学习的几点疑问\"></a> 什么是强化学习，关于强化学习的几点疑问</h3>\n<p><font color=green size=3>强化学习三要素：环境状态，行动，奖励</font></p>\n<p><font color=green size=3>目标：尽量多的获得奖励</font></p>\n<p><font color=green size=3>本质：连续决策</font></p>\n<p>基本的强化学习模型包括：</p>\n<ul>\n<li>环境状态的集合 S</li>\n<li>动作的集合 A</li>\n<li>状态之间的转换规则（是环境的一部分）</li>\n<li>规定转换后“即时奖励”的规则（是环境的一部分）</li>\n<li>描述主体（智能体）能够观察到什么的规则（是环境的一部分）</li>\n<li>能够做出决策/动作的主体（智能体）</li>\n</ul>\n<h4 id=\"区别于深度学习强化学习的本质特点是什么\"><a class=\"markdownIt-Anchor\" href=\"#区别于深度学习强化学习的本质特点是什么\"></a> 区别于深度学习，强化学习的本质特点是什么？</h4>\n<p><strong>两个定义</strong></p>\n<p>1，强化学习是机器学习的一个重要分支，主要用来解决连续决策问题。</p>\n<p>2，强化学习又称 再励学习，评价学习或增强学习，是机器学习的范式和方法论之一，用于\n描述和解决智能体（agent）在于环境交互过程中通过学习策略以达成回报最大或实现特定\n目标的问题。</p>\n<p>强化学习的本质是<font color=deeppink> 描述和解决智能体（agent）在于环境交互过程\n中通过学习策略以达成回报最大或实现特定目标的问题。</font>它本质是这样一种场景，\n在这种场景中它为了达到某种目的，做出连续的决策。这样符合这种场景，那就是强化学习\n。</p>\n<p>强化学习和深度学习这两个名词的维度是不一样的。深度学习描述的是算法本身的特点，深\n度够不够，是不是连接主义的模型。深度学习可以用来做无监督，也可以用来做半监督，也\n可以用来做弱监督，甚至可以用来作为强化学习算法的一部分。深度学习这个名词，不管应\n用场景只管模型本身是不是满足深度学习的特点。</p>\n<p>而强化学习描述的是应用场景的特点，只要能提供智能体决策的算法，管它是什么模型，什\n么结构，那就是强化学习的算法。从这个角度上讲，我现在认为强化学习和监督学习，无监\n督学习，弱监督学习，是并列的，是对应用场景的描述。和深度学习不是同一维度的。</p>\n<p><font color=deeppink>强化学习的本质在于目标给定的形式，不像无监督学习那样完全没\n有学习目标，也不像监督学习那样有非常明确的目标（label），强化学习的目标一般是变\n化的，不明确的，甚至可能不存在绝对正确的目标。，强化学习的问题都可以抽象成，环境\n状态，行动和奖励。应该说只要能抽象为这三个要素，目标是获得最大奖励的模型，就是强\n化学习的模型。</font></p>\n<p>强化学习的最大的特点是“试错”，是尝试各种可能，而强化结果好的可能。（策略网络的特\n点，估值网络的特点是修正和预测获益）</p>\n<p>由于强化学习是一种决策学习，这个问题的特点就是离散型。但是离散并不就是强化学习（\n连续的决策才是，目标的模糊和不确定性是决策问题的特点）。深度学习本质是函数的拟合\n，所以连续可微是它的特点。并不能说连续可微的问题就是深度学习，离散的问题就是强化\n学习。</p>\n<h4 id=\"深度学习用梯度下降的算法实现模型的优化强化学习无法求导甚至连学习目标都是模糊的如何优化模型参数\"><a class=\"markdownIt-Anchor\" href=\"#深度学习用梯度下降的算法实现模型的优化强化学习无法求导甚至连学习目标都是模糊的如何优化模型参数\"></a> 深度学习用梯度下降的算法实现模型的优化，强化学习无法求导，甚至连学习目标都是模糊的如何优化模型参数？</h4>\n<p>这个问题要了解下一节，具体的强化学习方法。</p>\n<h4 id=\"强化学习与弱监督学习\"><a class=\"markdownIt-Anchor\" href=\"#强化学习与弱监督学习\"></a> 强化学习与弱监督学习？</h4>\n<p>弱监督是属于有监督学习，只是它学习的目标不是被给予的标签，而是比被给予标签更强的\n标签（强弱是指标签做含有的信息量），也就是说弱监督是根据少量信息的标签，推测出更\n多的信息。</p>\n<p>强化学习的本质是连续决策。连续决策的特点是目标的模糊和不确定性。</p>\n<p>所以，虽然弱监督和强化学习都没有给出最终准确的目标，但是他们任然很不同的</p>\n<h4 id=\"深度学习是死的没有智能的机器学习算法强化学习是活的有智能的机器学习算法\"><a class=\"markdownIt-Anchor\" href=\"#深度学习是死的没有智能的机器学习算法强化学习是活的有智能的机器学习算法\"></a> 深度学习是死的，没有智能的机器学习算法，强化学习是“活的”，有智能的机器学习算法</h4>\n<p>深度学习大部分我们用作有监督的学习算法。其实说深度学习是死的，不如说有监督学习是\n死的。</p>\n<p>有监督学习其实是完全的复刻标签里面含有的知识，它的本质就是一个函数拟合的问题，它\n无法摆脱对绝对的标签的依赖，无法超越标签。</p>\n<p>而强化学习，正由于它的目标是模糊和不确定的。使得算法在设计上必须具有随机性和探索\n性，它能够探索出人类从来没有到过的领域。就像在围棋上，下出人类完全无法理解的棋，\n人从来没有想过的一些下法。这就是强化学习算法探索出来的知识。所以我觉得它是活着的\n，拥有智能的算法。</p>\n<p><font color=green>从感性的层面，强化学习算法很接近人脑的行为：感知环境，探索环境\n，强化有益行为</font></p>\n<h4 id=\"关于深度学习强化学习连续可导性和离散不可导性的讨论\"><a class=\"markdownIt-Anchor\" href=\"#关于深度学习强化学习连续可导性和离散不可导性的讨论\"></a> 关于深度学习，强化学习，连续可导性和离散不可导性的讨论</h4>\n<ol>\n<li>\n<p>从函数的角度，深度学习和强化学习都需要学习一个函数映射。深度学习是从输入到\ntarget 的映射。强化学习是学从环境状态到 Action 的映射。这两个映射可以看成性\n质一样的，因为深度学习可以作为强化学习的智能体。所以从函数的角度，他们没有连\n续和离散的区别。（PS. 深度学习模型和强化学习的智能体都是连续可导的函数\n。target 和 Action 都可以是离散的或者连续的。）</p>\n</li>\n<li>\n<p>深度学习作为用梯度下降算法优化的模型，无法优化对 loss 不可导的参数。如在深度\n学习中，设计一个分支来决定模型是否应该包含某个模块，这个分支的参数是不可优化\n的。因为包含和不包含是离散的，对 loss 不可导。</p>\n</li>\n</ol>\n<p>不过假设，如果包含与不包含是连续的。也就是说，可以以 0.1 的权重包含。那么，这些\n参数是可以优化的。从这点来看，离散就是导致模型参数不可优化的原因。</p>\n<ol start=\"3\">\n<li>\n<p>强化学习在离散的情况下解决 2 中的问题。由此，我得到了一个概念，强化学习解决\n离散的问题。</p>\n</li>\n<li>\n<p>下面我们来分析一下这个场景。首先，决定一个模块该不该被使用，这个场景是一次\nAction 的场景，不是连续决策的场景。也就是说 Action 一次，我就能知道最终\nreward 多少了，只有单步的 reward。</p>\n</li>\n</ol>\n<p>限于这个单次决策的场景来看，如果 Action 相对于 reward 是连续可导的，那么深度学习\n就能解决这个问题。如果 Action 相对于 reward 是离散的，那么仅仅深度学习无法解决这\n个问题，要靠强化学习。</p>\n<p><font color=green>这里单次 Action 就知道 reward，实际上这个问题就退化为了有监督\n学习，因为这个单步的 reward 就可以看成我的标签了。所以深度学习解决这个问题是很自\n然的。</font></p>\n<ol start=\"5\">\n<li>多次决策的问题，无论是连续的还是离散的都只能用强化学习的方法。因为多次决策，\n这个问题就不可以退化为监督学习的问题了。它是一个真正的强化学习的问题。</li>\n</ol>\n<p>综上所诉，强化学习解决深度学习解决不了的离散问题，那只是在单次决策的时候，这个问\n题退化为了有监督学习。强化学习的方法，恰好可以提供离散变量的学习。</p>\n<p>强化学习方法解决深度学习中的离散问题，仅仅是强化学习附带的一个小福利。</p>\n<p><strong><font color=green>因为它能把经验转化为可导的目标，就拿策略网络来说，从梯度的角\n度，它只管增加当前随机 Action 的概率，而加入 advatage 之后，自动就优化除了想要的\n大 reward 的行为。</font></strong></p>\n<h4 id=\"深度学习优化和强化学习优化的感性理解\"><a class=\"markdownIt-Anchor\" href=\"#深度学习优化和强化学习优化的感性理解\"></a> 深度学习优化和强化学习优化的感性理解</h4>\n<p>前面说了深度学习优化可导的参数，强化学习可以优化不可导的参数。这里说一下对深度学\n习优化方法和强化学习优化方法的感性理解。</p>\n<p>还是说前面包不会包含某模块的例子，由于连续可导，对于每一个参数值，深度学习模型其\n实都同时参与了两种 Action（包含和不包含）。score = 0.1 包含，其实其中包含了含有\n的成分，也包含了不含有的成分。所以我们可以连续的变动 score，看看包含多好，还是不\n好含多好。这其实就是梯度下降算法的方式。得益于每一个参数，其实我都对包含和不包含\n的情况都有了解，我当然知道哪个更好，就往那边移动（优化）。</p>\n<p>然而，对于离散的情况，要么只能包含，要么只能不包含。当选择包含的时候，模型对不包\n含的情况完全是无知的。可能更好，也可能差。当不包含的时候，也是一样的。无论哪种情\n况，我都没有办法优化，两种情况是完全隔离开的，信息不沟通的，是离散的。所以梯度下\n降算法无法优化它。</p>\n<p>强化学习用随机探索的方法让两者信息又沟通起来。包含一下试一下，然后，不包含也试一\n下。尝试的结果是哪种 reward 多，就增大哪种的概率。</p>\n<p><strong><font color=green>所以，无论哪种优化方法，信息的沟通都是必要的。要对所有的\naction 都了解，才能知道选择哪种 action。 只是深度学习是连续的，它的每一种参数，\n都包含了所有 Action 的信息（reward），每一种 Action 都参与了，所以它能直接连续的\n梯度下降的优化，不需要随机探索了。而对于离散的，每种 action 只能知道自己的\nreward，对其他 Action 一无所知的时候，梯度的优化是不行的。必须要探索各种\nAction，还是要知道了每一种 Action 的情况(reward)之后，才能优化。这是方法论\n。</font></strong></p>\n<p>更进一步，离散的地方，相对于 reward 一定是不可导的，所以深度学习不行。而强化学习\n，更准确的说是策略网络，相当于给离散的地方加了标签，这样它就在离散的地方有监督了\n，它就可以根据增加的标签优化。而标签的设计就是根据探索的结果，增大 reward 大的\nAction，reward 大的 Action 就是它的标签，而且这个标签是动态的，是对抗得出的。</p>\n<p>强化学习方法算出的梯度是策略梯度。</p>\n<p><strong><font color=green>强化学习： 不知道选哪边了； 试试呗；按试出来 reward 大的\nAction 优化它。</font></strong></p>\n<p><strong><font color=green>强化学习：它离散，对于 reward 不可导；不直接用 reward 优化它\n，给它加个标签，把试出来 reward 大的 Action，作为标签去优化</font></strong></p>\n<p>在不可导的地方加标签。</p>\n<p><strong><font color=green>由此，强化学习算法的本质是制作标签，无论是连续决策，标签不确\n定的情况，还是它能解决离散问题的情况，它都是用制作标签的方法解决的。</font></strong></p>\n<h3 id=\"策略网络policy-network和估值网络value-network\"><a class=\"markdownIt-Anchor\" href=\"#策略网络policy-network和估值网络value-network\"></a> 策略网络(Policy Network)和估值网络(Value Network)</h3>\n<p>AlphaGo 使用了快速走子，策略网络，估值网络和蒙特卡洛搜索树等技术。</p>\n<p>强化学习算法的一个关键是<font color=green>随机性和探索性</font>，我们需要让算法\n通过试验样本自己学习什么才是某个环境状态下比较好的 Action，而不是像有监督学习一\n样，告诉模型什么是好的 Action，因为我们也不知道什么是好的 Action.</p>\n<p>深度强化学习模型的本质是神经网络，神经网络是工具，根据问题转化以及建模的不同，主\n要分为策略网络和估值网络。</p>\n<p>强化学习中最重要的两类方法<strong>Policy-based,Value-based</strong>。第一种直接预测在某个环境\n下应该采取的行动（直接输出改采取 Action 的概率）。第二种预测在某个环境下所有行动\n的期望价值，然后通过选择 q 值最高的行动执行策略。</p>\n<p>他们都能完成决策，但由于建模的不同，估值网络包含有更多的信息，它不仅能提供决策，\n还预测了决策带来的收益。</p>\n<p><font color=deeppink>策略网络是隐式的学习了某一 Action 所带来的全部获益（当前获\n益+后续获益），而估值网络直接显示的学习 Action 所带来的全部获益。</font>强化学习\n算法做出最佳抉择只需要知道哪个 Action 全部获益最大，策略网络就是这样做的，估值网\n络不仅学习了哪个 Action 全部获益最大，还把每个 Action 的全部获益给计算出来了。</p>\n<p><font color=green>相对来说，策略网络的性能会比估值网络好一些。</font></p>\n<p><font color=green>Value Based 方法适合仅有少量 Action 的环境，而 Policy Based 方\n法更通用，适合 Action 种类非常多，或者具有连续取值的 Action 的环境。结合了深度学\n习之后，Policy Based 方法就变成了策略网络，Value Based 方法就变成了估值网络\n。</font></p>\n<h4 id=\"策略网络policy-network\"><a class=\"markdownIt-Anchor\" href=\"#策略网络policy-network\"></a> 策略网络(Policy Network)</h4>\n<p>直接看一个例子，学习的目标是，左右用力使得木棍不倒地\n，<a href=\"https://github.com/xyegithub/myBlog/blob/main/2021/12/03/First-Step-to-RL/policy_network.py\">Policy_Network.py</a>\n<a href=\"policy_network.py\">Policy_Network.py</a></p>\n<p>关键代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">score = tf.matmul(layer1,W2)</span><br><span class=\"line\">probability = tf.nn.sigmoid(score)<span class=\"comment\">#网络输出采取Action 1的概率。</span></span><br><span class=\"line\">input_y = tf.placeholder(tf.float32,[<span class=\"literal\">None</span>,<span class=\"number\">1</span>], \\\\</span><br><span class=\"line\">name=<span class=\"string\">&quot;input_y&quot;</span>)<span class=\"comment\"># 输入采取过的行为，这个行为是随机生成的。</span></span><br><span class=\"line\">advantages = tf.placeholder(tf.float32,name=<span class=\"string\">&quot;reward_signal&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输入获益</span></span><br><span class=\"line\">loglik = tf.log(input_y*(input_y - probability) + \\\\</span><br><span class=\"line\">(<span class=\"number\">1</span> - input_y)*(input_y + probability))</span><br><span class=\"line\"><span class=\"comment\"># 损失函数，如果行为是1，则增大</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#概率，如果行为是 0，则减小概率（相当于也是增加0的概率），也就是说这个损</span></span><br><span class=\"line\"><span class=\"comment\">#失函数无论当前行为是什么都会增大当前行为的概率。</span></span><br><span class=\"line\">loss = -tf.reduce_mean(loglik * advantages) <span class=\"comment\"># 这行代码很关键，</span></span><br><span class=\"line\"><span class=\"comment\">#相当于给损失函数成了一个权重advantages，得到最终的损失函数。</span></span><br><span class=\"line\"><span class=\"comment\">#advantages是当前试验的全部获益。如果全部获益大，将以更大的权重，增加</span></span><br><span class=\"line\"><span class=\"comment\">#当前行为的概率。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#所以，策略网络其实也是一个对抗学习的过程，增加所有采取过行为的概率，只是</span></span><br><span class=\"line\"><span class=\"comment\">#获益多的行为以更大的权重增加。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#一个试验： 由初始状态开始，随机采取一连串的行为</span></span><br><span class=\"line\"><span class=\"comment\">#（Policy_Network.py 中是根据当前模型输出的概率,来生成随机的行为，但</span></span><br><span class=\"line\"><span class=\"comment\">#是我感觉直接用0.5的概率随机生成一连串的0和1的行为也是可以的，下面将实</span></span><br><span class=\"line\"><span class=\"comment\">#验一下），直到任务结束。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 由于每个试验，都可以一直行为到任务结束，所以每个action，我们都可以得</span></span><br><span class=\"line\"><span class=\"comment\">#到它在该试验中的全部获益（当前获益 + 之后所有行为的获益）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 随机生成了n个试验，其中又各种各样的决策（随机探索），全部获益大的</span></span><br><span class=\"line\"><span class=\"comment\">#action，它的advantages也大，那么它的概率就增大的多，它被强化的厉害。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##试验生成的过程，实际上就是数据集构建的过程。策略网络的数据集是由环境</span></span><br><span class=\"line\"><span class=\"comment\">#和一系列随机的行为构成的。它提供了环境在各种行为下的反应（获益）。模型</span></span><br><span class=\"line\"><span class=\"comment\">#学习为环境带来高获益的行为的规律。</span></span><br></pre></td></tr></table></figure>\n<p>由上面的代码可知，从策略网络的角度看强化学习的话，强化学习的关键其实是对数据集的\n构建—如何构建数据集。</p>\n<p>在构建数据集的时候，随机探索肯定是必要的。随机探索的结果会得到一系列好的行为，也\n会得到一系列不好的行为。如何强化好的行为就是算法设计的时候需要注意的。</p>\n<p>上面的代码在探索阶段借用了当前的模型，即根据当前模型输出的概率随机生成行为，从而\n形成数据集。如果完全的随机（一直使用 0.5 的概率随机的生成 Action）会什么样呢？</p>\n<h5 id=\"数据集是否可以和模型无关不随着模型变化\"><a class=\"markdownIt-Anchor\" href=\"#数据集是否可以和模型无关不随着模型变化\"></a> 数据集是否可以和模型无关（不随着模型变化）？</h5>\n<p>关键修改代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">###基于当前模型，根据当前的状态x，生成Action 1的概率</span></span><br><span class=\"line\">tfprob = sess.run(probability,feed_dict=&#123;observations: x&#125;)</span><br><span class=\"line\"><span class=\"comment\">### 基于预测概率，随机生成行为，并试探环境。生成数据集。</span></span><br><span class=\"line\">action = <span class=\"number\">1</span> <span class=\"keyword\">if</span> np.random.uniform() &lt; tfprob <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>修改后</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">### 注释掉这句，并不需要根据当前模型生成概率</span></span><br><span class=\"line\"><span class=\"comment\">### tfprob = sess.run(probability,feed_dict=&#123;observations: x&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">### 直接设置概率为0.5，随机完全随机探索生成数据集。</span></span><br><span class=\"line\">tfprob = <span class=\"number\">0.5</span></span><br><span class=\"line\">action = <span class=\"number\">1</span> <span class=\"keyword\">if</span> np.random.uniform() &lt; tfprob <span class=\"keyword\">else</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>结果：修改后，模型无法收敛。</p>\n<p>完全随机很小的概率能探索出很好的试验，这些好的行为也很难持续的得到强化。</p>\n<p>所以，强化学习也有一种效果叠加的感觉。在完全随机的情况下 ，探索出相对好的\naction，再在这个相对好的 action 的基础上，在探索探索出更好的 action。</p>\n<p>如果数据集不依赖模型，就是一直在完全随机的基础上探索。这样很难收敛。</p>\n<p>也可以这样看，完全随机的话，最多能学到前几步的策略（因为完全随机就走不了几步，探\n索的经验就只有那几步）。依赖于模型，探索的行为更有价值，因为是依赖于学到过的知识\n的，一方面确认了，按学到的知识走，确实获益多，一方面又在学到的知识的基础上，做了\n一些随机，探索更好的知识。</p>\n<h4 id=\"估值网络value-networkq-learning\"><a class=\"markdownIt-Anchor\" href=\"#估值网络value-networkq-learning\"></a> 估值网络(Value Network，Q-learning)</h4>\n<p>Q-Learing 用神经网络实现，得到的模型就是估值网络。</p>\n<p>也看一个例子\n，<a href=\"https://github.com/xyegithub/myBlog/blob/main/2021/12/03/First-Step-to-RL/policy_network.py\">Value_Network.py</a></p>\n<p>学习每个 Action 所对应的 reward 的期望。</p>\n<p>我们先看看数据集的结构</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">###Save the experience to our episode buffer.</span></span><br><span class=\"line\">episodeBuffer.add(np.reshape(np.array([s,a,r,s1,d]),[<span class=\"number\">1</span>,<span class=\"number\">5</span>]))</span><br><span class=\"line\"><span class=\"comment\">### 其中s是当前时刻的环境状态，a是当前随机采取的Action，r是这个Action的当前reward</span></span><br><span class=\"line\"><span class=\"comment\">### s1是采取Action之后的下一状态，d是布尔型表示是否任务结束。</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>\n<p>现在目标是学习 Q(s<sub>t</sub>, a<sub>t</sub>)，也就是当前环境状态，采取行为\na 的全部 reward 的期望。</p>\n</li>\n<li>\n<p>现在假设我们有模型 Q<sub>desird</sub>，可以预测全部 reward 了，那么这个模型\n应该满足条件，Q<sub>desired</sub>(s<sub>t</sub>, a<sub>t</sub>) = r +\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">λ</span></span></span></span> Max<sub>a</sub> Q<sub>desired</sub>(s<sub>t+1</sub>, a)，这有点递\n归的感觉了。</p>\n</li>\n<li>\n<p>现在我们能不能根据这个公式 ， 来优化出 Q<sub>desired</sub>。肯定是能的。对于\n探索过的所有试验，公式都满足的话，此时的模型就可以看成我们想要的模型了。我感\n觉这就是估值网络方法的核心。</p>\n</li>\n</ol>\n<p>直接看关键代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">###Choose an action by greedily (with e chance of random action)</span></span><br><span class=\"line\"><span class=\"comment\">### from the Q-network</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> np.random.rand(<span class=\"number\">1</span>) &lt; e <span class=\"keyword\">or</span> total_steps &lt; pre_train_steps:</span><br><span class=\"line\">a = np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">a = sess.run(mainQN.predict,feed_dict=&#123;mainQN.scalarInput:[s]&#125;)[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"comment\">### 这段代码其实是探索的代码，当最开始的时候是完全随机探索（total_steps &lt; pre_train_steps的时候）</span></span><br><span class=\"line\"><span class=\"comment\">### 当total_steps &gt;= pre_train_steps之后呢，就不是完全随机探索了。</span></span><br><span class=\"line\"><span class=\"comment\">### 有e的概率是随机探索的，（1-e）的概率是由训练好的模型决定之后的Action。</span></span><br><span class=\"line\"><span class=\"comment\">### 这里是估值网络和策略网络的不同，策略网络本身就具有随机性，所以不需要引入</span></span><br><span class=\"line\"><span class=\"comment\">### 额外的参数e和pre_train_steps来控制随机探索的强度。</span></span><br><span class=\"line\"><span class=\"comment\">### 策略网络在训练的过程中，本身就是由随机性大，到慢慢的收敛到好的Action</span></span><br><span class=\"line\"><span class=\"comment\">### 所以可以直接得到好的探索的训练样本。估值网络没有这样好的性质，它连</span></span><br><span class=\"line\"><span class=\"comment\">### 随机性都没有，就需要人为的制造，满足从完全随机探索，到在好的Action的</span></span><br><span class=\"line\"><span class=\"comment\">### 基础上具有一定的随机性进行探索。</span></span><br></pre></td></tr></table></figure>\n<p><strong>这是策略网络和估值网络的共通之处，其实这也最上面那个注释&quot;by greedily (with e\nchance of random action) from the Q-network&quot;的意思。</strong></p>\n<p><strong><font color=green>“贪心”两个字完美的诠释了强化学习，无论是策略网络还是估值网络\n，在探索阶段，在生成数据集上的特点。</font></strong></p>\n<p>在策略网络那一节，我做的那个试验，和模型无关生成数据集。其实就是不贪心了，不贪心\n不行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> total_steps &gt; pre_train_steps:</span><br><span class=\"line\"><span class=\"keyword\">if</span> e &gt; endE:</span><br><span class=\"line\">e -= stepDrop</span><br><span class=\"line\"><span class=\"comment\">### 完全随机了之后，开始慢慢减小随机性。</span></span><br><span class=\"line\"><span class=\"comment\">### 模型约不可靠的时候，探索性和随机性越强。后来模型慢慢变得可靠就减弱随机性。</span></span><br><span class=\"line\"><span class=\"comment\">### 因为模型越来越可靠的时候，随机性大就会得到很多远远低于当前模型性能的试验</span></span><br><span class=\"line\"><span class=\"comment\">### 这些试验都是早就被pass了的，学不到什么东西，损坏模型的探索。</span></span><br><span class=\"line\"><span class=\"comment\">### endE=0.1 说明无论训练的多好，模型都保持了随机性，保持了探索性</span></span><br><span class=\"line\"><span class=\"comment\">###　人永远要有好奇心，永远要觉得自己的知识还可能不是最好的</span></span><br></pre></td></tr></table></figure>\n<p>下面的代码是将在数据集弄好的情况下，如何训练模型的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> total_steps % (update_freq) == <span class=\"number\">0</span>:</span><br><span class=\"line\">trainBatch = myBuffer.sample(batch_size) <span class=\"comment\">#Get a random batch of experiences.</span></span><br><span class=\"line\"><span class=\"comment\">#Below we perform the Double-DQN update to the target Q-values</span></span><br><span class=\"line\"><span class=\"comment\"># 主网络预测了下一刻需要采取的Action，trainBatch[:,3]是当前的下一刻的环境</span></span><br><span class=\"line\"><span class=\"comment\"># 回顾公式，Q(st, at) = r + $\\lambda$ Max Q(s_t+1, a)</span></span><br><span class=\"line\"><span class=\"comment\"># 这里主函数预测的Action就是t+1时刻（下一时刻）获益值最大的Action</span></span><br><span class=\"line\">Q1 = sess.run(mainQN.predict,feed_dict=&#123;mainQN.scalarInput:np.vstack(trainBatch[:,<span class=\"number\">3</span>])&#125;)</span><br><span class=\"line\"><span class=\"comment\"># target网络预测了下一时刻的reward</span></span><br><span class=\"line\">Q2 = sess.run(targetQN.Qout,feed_dict=&#123;targetQN.scalarInput:np.vstack(trainBatch[:,<span class=\"number\">3</span>])&#125;)</span><br><span class=\"line\">end_multiplier = -(trainBatch[:,<span class=\"number\">4</span>] - <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\"># 用主网络预测出的Action以及target网络预测出的所有行为的reward</span></span><br><span class=\"line\"><span class=\"comment\"># 选择了最大的reward,也就是公式中的 Max Q(s_t+1, a)</span></span><br><span class=\"line\">doubleQ = Q2[<span class=\"built_in\">range</span>(batch_size),Q1]</span><br><span class=\"line\"><span class=\"comment\"># 这里得到的就是公式Q(st, at) = r + $\\lambda$ Max Q(s_t+1, a)</span></span><br><span class=\"line\"><span class=\"comment\"># 的右边，当前reward加上乘以衰减系数之后的，下一步最大reward</span></span><br><span class=\"line\">targetQ = trainBatch[:,<span class=\"number\">2</span>] + (y*doubleQ * end_multiplier)</span><br><span class=\"line\"><span class=\"comment\">#Update the network with our target values.</span></span><br><span class=\"line\"><span class=\"comment\"># 公式右边得到了之后，在把真正的当前状态输入进去，得到左边</span></span><br><span class=\"line\"><span class=\"comment\"># 左边以右边作为标签进行学习。更新主网络的参数</span></span><br><span class=\"line\">_ = sess.run(mainQN.updateModel, \\</span><br><span class=\"line\">feed_dict=&#123;mainQN.scalarInput:np.vstack(trainBatch[:,<span class=\"number\">0</span>]),mainQN.targetQ:targetQ, mainQN.actions:trainBatch[:,<span class=\"number\">1</span>]&#125;)</span><br><span class=\"line\"><span class=\"comment\"># 更新target网络的参数。</span></span><br><span class=\"line\">updateTarget(targetOps,sess) <span class=\"comment\">#Update the target network toward the primary network.</span></span><br></pre></td></tr></table></figure>\n<p>target 网络参数的更新方式代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">updateTargetGraph</span>(<span class=\"params\">tfVars,tau</span>):</span></span><br><span class=\"line\">total_vars = <span class=\"built_in\">len</span>(tfVars)</span><br><span class=\"line\">op_holder = []</span><br><span class=\"line\"><span class=\"comment\"># 主网络是和target网络一样的，前一半参数正好是主网络的参数</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> idx,var <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(tfVars[<span class=\"number\">0</span>:total_vars//<span class=\"number\">2</span>]):</span><br><span class=\"line\"><span class=\"comment\"># idx+total_vars对应的时候后一半的参数也就是target网络的参数</span></span><br><span class=\"line\"><span class=\"comment\"># 这里相当于是target参数 = 主网络参数 * tau + （1- tau）*target参数</span></span><br><span class=\"line\"><span class=\"comment\"># 也就是说target网络在以一定的速度向主网络靠近</span></span><br><span class=\"line\"><span class=\"comment\"># 结合前面的代码，主网络才是真正学习的网络，target网络的作用仅仅是得到等式</span></span><br><span class=\"line\"><span class=\"comment\"># 右边的值，即标签，即使是等式右边，也不是target网络完全决定的</span></span><br><span class=\"line\"><span class=\"comment\"># target网络得到了所有Action的reward，最大的Action是主网络选择的</span></span><br><span class=\"line\"><span class=\"comment\"># 为什么要这么做，target网络也是在模仿主网络，只用主网络也能得到等式的右边</span></span><br><span class=\"line\"><span class=\"comment\"># 理论上其实右边也应该是主网络决定，现在搞了个主网络的模仿者target网络</span></span><br><span class=\"line\"><span class=\"comment\"># 是出于优化的考虑。我们后面叙述。</span></span><br><span class=\"line\">op_holder.append(tfVars[idx+total_vars//<span class=\"number\">2</span>].assign\\\\</span><br><span class=\"line\">((var.value()*tau) \\\\</span><br><span class=\"line\">                      + ((<span class=\"number\">1</span>-tau)*tfVars[idx+total_vars//<span class=\"number\">2</span>].value())))</span><br><span class=\"line\">                      <span class=\"keyword\">return</span> op_holder</span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">updateTarget</span>(<span class=\"params\">op_holder,sess</span>):</span></span><br><span class=\"line\">                      <span class=\"keyword\">for</span> op <span class=\"keyword\">in</span> op_holder:</span><br><span class=\"line\">                      sess.run(op)</span><br><span class=\"line\"></span><br><span class=\"line\">                      ```</span><br><span class=\"line\"></span><br><span class=\"line\">                      现在其实我们把关键的代码都看了，在这段代码实现中，引入了一些state of the art的trick，下面我们结合看过的代码在提一遍。</span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"number\">1.</span>  引入卷积层，这段代码比较简单，我们没有看。环境状态是用图片的形式给的，用CNN提取特征是比较自然的。</span><br><span class=\"line\">                      <span class=\"number\">2.</span>  Experience replay。估值网络不像策略网络一样得到试验之后，用一次就扔掉再去制作新的试验（数据集）来训练。它把每次试验都放在一个试验池里面。试验池长度为N，如果超过了N，那就把最老的试验样本扔掉。每次 训练的时候从试验池里面随机选择batchsize个样本进行训练，保持了对样本的利用率，同时其实也增加了模型的稳定性，因为数据集是相对稳定的（相比于N=<span class=\"number\">1</span>而言，每次训练了就扔掉，进来的都是新的，不那么稳定）。</span><br><span class=\"line\">                      <span class=\"number\">3.</span>  使用target网络来辅助训练。\\*\\*之所以要用target网络来制造训练目标，用主网络来实际训练，是为了让Q-Learing训练的目标保持平稳。\\*\\*强化学习不像普通的监督学习，它的目标是变化的，\\*\\*因为学习目标的一部分就是模型本身输出的。\\*\\*每次更新模型参数都会导致学习目标发生变化，如果更新频繁，幅度很大，我们的训练过程就会变得非常不稳定并且失控。\\*\\*DQN的训练会陷入目标Q与预测Q的反馈循环中，震荡发散。\\*\\*所以用target网络来制造目标，target网络和主网络又不是矛盾的，因为target网络会逼近主网络，它是主网络的模仿者，所以它提供的目标Q也是有权威的。</span><br><span class=\"line\">                      <span class=\"number\">4.</span>  Double DQN。这个trick源于target网络选的最大Action不准。模仿的不够好，现在就让主网络来帮它选。也就是上面代码中我们看过了主网络输出action，选择target网络输出的reward，得到公式的右边。</span><br><span class=\"line\">                      <span class=\"number\">5.</span>  Dueling DQN。上代码</span><br><span class=\"line\"></span><br><span class=\"line\">                      ```python</span><br><span class=\"line\">                      self.AW = tf.Variable(xavier_init([h_size//<span class=\"number\">2</span>,env.actions]))</span><br><span class=\"line\">                      self.VW = tf.Variable(xavier_init([h_size//<span class=\"number\">2</span>,<span class=\"number\">1</span>]))</span><br><span class=\"line\">                      self.Advantage = tf.matmul(self.streamA,self.AW)</span><br><span class=\"line\">                      self.Value = tf.matmul(self.streamV,self.VW)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###Then combine them together to get our final Q-values.</span></span><br><span class=\"line\"><span class=\"comment\">### 看这里Qout是网络最终预测的所有Action的reward。它由两部分组成Value和Advantage</span></span><br><span class=\"line\"><span class=\"comment\">### 由最上面两行可以看出Value是一维的，是实数，advantage是#action维度的向量</span></span><br><span class=\"line\"><span class=\"comment\">### 所以，Dueling DQN就是将reward裁成了两部分，一部分是环境状态本身具有的价值Value</span></span><br><span class=\"line\"><span class=\"comment\">### 另一部分就是Action本身具有的价值，相加起来就是在这个环境下Action具有的价值。</span></span><br><span class=\"line\"><span class=\"comment\">### 其实我感觉这些解释都是人为的，具体是不是这样谁也不知道，可能只是这样优化的好。</span></span><br><span class=\"line\"><span class=\"comment\">###　因为即使不分为两部分，网络输出Ｑout的时候，输入也是环境状态，肯定都会把环境考虑</span></span><br><span class=\"line\"><span class=\"comment\">### 进去才有Action的价值。然而直接输出这个价值，发现优化的不好，分为两部分之后，发现</span></span><br><span class=\"line\"><span class=\"comment\">### 优化的好了。其实谁也不知道其中到底是什么原因起作用。</span></span><br><span class=\"line\">self.Qout = self.Value + tf.subtract(self.Advantage,tf.reduce_mean(self.Advantage,axis=<span class=\"number\">1</span>,keep_dims=<span class=\"literal\">True</span>))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"策略网络和估值网络的不同\"><a class=\"markdownIt-Anchor\" href=\"#策略网络和估值网络的不同\"></a> 策略网络和估值网络的不同</h4>\n<p>从策略网络和估值网络看，强化学习都有探索和对抗两个过程。通过探索，得到数据集，包\n含了各种可能性。通过对抗，让数据集中好的（reward 高的试验胜出）。他们的不同点在\n于对抗的方法。</p>\n<ol>\n<li>策略网络：对抗的焦点在于选择 Action 的概率。</li>\n<li>估值网络：对抗的焦点在于评估 Action 的 reward。</li>\n<li>两者都会影响数据集的制作，而且影响的方式是相同的：贪心和随机探索</li>\n<li>比起策略网络，估值网络更加没有对抗的感觉。因为策略网络在提高某一个 Action 的\n概率的时候，会抑制其他 Action 的概率（总的概率为 1）。而估值网络在提高某一个\nAction 的 reward 的时候，和其他 Action 是无关的。<strong>而且其实不能说是提高\nreward，它是预测出正确的 reward。</strong>（这是两者的很大的不同处，策略网络更像是\n一个分类问题，而估值网络像是一个回归问题）</li>\n</ol>\n<h3 id=\"回顾\"><a class=\"markdownIt-Anchor\" href=\"#回顾\"></a> 回顾</h3>\n<p>强化学习的本质是连续决策。强化学习算法的关键是标签制作，数据集制作。</p>\n<p>连续决策问题是没有确定的标签的，它通过探索试验得到数据集和标签，为没有提供标签的\n问题，做了标签，让问题可以解决。</p>\n<p>深度学习无法优化离散的不可导的参数，强化学习也可以通过在离散的地方做数据集做标签\n，把它转换为可导的，可用 sgd 优化的问题。</p>\n<p>做标签和数据集的关键是随机性以及贪心，贪心让它立足于以往的知识，随机让它不刚愎自\n用，保持谦卑，给新的可能保留空间。</p>\n<p>无论是策略网络还是估值网络，在数据集的制作上都是一样的，随机性和贪心。估值网络的\n数据集制作，可以看出强化学习探索的本质（由于估值网络本身没有随机性，它在制作数据\n集的时候，显示的暴露了，探索和贪心的本质。策略网络这方面还不太好看出来，因为它是\n隐式的利用探索和贪心）。</p>\n<p>策略网络，增大所有行为的概率，但是对于 reward 大 的行为增大的权重大。这个思路在\n我得感觉上更加符合强化两个字。强化好的行为嘛。</p>\n<p>估值网络的本质是公式 Q<sub>desired</sub>(s<sub>t</sub>, a<sub>t</sub>) = r +\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">λ</span></span></span></span> Max<sub>a</sub> Q<sub>desired</sub>(s<sub>t+1</sub>, a)，有点递归的感\n觉。</p>\n<p>策略网络和估值网络数据集也有一点不同，策略网络的数据集是纵向的，一串行为一起的。\n而估值网络的数据集是单个单个的。</p>\n<p>由下面代码可以看出，策略网络中，每一窜试验就会训练一次，只是网络参数更新会积累了\n好几次试验之后才更新。策略网络关心从开始到结束一系列行为。而估值网络只关心当前和\n下一状态。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> done:</span><br><span class=\"line\">episode_number += <span class=\"number\">1</span></span><br><span class=\"line\">epx = np.vstack(xs)</span><br><span class=\"line\">epy = np.vstack(ys)</span><br><span class=\"line\">epr = np.vstack(drs)</span><br><span class=\"line\">tfp = tfps</span><br><span class=\"line\">xs,hs,dlogps,drs,ys,tfps = [],[],[],[],[],[]</span><br><span class=\"line\"></span><br><span class=\"line\">discounted_epr = discount_rewards(epr)</span><br><span class=\"line\">discounted_epr -= np.mean(discounted_epr)</span><br><span class=\"line\">discounted_epr //= np.std(discounted_epr)</span><br><span class=\"line\"></span><br><span class=\"line\">tGrad = sess.run(newGrads,feed_dict=&#123;observations: epx, input_y: epy, advantages: discounted_epr&#125;)</span><br><span class=\"line\"><span class=\"keyword\">for</span> ix,grad <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(tGrad):</span><br><span class=\"line\">gradBuffer[ix] += grad</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> episode_number % batch_size == <span class=\"number\">0</span>:</span><br><span class=\"line\">sess.run(updateGrads,feed_dict=&#123;W1Grad: gradBuffer[<span class=\"number\">0</span>],W1_1Grad:gradBuffer[<span class=\"number\">1</span>],W2Grad:gradBuffer[<span class=\"number\">2</span>]&#125;)</span><br></pre></td></tr></table></figure>\n<p>估值网络人为的控制随机强度，也是一个值得考虑的问题。</p>\n"},{"title":"Foundation for Topological Data Analysis","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-12-30T01:07:39.000Z","password":null,"summary":null,"description":"An introduction to topological data analysis.","_content":"\n# 持续同调\n\n## 同调群的目的是通过研究空洞和链的关系来刻画拓扑结构。本质上是要根据空洞的情况对链进行分类。为什么是定义为闭链群和边缘群的商群就能刻画拓扑，刻画空洞的情况。\n\n要建立起研究拓扑结构的数学模型，这里从直观概念出发，总结了与空洞和链相关的 3 个\n基本事实。根据这 3 个基本事实，我们可以更深刻的理解同调理论中的各种概念，比如闭\n链，边缘算子，同调等，为什么这样定义。\n\n1. 任意一个 q 维单纯形是“实心的”，没有空洞的。所以所有 q 维丹村行的边缘链，以及\n   边缘链的线性组合，都是同调的（等价的），因为都没有空洞。\n2. 如果拓扑结构中有一个 q 维空洞，那么它一定是一个空心的 q 维单纯形, i.e., 复形\n   中不含该 q 维单纯形，但含有该单纯形的所有 q-1 维边缘。\n3. 如果某一个链，它是一个实心或空洞的单纯形边缘，或其线性组合，那么它是闭链，否\n   则它不是闭链。\n\n由 2 和 3 可知，一定要研究闭链，而且只需要研究闭链，因为所有空洞都有围绕它的闭链\n，研究闭链不会落下任何一种空洞。但是闭链里面不一定都是空洞，有一部分闭链是实心的\n（边缘链）。所以同调群定义为闭链和边缘链的商群是很合适的。\n\n## 边缘算子的定义\n\n为什么这么定义边缘算子。猜测：只要这个定义和上面的三个假设是融洽的，就能研究拓扑\n结构中的空洞，具体怎么样定义边缘算子是无所谓的。\n\n## 上面这套解释，解释了闭链中有一个空洞的情况，但是有的闭链里面有多个空洞，这个包含同样空洞的链，如何同调\n\n再说明一个事实\n\n4. 包含同样空洞的任意两条闭链的差一定是边缘链。（好像前面 3 个事实可以推出 4）\n\n现有的同调里面里面的定义都是满足这 4 个事实的，应该能对链进行分类，分类的依据是\n它们包含空洞的不同。\n\n## 对闭链的直观理解\n\n闭链被定义为在边缘算子下结果为 0 的链。但从思维的角度来说，与其说闭链依赖边缘算\n子，不如说是边缘算子是为了满足闭链的性质 3，而设计的。\n\n知道闭链的定义，但它具体表现上是什么样的，给定一个链如何直观的看出它是不是闭链。\n\n根据 3 可知任意一个 q 维闭链一定是 q+1 维的空心或者实心单纯形的边缘，或其线性组\n合。\n\n给定一个 q 维闭链，它一定，而且只能把 q+1 维空间分割成不相交的若干区域。它是在\nq+1 维空间中封闭的，里面的点和外面的点无法连通。\n\n一个 q 维的链，只能围城 q+1 维的空洞。所以三棱锥的棱并没有围城三棱锥中间的空洞（\n空洞是三维的，一维的棱不能围城三维的空洞，不能封闭），三棱锥的面可以围城这个三维\n的空洞。\n","source":"_posts/Foundation-for-Topological-Data-Analysis.md","raw":"---\ntitle: Foundation for Topological Data Analysis\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-12-30 09:07:39\npassword:\nsummary:\ndescription: An introduction to topological data analysis.\ncategories:\n  - Machine Learning\n  - Topological Data Analysis\ntags:\n  - Topological Data Analysis\n---\n\n# 持续同调\n\n## 同调群的目的是通过研究空洞和链的关系来刻画拓扑结构。本质上是要根据空洞的情况对链进行分类。为什么是定义为闭链群和边缘群的商群就能刻画拓扑，刻画空洞的情况。\n\n要建立起研究拓扑结构的数学模型，这里从直观概念出发，总结了与空洞和链相关的 3 个\n基本事实。根据这 3 个基本事实，我们可以更深刻的理解同调理论中的各种概念，比如闭\n链，边缘算子，同调等，为什么这样定义。\n\n1. 任意一个 q 维单纯形是“实心的”，没有空洞的。所以所有 q 维丹村行的边缘链，以及\n   边缘链的线性组合，都是同调的（等价的），因为都没有空洞。\n2. 如果拓扑结构中有一个 q 维空洞，那么它一定是一个空心的 q 维单纯形, i.e., 复形\n   中不含该 q 维单纯形，但含有该单纯形的所有 q-1 维边缘。\n3. 如果某一个链，它是一个实心或空洞的单纯形边缘，或其线性组合，那么它是闭链，否\n   则它不是闭链。\n\n由 2 和 3 可知，一定要研究闭链，而且只需要研究闭链，因为所有空洞都有围绕它的闭链\n，研究闭链不会落下任何一种空洞。但是闭链里面不一定都是空洞，有一部分闭链是实心的\n（边缘链）。所以同调群定义为闭链和边缘链的商群是很合适的。\n\n## 边缘算子的定义\n\n为什么这么定义边缘算子。猜测：只要这个定义和上面的三个假设是融洽的，就能研究拓扑\n结构中的空洞，具体怎么样定义边缘算子是无所谓的。\n\n## 上面这套解释，解释了闭链中有一个空洞的情况，但是有的闭链里面有多个空洞，这个包含同样空洞的链，如何同调\n\n再说明一个事实\n\n4. 包含同样空洞的任意两条闭链的差一定是边缘链。（好像前面 3 个事实可以推出 4）\n\n现有的同调里面里面的定义都是满足这 4 个事实的，应该能对链进行分类，分类的依据是\n它们包含空洞的不同。\n\n## 对闭链的直观理解\n\n闭链被定义为在边缘算子下结果为 0 的链。但从思维的角度来说，与其说闭链依赖边缘算\n子，不如说是边缘算子是为了满足闭链的性质 3，而设计的。\n\n知道闭链的定义，但它具体表现上是什么样的，给定一个链如何直观的看出它是不是闭链。\n\n根据 3 可知任意一个 q 维闭链一定是 q+1 维的空心或者实心单纯形的边缘，或其线性组\n合。\n\n给定一个 q 维闭链，它一定，而且只能把 q+1 维空间分割成不相交的若干区域。它是在\nq+1 维空间中封闭的，里面的点和外面的点无法连通。\n\n一个 q 维的链，只能围城 q+1 维的空洞。所以三棱锥的棱并没有围城三棱锥中间的空洞（\n空洞是三维的，一维的棱不能围城三维的空洞，不能封闭），三棱锥的面可以围城这个三维\n的空洞。\n","slug":"Foundation-for-Topological-Data-Analysis","published":1,"updated":"2022-04-12T07:44:17.572Z","_id":"cl0thb1hz000dgqul776ya2z1","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><h1 id=\"持续同调\"><span class=\"post-title-index\">1. </span><a class=\"markdownIt-Anchor\" href=\"#持续同调\"></a> 持续同调</h1>\n<h2 id=\"同调群的目的是通过研究空洞和链的关系来刻画拓扑结构-本质上是要根据空洞的情况对链进行分类-为什么是定义为闭链群和边缘群的商群就能刻画拓扑刻画空洞的情况\"><span class=\"post-title-index\">1.1. </span><a class=\"markdownIt-Anchor\" href=\"#同调群的目的是通过研究空洞和链的关系来刻画拓扑结构-本质上是要根据空洞的情况对链进行分类-为什么是定义为闭链群和边缘群的商群就能刻画拓扑刻画空洞的情况\"></a> 同调群的目的是通过研究空洞和链的关系来刻画拓扑结构。本质上是要根据空洞的情况对链进行分类。为什么是定义为闭链群和边缘群的商群就能刻画拓扑，刻画空洞的情况。</h2>\n<p>要建立起研究拓扑结构的数学模型，这里从直观概念出发，总结了与空洞和链相关的 3 个\n基本事实。根据这 3 个基本事实，我们可以更深刻的理解同调理论中的各种概念，比如闭\n链，边缘算子，同调等，为什么这样定义。</p>\n<ol>\n<li>任意一个 q 维单纯形是“实心的”，没有空洞的。所以所有 q 维丹村行的边缘链，以及\n边缘链的线性组合，都是同调的（等价的），因为都没有空洞。</li>\n<li>如果拓扑结构中有一个 q 维空洞，那么它一定是一个空心的 q 维单纯形, i.e., 复形\n中不含该 q 维单纯形，但含有该单纯形的所有 q-1 维边缘。</li>\n<li>如果某一个链，它是一个实心或空洞的单纯形边缘，或其线性组合，那么它是闭链，否\n则它不是闭链。</li>\n</ol>\n<p>由 2 和 3 可知，一定要研究闭链，而且只需要研究闭链，因为所有空洞都有围绕它的闭链\n，研究闭链不会落下任何一种空洞。但是闭链里面不一定都是空洞，有一部分闭链是实心的\n（边缘链）。所以同调群定义为闭链和边缘链的商群是很合适的。</p>\n<h2 id=\"边缘算子的定义\"><span class=\"post-title-index\">1.2. </span><a class=\"markdownIt-Anchor\" href=\"#边缘算子的定义\"></a> 边缘算子的定义</h2>\n<p>为什么这么定义边缘算子。猜测：只要这个定义和上面的三个假设是融洽的，就能研究拓扑\n结构中的空洞，具体怎么样定义边缘算子是无所谓的。</p>\n<h2 id=\"上面这套解释解释了闭链中有一个空洞的情况但是有的闭链里面有多个空洞这个包含同样空洞的链如何同调\"><span class=\"post-title-index\">1.3. </span><a class=\"markdownIt-Anchor\" href=\"#上面这套解释解释了闭链中有一个空洞的情况但是有的闭链里面有多个空洞这个包含同样空洞的链如何同调\"></a> 上面这套解释，解释了闭链中有一个空洞的情况，但是有的闭链里面有多个空洞，这个包含同样空洞的链，如何同调</h2>\n<p>再说明一个事实</p>\n<ol start=\"4\">\n<li>包含同样空洞的任意两条闭链的差一定是边缘链。（好像前面 3 个事实可以推出 4）</li>\n</ol>\n<p>现有的同调里面里面的定义都是满足这 4 个事实的，应该能对链进行分类，分类的依据是\n它们包含空洞的不同。</p>\n<h2 id=\"对闭链的直观理解\"><span class=\"post-title-index\">1.4. </span><a class=\"markdownIt-Anchor\" href=\"#对闭链的直观理解\"></a> 对闭链的直观理解</h2>\n<p>闭链被定义为在边缘算子下结果为 0 的链。但从思维的角度来说，与其说闭链依赖边缘算\n子，不如说是边缘算子是为了满足闭链的性质 3，而设计的。</p>\n<p>知道闭链的定义，但它具体表现上是什么样的，给定一个链如何直观的看出它是不是闭链。</p>\n<p>根据 3 可知任意一个 q 维闭链一定是 q+1 维的空心或者实心单纯形的边缘，或其线性组\n合。</p>\n<p>给定一个 q 维闭链，它一定，而且只能把 q+1 维空间分割成不相交的若干区域。它是在\nq+1 维空间中封闭的，里面的点和外面的点无法连通。</p>\n<p>一个 q 维的链，只能围城 q+1 维的空洞。所以三棱锥的棱并没有围城三棱锥中间的空洞（\n空洞是三维的，一维的棱不能围城三维的空洞，不能封闭），三棱锥的面可以围城这个三维\n的空洞。</p>\n</body></html>","site":{"data":{}},"excerpt":"<html><head></head><body></body></html>","more":"<h1 id=\"持续同调\"><a class=\"markdownIt-Anchor\" href=\"#持续同调\"></a> 持续同调</h1>\n<h2 id=\"同调群的目的是通过研究空洞和链的关系来刻画拓扑结构-本质上是要根据空洞的情况对链进行分类-为什么是定义为闭链群和边缘群的商群就能刻画拓扑刻画空洞的情况\"><a class=\"markdownIt-Anchor\" href=\"#同调群的目的是通过研究空洞和链的关系来刻画拓扑结构-本质上是要根据空洞的情况对链进行分类-为什么是定义为闭链群和边缘群的商群就能刻画拓扑刻画空洞的情况\"></a> 同调群的目的是通过研究空洞和链的关系来刻画拓扑结构。本质上是要根据空洞的情况对链进行分类。为什么是定义为闭链群和边缘群的商群就能刻画拓扑，刻画空洞的情况。</h2>\n<p>要建立起研究拓扑结构的数学模型，这里从直观概念出发，总结了与空洞和链相关的 3 个\n基本事实。根据这 3 个基本事实，我们可以更深刻的理解同调理论中的各种概念，比如闭\n链，边缘算子，同调等，为什么这样定义。</p>\n<ol>\n<li>任意一个 q 维单纯形是“实心的”，没有空洞的。所以所有 q 维丹村行的边缘链，以及\n边缘链的线性组合，都是同调的（等价的），因为都没有空洞。</li>\n<li>如果拓扑结构中有一个 q 维空洞，那么它一定是一个空心的 q 维单纯形, i.e., 复形\n中不含该 q 维单纯形，但含有该单纯形的所有 q-1 维边缘。</li>\n<li>如果某一个链，它是一个实心或空洞的单纯形边缘，或其线性组合，那么它是闭链，否\n则它不是闭链。</li>\n</ol>\n<p>由 2 和 3 可知，一定要研究闭链，而且只需要研究闭链，因为所有空洞都有围绕它的闭链\n，研究闭链不会落下任何一种空洞。但是闭链里面不一定都是空洞，有一部分闭链是实心的\n（边缘链）。所以同调群定义为闭链和边缘链的商群是很合适的。</p>\n<h2 id=\"边缘算子的定义\"><a class=\"markdownIt-Anchor\" href=\"#边缘算子的定义\"></a> 边缘算子的定义</h2>\n<p>为什么这么定义边缘算子。猜测：只要这个定义和上面的三个假设是融洽的，就能研究拓扑\n结构中的空洞，具体怎么样定义边缘算子是无所谓的。</p>\n<h2 id=\"上面这套解释解释了闭链中有一个空洞的情况但是有的闭链里面有多个空洞这个包含同样空洞的链如何同调\"><a class=\"markdownIt-Anchor\" href=\"#上面这套解释解释了闭链中有一个空洞的情况但是有的闭链里面有多个空洞这个包含同样空洞的链如何同调\"></a> 上面这套解释，解释了闭链中有一个空洞的情况，但是有的闭链里面有多个空洞，这个包含同样空洞的链，如何同调</h2>\n<p>再说明一个事实</p>\n<ol start=\"4\">\n<li>包含同样空洞的任意两条闭链的差一定是边缘链。（好像前面 3 个事实可以推出 4）</li>\n</ol>\n<p>现有的同调里面里面的定义都是满足这 4 个事实的，应该能对链进行分类，分类的依据是\n它们包含空洞的不同。</p>\n<h2 id=\"对闭链的直观理解\"><a class=\"markdownIt-Anchor\" href=\"#对闭链的直观理解\"></a> 对闭链的直观理解</h2>\n<p>闭链被定义为在边缘算子下结果为 0 的链。但从思维的角度来说，与其说闭链依赖边缘算\n子，不如说是边缘算子是为了满足闭链的性质 3，而设计的。</p>\n<p>知道闭链的定义，但它具体表现上是什么样的，给定一个链如何直观的看出它是不是闭链。</p>\n<p>根据 3 可知任意一个 q 维闭链一定是 q+1 维的空心或者实心单纯形的边缘，或其线性组\n合。</p>\n<p>给定一个 q 维闭链，它一定，而且只能把 q+1 维空间分割成不相交的若干区域。它是在\nq+1 维空间中封闭的，里面的点和外面的点无法连通。</p>\n<p>一个 q 维的链，只能围城 q+1 维的空洞。所以三棱锥的棱并没有围城三棱锥中间的空洞（\n空洞是三维的，一维的棱不能围城三维的空洞，不能封闭），三棱锥的面可以围城这个三维\n的空洞。</p>\n"},{"title":"How to Balance Losses in Multi Task Training","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-01-10T06:34:19.000Z","password":null,"summary":null,"description":"在多任务模型中，如何平衡多个 loss 函数。","_content":"\n# 论文中有的方法\n\nTask Learning Using Uncertainty to Weigh Losses for Scene Geometry and Semantics\n\nMulti-Task Learning as Multi-Objective Optimization\n\nMulti-Task Learning Using Uncertainty to Weigh Losses for Scene Geometry and\nSemantics\n\nBounding Box Regression with Uncertainty for Accurate Object Detection\n\n这些论文主要是一种不确定性的方法，从预测不确定性的角度引入 Bayesian 框架，根据各\n个 loss 分量当前的大小自动设定其权重。\n\n# 利用 Focal loss\n\nDynamic Task Prioritization for Multitask Learning\n\n这里主要想讲的是利用 focal loss 的方法，比较简单。\n\n每个 task 都有一个 loss 函数和 KPI (key performance indicator)。KPI 其实就是任务\n的准确率，kpi 越高说明这个任务完成得越好。\n\n对于每个进来的 batch，每个$Task_i$ 有个 $loss_i$。每个 Task i 还有个不同的\n$KPI: k_i$。那根据 Focal loss 的定义\n，$FL(k_i, \\gamma_i) = -(1 - k_i)^{\\gamma_i} * \\log(k_i)$。一般来说我们 $\\gamma$\n取 2。\n\n最后 $loss = \\sum(FL(k_i, \\gamma_i) * loss_i)$，loss 前面乘以得这个系数 FL，就是\n一个自适应的权重，当任务完成得很好的时候，权重就比较小，不怎么优化这个 loss 了，\n当任务完成得不好的时候，权重就会比较大。\n","source":"_posts/How-to-Blance-Losses-in-Multi-Task-Training.md","raw":"---\ntitle: How to Balance Losses in Multi Task Training\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-01-10 14:34:19\npassword:\nsummary:\ndescription: 在多任务模型中，如何平衡多个 loss 函数。\ncategories:\n  - Machine Learning\n  - Optimization\ntags:\n  - Multi Task Training\n---\n\n# 论文中有的方法\n\nTask Learning Using Uncertainty to Weigh Losses for Scene Geometry and Semantics\n\nMulti-Task Learning as Multi-Objective Optimization\n\nMulti-Task Learning Using Uncertainty to Weigh Losses for Scene Geometry and\nSemantics\n\nBounding Box Regression with Uncertainty for Accurate Object Detection\n\n这些论文主要是一种不确定性的方法，从预测不确定性的角度引入 Bayesian 框架，根据各\n个 loss 分量当前的大小自动设定其权重。\n\n# 利用 Focal loss\n\nDynamic Task Prioritization for Multitask Learning\n\n这里主要想讲的是利用 focal loss 的方法，比较简单。\n\n每个 task 都有一个 loss 函数和 KPI (key performance indicator)。KPI 其实就是任务\n的准确率，kpi 越高说明这个任务完成得越好。\n\n对于每个进来的 batch，每个$Task_i$ 有个 $loss_i$。每个 Task i 还有个不同的\n$KPI: k_i$。那根据 Focal loss 的定义\n，$FL(k_i, \\gamma_i) = -(1 - k_i)^{\\gamma_i} * \\log(k_i)$。一般来说我们 $\\gamma$\n取 2。\n\n最后 $loss = \\sum(FL(k_i, \\gamma_i) * loss_i)$，loss 前面乘以得这个系数 FL，就是\n一个自适应的权重，当任务完成得很好的时候，权重就比较小，不怎么优化这个 loss 了，\n当任务完成得不好的时候，权重就会比较大。\n","slug":"How-to-Blance-Losses-in-Multi-Task-Training","published":1,"updated":"2022-04-12T07:40:03.484Z","_id":"cl0thb1i1000hgqul1can83ic","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><h1 id=\"论文中有的方法\"><span class=\"post-title-index\">1. </span><a class=\"markdownIt-Anchor\" href=\"#论文中有的方法\"></a> 论文中有的方法</h1>\n<p>Task Learning Using Uncertainty to Weigh Losses for Scene Geometry and Semantics</p>\n<p>Multi-Task Learning as Multi-Objective Optimization</p>\n<p>Multi-Task Learning Using Uncertainty to Weigh Losses for Scene Geometry and\nSemantics</p>\n<p>Bounding Box Regression with Uncertainty for Accurate Object Detection</p>\n<p>这些论文主要是一种不确定性的方法，从预测不确定性的角度引入 Bayesian 框架，根据各\n个 loss 分量当前的大小自动设定其权重。</p>\n<h1 id=\"利用-focal-loss\"><span class=\"post-title-index\">2. </span><a class=\"markdownIt-Anchor\" href=\"#利用-focal-loss\"></a> 利用 Focal loss</h1>\n<p>Dynamic Task Prioritization for Multitask Learning</p>\n<p>这里主要想讲的是利用 focal loss 的方法，比较简单。</p>\n<p>每个 task 都有一个 loss 函数和 KPI (key performance indicator)。KPI 其实就是任务\n的准确率，kpi 越高说明这个任务完成得越好。</p>\n<p>对于每个进来的 batch，每个<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mi>a</mi><mi>s</mi><msub><mi>k</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">Task_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">s</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 有个 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>s</mi><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">loss_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>。每个 Task i 还有个不同的\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>K</mi><mi>P</mi><mi>I</mi><mo>:</mo><msub><mi>k</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">KPI: k_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>。那根据 Focal loss 的定义\n，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mi>L</mi><mo stretchy=\"false\">(</mo><msub><mi>k</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>γ</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>=</mo><mo>−</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msub><mi>k</mi><mi>i</mi></msub><msup><mo stretchy=\"false\">)</mo><msub><mi>γ</mi><mi>i</mi></msub></msup><mo>∗</mo><mi>log</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><msub><mi>k</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">FL(k_i, \\gamma_i) = -(1 - k_i)^{\\gamma_i} * \\log(k_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\">L</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05556em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05556em;\">γ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-left:-0.05556em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>。一般来说我们 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span></span></span></span>\n取 2。</p>\n<p>最后 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>s</mi><mi>s</mi><mo>=</mo><mo>∑</mo><mo stretchy=\"false\">(</mo><mi>F</mi><mi>L</mi><mo stretchy=\"false\">(</mo><msub><mi>k</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>γ</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>l</mi><mi>o</mi><mi>s</mi><msub><mi>s</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">loss = \\sum(FL(k_i, \\gamma_i) * loss_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\">L</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05556em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，loss 前面乘以得这个系数 FL，就是\n一个自适应的权重，当任务完成得很好的时候，权重就比较小，不怎么优化这个 loss 了，\n当任务完成得不好的时候，权重就会比较大。</p>\n</body></html>","site":{"data":{}},"excerpt":"<html><head></head><body></body></html>","more":"<h1 id=\"论文中有的方法\"><a class=\"markdownIt-Anchor\" href=\"#论文中有的方法\"></a> 论文中有的方法</h1>\n<p>Task Learning Using Uncertainty to Weigh Losses for Scene Geometry and Semantics</p>\n<p>Multi-Task Learning as Multi-Objective Optimization</p>\n<p>Multi-Task Learning Using Uncertainty to Weigh Losses for Scene Geometry and\nSemantics</p>\n<p>Bounding Box Regression with Uncertainty for Accurate Object Detection</p>\n<p>这些论文主要是一种不确定性的方法，从预测不确定性的角度引入 Bayesian 框架，根据各\n个 loss 分量当前的大小自动设定其权重。</p>\n<h1 id=\"利用-focal-loss\"><a class=\"markdownIt-Anchor\" href=\"#利用-focal-loss\"></a> 利用 Focal loss</h1>\n<p>Dynamic Task Prioritization for Multitask Learning</p>\n<p>这里主要想讲的是利用 focal loss 的方法，比较简单。</p>\n<p>每个 task 都有一个 loss 函数和 KPI (key performance indicator)。KPI 其实就是任务\n的准确率，kpi 越高说明这个任务完成得越好。</p>\n<p>对于每个进来的 batch，每个<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>T</mi><mi>a</mi><mi>s</mi><msub><mi>k</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">Task_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">s</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 有个 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>s</mi><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">loss_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>。每个 Task i 还有个不同的\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>K</mi><mi>P</mi><mi>I</mi><mo>:</mo><msub><mi>k</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">KPI: k_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>。那根据 Focal loss 的定义\n，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mi>L</mi><mo stretchy=\"false\">(</mo><msub><mi>k</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>γ</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>=</mo><mo>−</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><msub><mi>k</mi><mi>i</mi></msub><msup><mo stretchy=\"false\">)</mo><msub><mi>γ</mi><mi>i</mi></msub></msup><mo>∗</mo><mi>log</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><msub><mi>k</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">FL(k_i, \\gamma_i) = -(1 - k_i)^{\\gamma_i} * \\log(k_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\">L</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05556em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05556em;\">γ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-left:-0.05556em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>。一般来说我们 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span></span></span></span>\n取 2。</p>\n<p>最后 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>s</mi><mi>s</mi><mo>=</mo><mo>∑</mo><mo stretchy=\"false\">(</mo><mi>F</mi><mi>L</mi><mo stretchy=\"false\">(</mo><msub><mi>k</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>γ</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>l</mi><mi>o</mi><mi>s</mi><msub><mi>s</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">loss = \\sum(FL(k_i, \\gamma_i) * loss_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathdefault\">L</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05556em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，loss 前面乘以得这个系数 FL，就是\n一个自适应的权重，当任务完成得很好的时候，权重就比较小，不怎么优化这个 loss 了，\n当任务完成得不好的时候，权重就会比较大。</p>\n"},{"title":"Personal Thought","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-12-15T08:01:28.000Z","password":null,"summary":null,"description":"记录自己在学术方面的一些想法。","_content":"\n# Deep Learning\n\n## 泛化性能\n\n### 泛化性能的本质是什么样的拟合曲面是好的，一定要依靠先验，现实中曲面有哪些特点。\n\n深度学习的本质就是函数的拟合。泛化性能是衡量深度学习模型性能的指标。\n\n在两个模型都完全拟合训练集的情况下，i.e.，两个模型所表示的函数在训练点处的函数值\n都是完全正确的。泛化能力要求两函数在测试点处也具有正确的函数值。\n\n这个问题其实只能依赖先验。对于拟合曲面的先验，也就是说，什么样的拟合曲面是好的。\n\n比如，如果点 A 处函数值为 1，那么把 A 翻转，函数值也为 1。这是源于目标识别常识的\n先验。\n\n数据增广方法 mixup，发现不同图片之间函数值线性变换是好的。这是对函数曲面的另一个\n先验。在样本之间，函数线性变换好。\n\n所以，深度学习的本质问题是什么样的面是好的，如果我们知道什么样的面是好的。知道我\n们需要拟合的曲面的一些特点，那么就可以利用这些先验来进行数据增广，甚至进行模型的\n设计。\n\n比如，要拟合的曲面是几次的。是否需要高次非线性。如果需要我们就要引入特张图之间的\n乘法。强化学习的特征选择给模型带来另一种非线性。哪种非线性是好的？要回答这个问题\n，就要知道我们需要拟合的那个函数是几次的，是哪种非线性。\n\n**设想如果，有一种可视化方法，直接可视化高维数据。我们用它来可视化在 MNIST,\nCIFAR-10 等数据集上都达到 100%准确率的函数。我们总结这些函数曲面有什么特点，光不\n光滑？是几次的？有哪些对称性？。总结出适用于所有数据集的共性的曲面特点。那么我们\n就能根据这些特点，这些先验，设计出好的算法，提高模型的泛化性能。卷积神经网络之所\n以在图像上那么成功，也是源于，它拟合的函数一定具有某种对称性（因为对图像平移不变\n），而这种对称性，就是真实图像对应的理想函数所具有的。**\n\n洞察真实数据是什么样的，是提高模型泛化能力的最终途径。\n\n### neural tangent kernel\n\n**最新有论文表示[^1]，泛化性能和正切核有关，还有关于神经网络特征值方面的研究。值\n得探索。**\n\n[^1]: NEURAL TANGENT KERNEL EIGENVALUES ACCURATELY PREDICT GENERALIZATION\n\n## 高次非线性与注意力机制\n\n### 特征图乘法\n\n特征图乘法会带来高次非线性。如果把 ResNet 里面的加法改成乘法。\n\n```python\nshortcut(x) + out\n# 修改为\nshortcut(x) * out\n```\n\n**可以从两个角度这个乘法**\n\n1. 把 高次非线性，引入到 CNN 中\n2. 把 ResNet 的分支做成一个 3D 的 mask，形成一种无参数增加的 attention module\n\n### 和数据集有关\n\n在有的数据集上效果挺好，比如 Cifar-100。但是即使在 Cifar-10 上表现都一般。\n\n### 和优化有关？和表达的曲面性质有关？\n\n原因可能有两个\n\n1. 这样做乘法太粗糙，确实表达能力不行\n2. 优化的问题，乘法带来了梯度的问题，比如方差不可控等，导致优化的情况不好。\n\n现在其实也没能很清楚是是哪个问题，缺少研究这个问题的手段。\n\n为了减少优化上的缺陷。尝试过几种方法\n\n1. 为两端加 bn。`bn(shortcut(x)) * bn(out)`\n\n2. 把 bn 的 bias 设置为 1，保证 bn(shortcut(x))和 bn(out)的均值都是 1，这样可以\n   产生比较稳定的梯度。这个想法是源于\n\n   **1. 原始的 shortcut(x) + out。相当于 shortcut(x)乘以了一个 1 的因子，out 也\n   乘以了一个 1 的因子。**\n\n   **2. 保持恒等映射。当 out 是 0 的时候 shorcut 可以容易的实现恒等映射。**\n\n### sigmoid 容易饱和？\n\n3. 像 attention 一样，把一边或者两边都用 sigmoid 函数\n   。`bn(shortcut(x)) * out.sigmoid()`。这样的话，效果也不是很好，而且发现\n   sigmoid 函数给人一种感觉。就是训练不充分的感觉，有点像学习率太小，或者减小的\n   太快的感觉，所以陷入的局部最优点。猜想这是因为 sigmoid 函数太容易饱和了。\n4. soft attention 经常利用 sigmoid 函数，是否也存在过饱和的情况。为什么它没有出\n   现过饱和现象。1. 用的不多？ 2. 因为是 2d 或者 1d 的？就拿 SE-Net 举例，每个像\n   素点其实也都是乘以了 attention 的。只是空间乘以的是同一个 attention。\n","source":"_posts/Personal-Thought.md","raw":"---\ntitle: Personal Thought\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-12-15 16:01:28\npassword:\nsummary:\ndescription: 记录自己在学术方面的一些想法。\ncategories:\n  - Machine Learning\n  - About Papers\ntags:\n  - Personal Thought\n  - Papers\n  - private\n---\n\n# Deep Learning\n\n## 泛化性能\n\n### 泛化性能的本质是什么样的拟合曲面是好的，一定要依靠先验，现实中曲面有哪些特点。\n\n深度学习的本质就是函数的拟合。泛化性能是衡量深度学习模型性能的指标。\n\n在两个模型都完全拟合训练集的情况下，i.e.，两个模型所表示的函数在训练点处的函数值\n都是完全正确的。泛化能力要求两函数在测试点处也具有正确的函数值。\n\n这个问题其实只能依赖先验。对于拟合曲面的先验，也就是说，什么样的拟合曲面是好的。\n\n比如，如果点 A 处函数值为 1，那么把 A 翻转，函数值也为 1。这是源于目标识别常识的\n先验。\n\n数据增广方法 mixup，发现不同图片之间函数值线性变换是好的。这是对函数曲面的另一个\n先验。在样本之间，函数线性变换好。\n\n所以，深度学习的本质问题是什么样的面是好的，如果我们知道什么样的面是好的。知道我\n们需要拟合的曲面的一些特点，那么就可以利用这些先验来进行数据增广，甚至进行模型的\n设计。\n\n比如，要拟合的曲面是几次的。是否需要高次非线性。如果需要我们就要引入特张图之间的\n乘法。强化学习的特征选择给模型带来另一种非线性。哪种非线性是好的？要回答这个问题\n，就要知道我们需要拟合的那个函数是几次的，是哪种非线性。\n\n**设想如果，有一种可视化方法，直接可视化高维数据。我们用它来可视化在 MNIST,\nCIFAR-10 等数据集上都达到 100%准确率的函数。我们总结这些函数曲面有什么特点，光不\n光滑？是几次的？有哪些对称性？。总结出适用于所有数据集的共性的曲面特点。那么我们\n就能根据这些特点，这些先验，设计出好的算法，提高模型的泛化性能。卷积神经网络之所\n以在图像上那么成功，也是源于，它拟合的函数一定具有某种对称性（因为对图像平移不变\n），而这种对称性，就是真实图像对应的理想函数所具有的。**\n\n洞察真实数据是什么样的，是提高模型泛化能力的最终途径。\n\n### neural tangent kernel\n\n**最新有论文表示[^1]，泛化性能和正切核有关，还有关于神经网络特征值方面的研究。值\n得探索。**\n\n[^1]: NEURAL TANGENT KERNEL EIGENVALUES ACCURATELY PREDICT GENERALIZATION\n\n## 高次非线性与注意力机制\n\n### 特征图乘法\n\n特征图乘法会带来高次非线性。如果把 ResNet 里面的加法改成乘法。\n\n```python\nshortcut(x) + out\n# 修改为\nshortcut(x) * out\n```\n\n**可以从两个角度这个乘法**\n\n1. 把 高次非线性，引入到 CNN 中\n2. 把 ResNet 的分支做成一个 3D 的 mask，形成一种无参数增加的 attention module\n\n### 和数据集有关\n\n在有的数据集上效果挺好，比如 Cifar-100。但是即使在 Cifar-10 上表现都一般。\n\n### 和优化有关？和表达的曲面性质有关？\n\n原因可能有两个\n\n1. 这样做乘法太粗糙，确实表达能力不行\n2. 优化的问题，乘法带来了梯度的问题，比如方差不可控等，导致优化的情况不好。\n\n现在其实也没能很清楚是是哪个问题，缺少研究这个问题的手段。\n\n为了减少优化上的缺陷。尝试过几种方法\n\n1. 为两端加 bn。`bn(shortcut(x)) * bn(out)`\n\n2. 把 bn 的 bias 设置为 1，保证 bn(shortcut(x))和 bn(out)的均值都是 1，这样可以\n   产生比较稳定的梯度。这个想法是源于\n\n   **1. 原始的 shortcut(x) + out。相当于 shortcut(x)乘以了一个 1 的因子，out 也\n   乘以了一个 1 的因子。**\n\n   **2. 保持恒等映射。当 out 是 0 的时候 shorcut 可以容易的实现恒等映射。**\n\n### sigmoid 容易饱和？\n\n3. 像 attention 一样，把一边或者两边都用 sigmoid 函数\n   。`bn(shortcut(x)) * out.sigmoid()`。这样的话，效果也不是很好，而且发现\n   sigmoid 函数给人一种感觉。就是训练不充分的感觉，有点像学习率太小，或者减小的\n   太快的感觉，所以陷入的局部最优点。猜想这是因为 sigmoid 函数太容易饱和了。\n4. soft attention 经常利用 sigmoid 函数，是否也存在过饱和的情况。为什么它没有出\n   现过饱和现象。1. 用的不多？ 2. 因为是 2d 或者 1d 的？就拿 SE-Net 举例，每个像\n   素点其实也都是乘以了 attention 的。只是空间乘以的是同一个 attention。\n","slug":"Personal-Thought","published":1,"updated":"2022-04-12T07:41:32.240Z","_id":"cl0thb1i2000jgquldqobh02f","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"c183a69130aaee9d5ddacce9d014aa78a1b1bc728b98454cbfe313062ce9c69d\">253d24b99cd7a34be71a536fc48a861e24280f85c5d92437d59d46d319bd5ad689cb46e2d80f5d3c08f50582b841f61ef78b4913d19d9c0ced47726e006c992120dec993466d1458457784d47372e9ad6b6c785b61e6c57a468cdf4e8c6c04ce797fb240f22ed4e38213649c083b811125ffca69743bca59a11165c33e4fb305c26badf7c147b24c9a4badd2111eafb1b4c2400acabe08b9f662e97889bd1703896bce400d1b2fba4ee5033c7aceef2e886e6f7b8b75ce85d0ed76b78330e3b73d66d13ba017abda1b1d968a803884d36d6433a4fc8151c1d631ea309e8af78807f0cb854d54d107392c61a3d4622ba17d843c0296ba2fb856436e1f829282a7ce51b2fed86893ad0d495b6a4747e3d8efb9405844cbe7966e78d02b1302067c5e45dd1d70dccb88e39c88cdd189710edcd1c296f1ee40f59e84286291d44bd59563cf359f843a8925125a0c70dd9baabbb627c8d2a457cc75cf500b6100cb7bf86c5a08397015148e6e0cf8069605388ed1f958dbd1afc2734fd9206e9190680680080db560bbe8afa85d6361e921977741412bdb73f479733be0f5e46c0749840a94695c06c2898711db95f1526535ee91433e6fe0f4092546d70a7e63e7dec7f491ad689b73a3807fdc9b7184663363278a51f8112ee1e6e1044a578ebc3f89a39925e48fb3665b93816184ec6f179e775ba14521a96e5957a4a0fe64dd85b17b20c410d51dcfdddde62ba6f83172fdbe7a6429f383d69ba22815b998690e4e7df2633393b6558ac697d18077e541e891175773e3970c79a22f3b203962e0e485c6d7130a43d542fa6453c3806ab2926e9fa4df65ed3de015b70f8a45b3622e28d7c1486f042ef9959572296910ed424929c6da9ef05f9f5e6f17177b4a54cdcc69dc6e1d8cc1d8611f03b6e6814e57b2893b37be4351ef4d4a62dd847afbd0aa8e95619cac26b2b03caca54055a991188033249df360606b084bd3e057dd4bdc823cbd847dc598acae110f87d951b5ae999bb3435556bf825ad494c23e48e592d535cad692af9093cc6236989cc3f5763a9a87acd67f3cccfd84a7022f4bdfa5573e747d372c4132e5eecca2758855a4c53d8df84d3d3e8a27a4918769119407c1c8e5b5237d9bda2696c13714fded4906b36a853bb6acbbcbfda463f9ee705147fe3a6000dbc8c9910e966d18036b8f3868b3a2a40befb715c35529adb5d80b924bf0c241f33250d9798985cbeb3f641179d72d509122e6265662e9368ae30728adb1b3ad18bf70cbb620ddfcdc98898c1b43b4facd4ce1d1e5e4c15aa8d3ea0cd9a3daa25cf4d5239edc6ecd6b2515cf034f51fc01d799a51121f574082470e68b6ca4e79c141f3bffee601f1474d9dbac9484444b7817d17c446198f932c0f012ea21866b5edce7bd384f5c6fa6c044161a518dd8402ab10b9d279a8c1fe434e75ba3bfacfac07ec7a27a3c0a20132090f843c1901b722e4f3c88beca5a1e2ce8edca18a26389f29877118b51739a92f1292867cb8ea0309e0ea78964e036190ea526da6b74a1f84bd883bf2b6b7569fb98d863f3bcf4e08e85994f2c4d7a90c154105f3afdf695094096b1527b4efd8760f60d69aa0230f36c68801f90f12888ef1fa30e555a20d6b349f3535e260e13f2436a7a3978a205ff8c103be38a447ccd0879b083839b77f2205b9a5356c4d0517401660e7aa5c09fb275f0be1be82e9033a8643a459f8e080ee8d6637450c51f4c7f24c29d149f98edbb691b923d663617245f10e2775ccc3731ad2e7a5a3c4bfb94654e6755afdd0d563b6749accc9f91f0eae0bcc5c1367ae9a9626091a80ac3be1054a079dea06f256e9fd0099e998fc3888afc62438edb783119511bae3ccd87c07ab20ca42b00aff22075d636e10dd28d82ca93e04da968a99d9b14cb79c4eb1b351bb03b7500ad2865d4901fc7ee60996df75e747519d017e8f4fe73ef072e544ecaac56c7fd0eaedda946fdb4a43b2d95638820c94e627925df7e2eb081d03dc6c59bd0262cd2c63766e3e5d3588cd6916b0cc97a1608bc6a63d862d17adb2b9cad10e917db3b5fd81ce6f8c90ab71dec5a7100199884c9367443cbad144e662bf595513f25b7ecbcf555f843e3ddb7aad07a173a6bc9469c3a2066559234a1c8953ccdf947345b79f59a438b7b17c716e405081a14669c234dbb186db8f56d0bc58315c67cf3e87ca48ae8f499d35ac31cfb23cba0b336e9fde4d920d0af4f1e462f3ff739bb9a2ddba128c46cc125a41581b5fdc234df71892b43bff33789f59a5cfda69ee9646255743a7c4e10f15efc29847e3ec25a98818c4e8436b88dd0aa4a5fe81fec13813ffe90a7115ee44a1045c1d59f5e0816202ee0c92198adab85e4358e5565b89e1e1432580077ea2472e5fc3bc0f8ab08a218f60f1d50def03bd0ddc2c450603096aead3d99ee80e518d301a23522d8ad16e448b048a615fad12f4db9eadb86669a2fc8b6122d069fc34f3853c59594f03206dd118d87a9853a3cbec1b2a169bedf113ca1379c14ae7d5bb6b8c81c3708f1a6bc1fd6cbfd84280b56a225e68c0417965afa8a5f576c2a99c5241b46157f34baec07ee3f57580fb70b38851e935000ab732625fe6f199c95816c244f17435490744c48e24bec54d0ae46ad01f13c894cddf84245e0389080f2f3cc44f053304ae8ca05270242d29353536dbeb5301881dc537047d9490391285cc512623fe41ab1fad5467f7d18f7752dea43c57c3ea060b84857186579ffb64e01e9116a61050d22194234bd16eb691e18ffeb8f4d8a282fd50910f6867d395d795858ff7e65c05106a299eb33421ae5e40f2030a299fac8ec4148eebfa0632e31e71cb0d8b3996d760a7a89aa3aa8f7b4dd58b59d35908cd84fc281a0faf4641e2eba2d4d2d0a9a9298227d3413f7d7275f78cb587bb576951c98fea887ab285c59927890e70b2f7add5a8f115c0b343cb140900ce95308acc87e5c2adb0e418bf41a97673b77c88c3db0682c2a401b2433f09584383fcfd7f6b4561d8fae142a6f61e16bb67538a3a2ecdd4b0778db3af88049e1d06094c864788f2f492fe28cc7d458f1661fece515c24e6f869efed947044340862129894b7f6cdf0d0e86fc211dd7a981b6998b4d2305e35a6e38540c70390c9dc6a80186d1ac85979b30d47c89683aadd5151722b6826e8a1d378bc508006b0d21020a67cdc8edfc71e5990f59902c7a282aa466e34be1b76549105b070e544ebffc401a9b7a01dfd9c8aa1c47fc45d3db7f0d33efc88ae6f179a5f58545219b16b6e1c82b453df5c716e071bfa84b62cfb781309034c9688700cf63e422fd7dbab5716598515c634f11ff1029991e0dace9d6cd741ffc868e483162e3acefcd8494fc100b502e9f98d3a65e8e9d5434fb9f0dbb59e429cdb61b0eede5afd74b85e8bf486affb6c07b73d3932b0559a37b712515373dc21659890feed7751c6ed5696c0d9814eb5b02459b304172732ef205e017d838b68d4bec5156ad17897cc17ae5fb3b664ef4d1a0f4388ef7c01326b4dbecd9dfd3ef02a6531fb4515b19010a9877d3feb3b5f2cdccb300ba96393aedc1f2f8a8da73fb607f7918ca0895bc44f9a3979493e676ea3d35ff728ba07f829ffe5dbce602a1669c84a8c7ff8521954919b50dc3676f78988763c3d2e8551790f5120a544ac112b8ff1dd4425b113e4a20bbfff9835b8869378b9121f492dd98993257fa66466143c3173ad49f91335d11e16ecdb5c72d932d87a6a83f232ce4a99b8998de2e29ad7b076fb7d8fd18202bc208fb2270e6011247eac73b7be5808e9e7d022056a49fdcfed0f5faae61fd174ff8b7271ed2cca1679ddb1f51db541d4e3787507aeee98f3b25023f46f45d61344eb1d232503b271a17f5007ebd7b0356d6e3b81c2b9b98670b5455ed7a34c1ed57c3bc5cb7952c57f6c1f264fa0a08ea5e39d687fd707399886eb59e690aa462e28cd320c02ba34d07d8d943f5b2ebb6d4d70af5a6c3d437a4be14b9f096504c860901064187722da89eb958f5cd001e4fb8b4072d07ee12a002c27af5a6a5a260d12b240af28562ede2f305956d94ed90eede3fa6b22a19d6c0228a94019df67c77f132d8b3a984d76e209e8bf93aec60c11c500ce632ca34084e0485e2eca654b2445c8c835bb2bffc25a103dfcdaa7937b0600cacc413cf0bf6f1ecf685b71d21b842921c42786c5569377dfdf19bb8da480a33fdcff7f0d2f030c692cd4e6c3400485af3cb8eeae8772a5748bea5c23096edbcf7ea9468453369b6226f7947231e29fd26b3956cba63a7cbeb75c7750209757e36de20982f869206e7ebec4153f46f241e37d655048528d7c4003916934fce0c3cb802d00b04fc727bbae97cd99da50664d0ff422462836347718ca1de618805be6cdc110b5bc9d99201eff3a2023715b1f43570c3f38594f7f8937915551b06f433a1854df2fd93cdfe4974c1a27952abd70ba6a22a2ec6ae1d516277e4ed1601b8f6f31e2389c6dbc1f5421f2af15d6c7068c5e8274b5a4a57c4eee6272b1ecc200283fd1cf19fd51946af30bb12f7af5cc93800659ec39c495ad45f30c209773058daac3754dec752c3c33540070242ec0650bc0aa13cc4964a896abe8fb032254251997ecf6c8cb6afca32151635959499038b15e719d5be1888928035da44eb707b9c34ec3713d816b535fee4300da3b0e8b3da99efd49c5eb420ca9245278801f410d372231710a10c44abec6eae5d1ede8f48eb75bfbe3b545622af871a502c4314b2059cba2999219bd212b4b781d59d275eabc134e8294f76612033d364e7302903296c66b249d18c9a0a788abff98668b68fea08327cd782b1e204729ba023f4cc1f8f627a173542208f2857d0a8a8fda9ec2409e82618efff73d68e143cd21a642754006fdfa912e0d72af04c525169d41d7d4e51e7944a7d679dfa586499ed7a08aac22972e97745257920da593b2a53bd56c6cfeab2e15288a26784d74ff09d62ff4911ef75b5edafbaaf178b63b6398cc4e27579734016f5c67923a6c0333c76f37ee61bdeb8d5d7de4438e8e67b4dd41db91cb051400928a4183921e1b5aceeb95dffb40439573bfb5d6412efbb386095abbf7173512c5867ba154d24fa4c11a13be09eba559c6c187615faee1376cb20eca2279703122e8e4225657eca570fef2528080694dd696ef89ba31eba9d035bad7453539011b9e2b7f829090193f0eac8f952841564ce5d8207167f68ae4b0d4ef692bf18b83ca4cb92d3a9fbf48b3d5e3d78d9dfbdeee6a80bf539e75ef93f5c21844fb6bdc2306e3d4d3da4d17bb6cda982a63f74426511a1662da9af69f6d9c0a45c5e9010f290ab4dcd6f5591e29f9740bf391250dfaf1e17f24acc9f3b519d9aea7722e0993131a1cbb6cec9510db761c994ad565ac4513ff9fb6cb36d1831692232a4273dab49fd658cab4e74e66c83185db6c9b35519b320e82d33cc5aeb9f57901c43f6bbf4307af0b2999e2c7d73db698be0383295daf7aa397c203dd16648f6130d092e90091ebe009704b70b630401cf5048064c22020e2536dbb194063ee151221d98b89dd66805b8e3ca8002a9862df7f459a35cc00a385a8c53ed140aaace20d210604c962ea6924777be1a7057e7af287b4a3e6b4cb0f5d982983eb6b15e0e73849872101aabcfc1eb3b2d8984c6a674036b1d8c45ab811772fc82f4e429b30b0bd8b93a8aeeecbbede4a90ea90a89787e3ed077157778779ad4bd02318769551d191da12e4b25e9c4b7d69996183798fc454ec3582deca502701e5fe0e2b8e86d652d94dfde8c8752d1a6b58006bddc4b59eda8151d57a16fac318c3c5315c7bcc5d817e638e753140215c3dd2581321ab79990a3c7dc1039e96be68c42156b667236222e64d908a3047d6b779f2f03684db7953733e02155506145c6553f3a731b9d4373b469bdbcf2c22e6945c2ec68f4d1dc09c3596ea2d42dd8fb0dad6049a61bcb9d5e30b4ff5265e5a6b921c2ab01fd0795b1ebdcc67f5121e49635d2325ee20ab6ce08106ed67756fd3424095ee2ea34f3cc485d681f482dffeaab93b1c408f9460d75e3b73ed9e0d97f272a84e1eb5d7eddf7b0a054402b4580ec14aa80cea11fe2d45bd4335776105120d1caae39d75506bcab69d465525a76c722621d7de06b2b628d73cdc7d83d7cf43195a0a73fca92d29ba6a8847991e48eb613331bb0a04910269c85fa8f3f04672600c4027b7f5bfb75e66abfce8f6b640cf06ddd6b994662fd547910ca6d02f566710ed8e8a7863ca54dc6bb3898c2d8e3cbd0f0dd990649088a1454f8b575085f097aabd7c0929789fd9868015410c70e39cf113962db2b8fcba18a7e88c26ff26869954039cceabd5b6363d7dd04c013ae340212a171dadf6a3599143a601a3486c91044cb00fc16cc5dd4d5833303368c6f419992e188afca6930b14a17ac0b4c040f051897d01db4adfaa6e1397931bcfb20c7d1acc3bb481d90ccc393219a011798d6096345aa174dcb2fe0e9b784a3c9ebcf0567f6210730c6adbe52c59fdca61ab7808adbab85586f439d99b50c1afb561772ae31721c349c8921bcc04a7b401e45bb2f0dfb1bcf8edd69be9268bb77e4a0c518143ebb2930272ebc0a03adc68f7cb18af798bb6d293c5c65cea2f59c163af19cab16c94d5ad49f39be38530471667cd12c389889bab1eda5b8b327862e14f8a01e1736f5cf2805193b7c6d559bdaf7e23f53d9377a334372ef311b126fbf0d54952c83c7c971def94ff260fe0f1857dc05b2501ede5813c806fc5574e168bb40f0df611a89bfba9c0f88c89a084fcc68a9925af3b7d59a58f17f38156d0efef36d9279727dbc5cf1e7ff969c48d1c0d4511abfb17af7a6a66a5ea3947afbabb7f27f467abe920e0ea7eff0ae16f523e3353535675d191a550673eddf8160341ee4abe67d8976454de432f699fbc9f5fccf639dcc2fc7543cda5dd786b944a4de4ba6b55fe4b1b8dc5fc15efcfdc3443cc7df942edf57db130deaea505e3cc56ab45ad58f79f71ced13c053375b06e0778d9f575dff800b775f1f24b3dd1f3ed6a077ee198c300878b0ab41c989df3340a864de337727413d1402c0386b913955fadbbec7aff75bf4ca30fd6574a0ac065a57bca8d51d3b7965770bc7615f4986e00abf83730aa9bfe8b327e2afade0a873b0a757894b3da8897193be50f7146e2347a9bdc0d28544ee900b588e358adca2ff3ad5326fcea99d095356d2957b8f33a642432002d32445f1034e9e42a5a0558deabe5d791ff459c91944452ec8851d427c9e854ac0c0442d61e6c0cbf0d6544972028ec7f15ffb142937796aa17d9f1624ae5a7a57cd16136d0e7323cd2a03340861f7b7e7f4187c6d3c7371118121c71d3cb603306342dc7c32bdeb3473986fe54b7e1c94d3c0616de07cb411f61fbf4c0f84914548479cf30ac2438c58a70fc40c8a0c8544c0072cd77677d7aae4fd52fbdacde61905787b36ef22f4096df4c3b9f4f6cb3d46f39f29f825cbb1fef8e1b9690c549521193952c357315ae17e208cedd5e8c912f26d1a0313d56170dd2378999bd49ac752f6cb901e0f3dc075db5f10f7fc27145f57245f326613d65fabbc54b971f245e12df91b4bf0a18932a534fd81771419b124fff11d4c65ac2fab7274b90a6827a3ed6ed092c8a21ff80b363ee7a56218f8e94ee4df15838b46b0214bb6fe2fa5785ccfc81a490e26619e22378756f9e817118974c7c42365d4564b400f7f256327716333245489a4b924bc3b9f7885afeadfd41944c4329e6d32189ea24f0282ca0a63afa9a651c2a936176eb470eb44d96539fa180661543f6bd7650f13ec765a70aba68c2adad5eaf76d1fe83158d10739aebdc393e3a7146c475eb448c62dc7e1eb8189d793a1cad1129fc5944b64b78f89a3d0eb93691a39b787a6b67c7fdcb6c35aeaebebcf957dba331f63c8659ff332522e30d3f4f1bbffe505367f2bae9d1b2f5555bc5f1eca7e9a3e4142367ac4df606aa8d9f69d7a7cdbd2cc44c8026a64448e33f3c84effc0d9d673e6efef9312a1cfc5a87ff74082c4132bbbab91b1b76e65a2b983e44ee3e902286e0b760aaa21b02af636c5222b63c6ac6185404e5ab027d2515784c9a0865eef436de4a8ab341685dc185970b1df9f5e6f44c542e9681899d880d9dd789e9c1191d0b31ac5df973a5ec02af50b3807c8d097677be990cfdd1483734c47e622de9e368eb25630b4f210563dc6dce0979bbd680d82824781d178dd4b8fbe771eb5b0bc3e93c77f4a3dc4f1712b0a57041ece819be8a1f0ad9c53b6b777183a7f80b857d06df93c5fac6c113fac74bc5a6ae87d21bc28d3c577411b0f7b04047074e4f0a345b5726cbc89dfacfc7f5a616117fbdd837b1f727c5dfa6f3b079724f4fc7b815fbd5c39612f661fd37e9c5d871d3171be8cc542b93ee457a8e0f1ef86f3f4bbcccb9f156d26f6ff27708374545467619b839da73e0af8725861ed887f890ab531cead186ad0fcfa8d9436fbf41c9110dd9126e5d523e7484fad4927041c7c1b5e14808f0e890803cca70bb126d31ef6c21407c1266b13f72081a0946e123b146bc22eea61a9b1d53d46293ab0caf6933e4c6ccf6a512befa921d36ccc2df1b30c1d513cc3839a2a5fea7068def66ba36c2ddd2f6b548ffbe5f77515cd025423204ee6a20e754bb49db40635f80cdc51263f204888d25a1d9180e84979280f764533eafbe6b635d88843d71c4df7e543e62f16ca0f71b642ef3654288417a2b1613df94066f113b2366516fdd01778168645ba5ad8f2b5114c33e06f0a63594e4463e03f1431fe8be9daa82cb100af0e305563249873c5e0084eb02bd64f2ccd087cefe3b9247f19faad7890941fc716ca6f1ef6e6131d682e7009af310eba1035e1eb9b89f96d72985533d243a07f2812c04255258434202979181e07ec2cac473d9141c1c39938cd2390bc68ea663395c4da6c9194c49173642cbb61cc1bf28189e0c9c6f0c43c64ab8b3b3102ef13d44ddcccffb53d8a7eca28f2afd63521ac59fa2d82561f3d923551cfff018f5a16cb1d7c8c4b3e1cdfc02af4bcfae0eba0bd2388c66bde7ad48ddedfba800c62882bc1f2096db5c3e40fa486fbdfe7e31630300eafc2b6344ce1227f97db2d83a23f5d088d06f00f000b7058d00c6a78e394925731e05a18e5f38446bb1ae53a14bb31ab25d8c662e6155cf361127855b7e02fbcb7d7490630fda2d68b60c0591915f1c749629591fce6dcb1fdb0cb5503e11729a4376ee5a0e4d57f56a44d6ed93a26fc6e56a9be67154921ebd2e6defd0c9d8ec3ad573471eeb6c6b2c04622edd93943a9b2d15b3eb3e1bc8b1c543121b0d185238162434f49d3372e0994598c40f9faca4899c586933b9f679527fa8dc8f10762dc042cd4ce474c6f6a5c3a81b58ec9a0a4579c278bcafc07e4679cfbd625c43511fa5904747885606c7ace4d40577ac6f0cc4b48512ae91758201ba4d35162afee20824a0b14e75453424fa8b85e64ce157a2b7c1f5335ae2d1e2937f842ef46321841181e62e4c329dc6d2d520f6c81c83a8638929e64d645fbcda48a4e768b47a541eea92b1478b3e5e2896527b429b2ffa23b421ea18937b5710a981b9a030051dd7938af08102af5e625d645cdf89c145cb935a4dd02ede57f00faf0</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{}},"excerpt":"这是一篇加密文章，需要密码才能继续阅读。","more":"这是一篇加密文章，需要密码才能继续阅读。","origin":"<html><head></head><body><h1 id=\"deep-learning\"><span class=\"post-title-index\">1. </span><a class=\"markdownIt-Anchor\" href=\"#deep-learning\"></a> Deep Learning</h1>\n<h2 id=\"泛化性能\"><span class=\"post-title-index\">1.1. </span><a class=\"markdownIt-Anchor\" href=\"#泛化性能\"></a> 泛化性能</h2>\n<h3 id=\"泛化性能的本质是什么样的拟合曲面是好的一定要依靠先验现实中曲面有哪些特点\"><span class=\"post-title-index\">1.1.1. </span><a class=\"markdownIt-Anchor\" href=\"#泛化性能的本质是什么样的拟合曲面是好的一定要依靠先验现实中曲面有哪些特点\"></a> 泛化性能的本质是什么样的拟合曲面是好的，一定要依靠先验，现实中曲面有哪些特点。</h3>\n<p>深度学习的本质就是函数的拟合。泛化性能是衡量深度学习模型性能的指标。</p>\n<p>在两个模型都完全拟合训练集的情况下，i.e.，两个模型所表示的函数在训练点处的函数值\n都是完全正确的。泛化能力要求两函数在测试点处也具有正确的函数值。</p>\n<p>这个问题其实只能依赖先验。对于拟合曲面的先验，也就是说，什么样的拟合曲面是好的。</p>\n<p>比如，如果点 A 处函数值为 1，那么把 A 翻转，函数值也为 1。这是源于目标识别常识的\n先验。</p>\n<p>数据增广方法 mixup，发现不同图片之间函数值线性变换是好的。这是对函数曲面的另一个\n先验。在样本之间，函数线性变换好。</p>\n<p>所以，深度学习的本质问题是什么样的面是好的，如果我们知道什么样的面是好的。知道我\n们需要拟合的曲面的一些特点，那么就可以利用这些先验来进行数据增广，甚至进行模型的\n设计。</p>\n<p>比如，要拟合的曲面是几次的。是否需要高次非线性。如果需要我们就要引入特张图之间的\n乘法。强化学习的特征选择给模型带来另一种非线性。哪种非线性是好的？要回答这个问题\n，就要知道我们需要拟合的那个函数是几次的，是哪种非线性。</p>\n<p><strong>设想如果，有一种可视化方法，直接可视化高维数据。我们用它来可视化在 MNIST,\nCIFAR-10 等数据集上都达到 100%准确率的函数。我们总结这些函数曲面有什么特点，光不\n光滑？是几次的？有哪些对称性？。总结出适用于所有数据集的共性的曲面特点。那么我们\n就能根据这些特点，这些先验，设计出好的算法，提高模型的泛化性能。卷积神经网络之所\n以在图像上那么成功，也是源于，它拟合的函数一定具有某种对称性（因为对图像平移不变\n），而这种对称性，就是真实图像对应的理想函数所具有的。</strong></p>\n<p>洞察真实数据是什么样的，是提高模型泛化能力的最终途径。</p>\n<h3 id=\"neural-tangent-kernel\"><span class=\"post-title-index\">1.1.2. </span><a class=\"markdownIt-Anchor\" href=\"#neural-tangent-kernel\"></a> neural tangent kernel</h3>\n<p><strong>最新有论文表示<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>，泛化性能和正切核有关，还有关于神经网络特征值方面的研究。值\n得探索。</strong></p>\n<h2 id=\"高次非线性与注意力机制\"><span class=\"post-title-index\">1.2. </span><a class=\"markdownIt-Anchor\" href=\"#高次非线性与注意力机制\"></a> 高次非线性与注意力机制</h2>\n<h3 id=\"特征图乘法\"><span class=\"post-title-index\">1.2.1. </span><a class=\"markdownIt-Anchor\" href=\"#特征图乘法\"></a> 特征图乘法</h3>\n<p>特征图乘法会带来高次非线性。如果把 ResNet 里面的加法改成乘法。</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shortcut(x) + out</span><br><span class=\"line\"><span class=\"comment\"># 修改为</span></span><br><span class=\"line\">shortcut(x) * out</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>可以从两个角度这个乘法</strong></p>\n<ol>\n<li>把 高次非线性，引入到 CNN 中</li>\n<li>把 ResNet 的分支做成一个 3D 的 mask，形成一种无参数增加的 attention module</li>\n</ol>\n<h3 id=\"和数据集有关\"><span class=\"post-title-index\">1.2.2. </span><a class=\"markdownIt-Anchor\" href=\"#和数据集有关\"></a> 和数据集有关</h3>\n<p>在有的数据集上效果挺好，比如 Cifar-100。但是即使在 Cifar-10 上表现都一般。</p>\n<h3 id=\"和优化有关和表达的曲面性质有关\"><span class=\"post-title-index\">1.2.3. </span><a class=\"markdownIt-Anchor\" href=\"#和优化有关和表达的曲面性质有关\"></a> 和优化有关？和表达的曲面性质有关？</h3>\n<p>原因可能有两个</p>\n<ol>\n<li>这样做乘法太粗糙，确实表达能力不行</li>\n<li>优化的问题，乘法带来了梯度的问题，比如方差不可控等，导致优化的情况不好。</li>\n</ol>\n<p>现在其实也没能很清楚是是哪个问题，缺少研究这个问题的手段。</p>\n<p>为了减少优化上的缺陷。尝试过几种方法</p>\n<ol>\n<li>\n<p>为两端加 bn。<code>bn(shortcut(x)) * bn(out)</code></p>\n</li>\n<li>\n<p>把 bn 的 bias 设置为 1，保证 bn(shortcut(x))和 bn(out)的均值都是 1，这样可以\n产生比较稳定的梯度。这个想法是源于</p>\n<p><strong>1. 原始的 shortcut(x) + out。相当于 shortcut(x)乘以了一个 1 的因子，out 也\n乘以了一个 1 的因子。</strong></p>\n<p><strong>2. 保持恒等映射。当 out 是 0 的时候 shorcut 可以容易的实现恒等映射。</strong></p>\n</li>\n</ol>\n<h3 id=\"sigmoid-容易饱和\"><span class=\"post-title-index\">1.2.4. </span><a class=\"markdownIt-Anchor\" href=\"#sigmoid-容易饱和\"></a> sigmoid 容易饱和？</h3>\n<ol start=\"3\">\n<li>像 attention 一样，把一边或者两边都用 sigmoid 函数\n。<code>bn(shortcut(x)) * out.sigmoid()</code>。这样的话，效果也不是很好，而且发现\nsigmoid 函数给人一种感觉。就是训练不充分的感觉，有点像学习率太小，或者减小的\n太快的感觉，所以陷入的局部最优点。猜想这是因为 sigmoid 函数太容易饱和了。</li>\n<li>soft attention 经常利用 sigmoid 函数，是否也存在过饱和的情况。为什么它没有出\n现过饱和现象。1. 用的不多？ 2. 因为是 2d 或者 1d 的？就拿 SE-Net 举例，每个像\n素点其实也都是乘以了 attention 的。只是空间乘以的是同一个 attention。</li>\n</ol>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol><li id=\"fn:1\">NEURAL TANGENT KERNEL EIGENVALUES ACCURATELY PREDICT GENERALIZATION<a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li></ol></div></div></body></html>","encrypt":true},{"title":"Shorcut on Linux","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-02-10T01:22:15.000Z","password":null,"summary":null,"description":"Describe the shortcuts of linux and how to set them","_content":"\n_Root in: I want to find out where the \"kill shortcut\", ctrl C, defined. I use\n`bind -P` to check the shortcuts. However, do not find ctrl C. Thus, I learned\nsomething about the shortcuts on linux. ctrl C is a shortcut of stty. However,\n`bind -P` lists the shortcuts of readline._\n\nThere may be two kinds of shortcuts, in practice,\n\n- stty shortcuts\n- readline shortcuts\n\n# stty (set tty, set teletypewriter)\n\nThe difference between shell, terminal and tty\n\ntty: Print the file name of the terminal connected to standard input.\n\nstty: change or print terminal characteristics, change and print terminal line\nsettings.\n\nThey are related to terminal.\n\n- terminal = tty = text input/output environment\n- console = physical terminal\n- shell = command line interpreter\n\nThe input of terminal or tty will used by readline, but not always readline.\n\n# gun readline - get a line from a user with editing\n\n## Synopsis\n\n```c\n#include <stdio.h>\n#include <readline/readline.h>\n#include <readline/history.h>\n\nchar *\nreadline (const char *prompt)\n\n```\n\n## Description\n\n**readline will read a line from the terminal and return it, using _prompt_ as a\nprompt.**\n\nIf prompt is NULL or the empty string, no prompt is issued. The line returned is\nallocated with `malloc`; the caller must free it when finished. The line\nreturned has the final newline removed, so only the text of the line remains.\n\n## Return Value\n\nreadline returns the text of the line read. A black line returns the empty\nstring. If EOF is encountered while reading a line, and the line is empty, NULL\nis returned. If an EOF is read with a non-empty line, it is treated as a\nnewline.\n\n## Initialization file\n\nReadline is customized by putting commands in an initialization file (the\n`inputrc` file). The name of this file is taken from the value of the INPUTRC\nenvironment variable. If that variable is unset, the default is `~/.inputrc`. If\nthat file does not exist or cannot be read, the ultimate default is\n`/etc/inputrc`.\n\nWhen a program which uses the readline library starts up, the init file is read,\nand the key bindings and variables are set.\n\nThere are only a few basic constructs allowed in the readline init file.\n\n1. Black lines are ignored.\n2. Lines beginning with a `#` are comments.\n3. Lines beginning with a `$` indicate conditional constructs.\n4. Other lines denote key bindings and variable settings.\n\nEach program using this library may add its own commands and bindings.\n\nFor example, placing\n\n```bash\nM-Control-u: universal-argment\n```\n\ninto the `inputrc` would make `M-C-u` execute the readline command\n`universal-argument`.\n\n# The difference of `help` and `man` on linux\n\n`help` displays information about builtin shell commands.\n\n`man` is s system-wide documentation system that provides short reference\nmanuals for individual commands, API functions, concepts, configuration file\nsyntax, file formats. It is the traditional Unix documentation system.\n\nWe can get the information of `cd` by `help cd`, but not by `man cd`. We can get\nthe information of `git/nvim/stty` by `man git/nvim/stty`, but not by\n`help git/nvim/stty`. `cd` is a shell command and `git/nvim/stty` is linux\nprojects.\n","source":"_posts/Shorcut-on-Linux.md","raw":"---\ntitle: Shorcut on Linux\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-02-10 09:22:15\npassword:\nsummary:\ndescription: Describe the shortcuts of linux and how to set them\ncategories:\n  - Programming\n  - Linux\ntags:\n  - Linux\n---\n\n_Root in: I want to find out where the \"kill shortcut\", ctrl C, defined. I use\n`bind -P` to check the shortcuts. However, do not find ctrl C. Thus, I learned\nsomething about the shortcuts on linux. ctrl C is a shortcut of stty. However,\n`bind -P` lists the shortcuts of readline._\n\nThere may be two kinds of shortcuts, in practice,\n\n- stty shortcuts\n- readline shortcuts\n\n# stty (set tty, set teletypewriter)\n\nThe difference between shell, terminal and tty\n\ntty: Print the file name of the terminal connected to standard input.\n\nstty: change or print terminal characteristics, change and print terminal line\nsettings.\n\nThey are related to terminal.\n\n- terminal = tty = text input/output environment\n- console = physical terminal\n- shell = command line interpreter\n\nThe input of terminal or tty will used by readline, but not always readline.\n\n# gun readline - get a line from a user with editing\n\n## Synopsis\n\n```c\n#include <stdio.h>\n#include <readline/readline.h>\n#include <readline/history.h>\n\nchar *\nreadline (const char *prompt)\n\n```\n\n## Description\n\n**readline will read a line from the terminal and return it, using _prompt_ as a\nprompt.**\n\nIf prompt is NULL or the empty string, no prompt is issued. The line returned is\nallocated with `malloc`; the caller must free it when finished. The line\nreturned has the final newline removed, so only the text of the line remains.\n\n## Return Value\n\nreadline returns the text of the line read. A black line returns the empty\nstring. If EOF is encountered while reading a line, and the line is empty, NULL\nis returned. If an EOF is read with a non-empty line, it is treated as a\nnewline.\n\n## Initialization file\n\nReadline is customized by putting commands in an initialization file (the\n`inputrc` file). The name of this file is taken from the value of the INPUTRC\nenvironment variable. If that variable is unset, the default is `~/.inputrc`. If\nthat file does not exist or cannot be read, the ultimate default is\n`/etc/inputrc`.\n\nWhen a program which uses the readline library starts up, the init file is read,\nand the key bindings and variables are set.\n\nThere are only a few basic constructs allowed in the readline init file.\n\n1. Black lines are ignored.\n2. Lines beginning with a `#` are comments.\n3. Lines beginning with a `$` indicate conditional constructs.\n4. Other lines denote key bindings and variable settings.\n\nEach program using this library may add its own commands and bindings.\n\nFor example, placing\n\n```bash\nM-Control-u: universal-argment\n```\n\ninto the `inputrc` would make `M-C-u` execute the readline command\n`universal-argument`.\n\n# The difference of `help` and `man` on linux\n\n`help` displays information about builtin shell commands.\n\n`man` is s system-wide documentation system that provides short reference\nmanuals for individual commands, API functions, concepts, configuration file\nsyntax, file formats. It is the traditional Unix documentation system.\n\nWe can get the information of `cd` by `help cd`, but not by `man cd`. We can get\nthe information of `git/nvim/stty` by `man git/nvim/stty`, but not by\n`help git/nvim/stty`. `cd` is a shell command and `git/nvim/stty` is linux\nprojects.\n","slug":"Shorcut-on-Linux","published":1,"updated":"2022-04-12T07:02:48.821Z","_id":"cl0thb1i4000ngqulbodtej4b","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><p><em>Root in: I want to find out where the “kill shortcut”, ctrl C, defined. I use\n<code>bind -P</code> to check the shortcuts. However, do not find ctrl C. Thus, I learned\nsomething about the shortcuts on linux. ctrl C is a shortcut of stty. However,\n<code>bind -P</code> lists the shortcuts of readline.</em></p>\n<p>There may be two kinds of shortcuts, in practice,</p>\n<ul>\n<li>stty shortcuts</li>\n<li>readline shortcuts</li>\n</ul>\n<h1 id=\"stty-set-tty-set-teletypewriter\"><span class=\"post-title-index\">1. </span><a class=\"markdownIt-Anchor\" href=\"#stty-set-tty-set-teletypewriter\"></a> stty (set tty, set teletypewriter)</h1>\n<p>The difference between shell, terminal and tty</p>\n<p>tty: Print the file name of the terminal connected to standard input.</p>\n<p>stty: change or print terminal characteristics, change and print terminal line\nsettings.</p>\n<p>They are related to terminal.</p>\n<ul>\n<li>terminal = tty = text input/output environment</li>\n<li>console = physical terminal</li>\n<li>shell = command line interpreter</li>\n</ul>\n<p>The input of terminal or tty will used by readline, but not always readline.</p>\n<h1 id=\"gun-readline-get-a-line-from-a-user-with-editing\"><span class=\"post-title-index\">2. </span><a class=\"markdownIt-Anchor\" href=\"#gun-readline-get-a-line-from-a-user-with-editing\"></a> gun readline - get a line from a user with editing</h1>\n<h2 id=\"synopsis\"><span class=\"post-title-index\">2.1. </span><a class=\"markdownIt-Anchor\" href=\"#synopsis\"></a> Synopsis</h2>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;readline/readline.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;readline/history.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">readline</span> <span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *prompt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"description\"><span class=\"post-title-index\">2.2. </span><a class=\"markdownIt-Anchor\" href=\"#description\"></a> Description</h2>\n<p><strong>readline will read a line from the terminal and return it, using <em>prompt</em> as a\nprompt.</strong></p>\n<p>If prompt is NULL or the empty string, no prompt is issued. The line returned is\nallocated with <code>malloc</code>; the caller must free it when finished. The line\nreturned has the final newline removed, so only the text of the line remains.</p>\n<h2 id=\"return-value\"><span class=\"post-title-index\">2.3. </span><a class=\"markdownIt-Anchor\" href=\"#return-value\"></a> Return Value</h2>\n<p>readline returns the text of the line read. A black line returns the empty\nstring. If EOF is encountered while reading a line, and the line is empty, NULL\nis returned. If an EOF is read with a non-empty line, it is treated as a\nnewline.</p>\n<h2 id=\"initialization-file\"><span class=\"post-title-index\">2.4. </span><a class=\"markdownIt-Anchor\" href=\"#initialization-file\"></a> Initialization file</h2>\n<p>Readline is customized by putting commands in an initialization file (the\n<code>inputrc</code> file). The name of this file is taken from the value of the INPUTRC\nenvironment variable. If that variable is unset, the default is <code>~/.inputrc</code>. If\nthat file does not exist or cannot be read, the ultimate default is\n<code>/etc/inputrc</code>.</p>\n<p>When a program which uses the readline library starts up, the init file is read,\nand the key bindings and variables are set.</p>\n<p>There are only a few basic constructs allowed in the readline init file.</p>\n<ol>\n<li>Black lines are ignored.</li>\n<li>Lines beginning with a <code>#</code> are comments.</li>\n<li>Lines beginning with a <code>$</code> indicate conditional constructs.</li>\n<li>Other lines denote key bindings and variable settings.</li>\n</ol>\n<p>Each program using this library may add its own commands and bindings.</p>\n<p>For example, placing</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">M-Control-u: universal-argment</span><br></pre></td></tr></tbody></table></figure>\n<p>into the <code>inputrc</code> would make <code>M-C-u</code> execute the readline command\n<code>universal-argument</code>.</p>\n<h1 id=\"the-difference-of-help-and-man-on-linux\"><span class=\"post-title-index\">3. </span><a class=\"markdownIt-Anchor\" href=\"#the-difference-of-help-and-man-on-linux\"></a> The difference of <code>help</code> and <code>man</code> on linux</h1>\n<p><code>help</code> displays information about builtin shell commands.</p>\n<p><code>man</code> is s system-wide documentation system that provides short reference\nmanuals for individual commands, API functions, concepts, configuration file\nsyntax, file formats. It is the traditional Unix documentation system.</p>\n<p>We can get the information of <code>cd</code> by <code>help cd</code>, but not by <code>man cd</code>. We can get\nthe information of <code>git/nvim/stty</code> by <code>man git/nvim/stty</code>, but not by\n<code>help git/nvim/stty</code>. <code>cd</code> is a shell command and <code>git/nvim/stty</code> is linux\nprojects.</p>\n</body></html>","site":{"data":{}},"excerpt":"<html><head></head><body></body></html>","more":"<p><em>Root in: I want to find out where the “kill shortcut”, ctrl C, defined. I use\n<code>bind -P</code> to check the shortcuts. However, do not find ctrl C. Thus, I learned\nsomething about the shortcuts on linux. ctrl C is a shortcut of stty. However,\n<code>bind -P</code> lists the shortcuts of readline.</em></p>\n<p>There may be two kinds of shortcuts, in practice,</p>\n<ul>\n<li>stty shortcuts</li>\n<li>readline shortcuts</li>\n</ul>\n<h1 id=\"stty-set-tty-set-teletypewriter\"><a class=\"markdownIt-Anchor\" href=\"#stty-set-tty-set-teletypewriter\"></a> stty (set tty, set teletypewriter)</h1>\n<p>The difference between shell, terminal and tty</p>\n<p>tty: Print the file name of the terminal connected to standard input.</p>\n<p>stty: change or print terminal characteristics, change and print terminal line\nsettings.</p>\n<p>They are related to terminal.</p>\n<ul>\n<li>terminal = tty = text input/output environment</li>\n<li>console = physical terminal</li>\n<li>shell = command line interpreter</li>\n</ul>\n<p>The input of terminal or tty will used by readline, but not always readline.</p>\n<h1 id=\"gun-readline-get-a-line-from-a-user-with-editing\"><a class=\"markdownIt-Anchor\" href=\"#gun-readline-get-a-line-from-a-user-with-editing\"></a> gun readline - get a line from a user with editing</h1>\n<h2 id=\"synopsis\"><a class=\"markdownIt-Anchor\" href=\"#synopsis\"></a> Synopsis</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;readline/readline.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;readline/history.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">readline</span> <span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *prompt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"description\"><a class=\"markdownIt-Anchor\" href=\"#description\"></a> Description</h2>\n<p><strong>readline will read a line from the terminal and return it, using <em>prompt</em> as a\nprompt.</strong></p>\n<p>If prompt is NULL or the empty string, no prompt is issued. The line returned is\nallocated with <code>malloc</code>; the caller must free it when finished. The line\nreturned has the final newline removed, so only the text of the line remains.</p>\n<h2 id=\"return-value\"><a class=\"markdownIt-Anchor\" href=\"#return-value\"></a> Return Value</h2>\n<p>readline returns the text of the line read. A black line returns the empty\nstring. If EOF is encountered while reading a line, and the line is empty, NULL\nis returned. If an EOF is read with a non-empty line, it is treated as a\nnewline.</p>\n<h2 id=\"initialization-file\"><a class=\"markdownIt-Anchor\" href=\"#initialization-file\"></a> Initialization file</h2>\n<p>Readline is customized by putting commands in an initialization file (the\n<code>inputrc</code> file). The name of this file is taken from the value of the INPUTRC\nenvironment variable. If that variable is unset, the default is <code>~/.inputrc</code>. If\nthat file does not exist or cannot be read, the ultimate default is\n<code>/etc/inputrc</code>.</p>\n<p>When a program which uses the readline library starts up, the init file is read,\nand the key bindings and variables are set.</p>\n<p>There are only a few basic constructs allowed in the readline init file.</p>\n<ol>\n<li>Black lines are ignored.</li>\n<li>Lines beginning with a <code>#</code> are comments.</li>\n<li>Lines beginning with a <code>$</code> indicate conditional constructs.</li>\n<li>Other lines denote key bindings and variable settings.</li>\n</ol>\n<p>Each program using this library may add its own commands and bindings.</p>\n<p>For example, placing</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">M-Control-u: universal-argment</span><br></pre></td></tr></table></figure>\n<p>into the <code>inputrc</code> would make <code>M-C-u</code> execute the readline command\n<code>universal-argument</code>.</p>\n<h1 id=\"the-difference-of-help-and-man-on-linux\"><a class=\"markdownIt-Anchor\" href=\"#the-difference-of-help-and-man-on-linux\"></a> The difference of <code>help</code> and <code>man</code> on linux</h1>\n<p><code>help</code> displays information about builtin shell commands.</p>\n<p><code>man</code> is s system-wide documentation system that provides short reference\nmanuals for individual commands, API functions, concepts, configuration file\nsyntax, file formats. It is the traditional Unix documentation system.</p>\n<p>We can get the information of <code>cd</code> by <code>help cd</code>, but not by <code>man cd</code>. We can get\nthe information of <code>git/nvim/stty</code> by <code>man git/nvim/stty</code>, but not by\n<code>help git/nvim/stty</code>. <code>cd</code> is a shell command and <code>git/nvim/stty</code> is linux\nprojects.</p>\n"},{"title":"Tips in Papers","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-12-14T08:33:03.000Z","password":null,"summary":null,"description":"记录阅读论文过程中，新获取的信息。","_content":"\n# Attention\n\n## Hard and Soft Attention\n\n### Attention Mechanisms in CV: A Survey\n\n## Gumbel-Softmax Hard Attention\n\n### Categorical Reparameterization with Gumbel-Softmax\n\n#### 文章引出了一类神经网络，Stochastic Neural Networks with discrete random variables。\n\n具有离散随机变量的随机神经网络\n\n#### 文章引出了一个方向，Stochastic Gradient Estimation\n\n随机梯度估计，主要的方法就有 dumbel-softmax, score function estimator, biased\npath derivative estimator。\n\n> However, no existing gradient estimator has been formulated specifically for\n> categorical variables.\n\n## Reinforce Learnning Hard Attention\n\n### 2019 Scacader: Improving Accuracy of Hard Attention Models for Vision\n\n#### Hard Attention 选择相关的特征作为输入，是真正具有可解释性的。\n\n从下面第一段话，可以看出，hard attention 是真正和性能挂钩的。也一定和特征重要性\n是吻合的。但是 Soft Attention 不具有可解释性，小权重的特征并不一定不重\n要<div id=\"ap\"></div>\n\n> Our best models narrow the gap to common ImageNet baselines, achieving 75%\n> top-1 and 91% top-5 while attending to less than one-third of the image.We\n> further demonstrate that occluding the image patches prposed by the Saccader\n> model highly impairs classification, thus confirming these patches strong\n> relevance to the classification task.\n\n> Typical soft attention mechanisms rescale features at one or more stages of\n> the network. The soft mask used for rescaling often to provide some insight\n> into the model's decision-making process, but the model's final decision may\n> nonetheless rely on information provided by features with small weights \\[^1]\n\n\\[^1]:2018,Learn to pay attention.\n\n#### 文中 glimpse 的含义，可以理解成每一个位置，即每一个 patch，就是一个 glimpse。\n\n> Models that employ hard attention make decisions based on only a subset of\n> pixel in the input image, typically in the form of a series of glimpses.\n\n#### 文章提出了 Hard Attention 与双阶段目标检测算法的相似性。他们都是截取图像块作为输入，然后进行分类。不同的是，目标检测算法对于目标的位置是有标签的，而 Hard Attention 是无标签的。\n\n> Altough our aim in this work is to perform classification with only\n> image-level class labels, out approach bears some resembalance to two-stage\n> object detection models.\n\n> These models operate by generating many region proposals and then applying a\n> classification model to each proposal.\n\n> Unlike our work, these approaches use ground-truth bounding boxes to train the\n> classification model, and modern architectures also use bounding boxes to\n> supervise the proposal generator.\n\n**目标检测和 Hard Attention 的相似之处在于，他们都同时关注目标的位置和类别。相比\n于目标检测，Hard Attention 可以做的更精细, i.e., 它可以像目标检测一样在图像域上\n挑选特征，它还可以在任意一个特征域里挑选特征；它不仅可以像目标检测一样，挑选空域\n的特征，还可以挑选通道域的特征。**\n\n#### 总结构\n\n<img src=Saccader_Over.jpg width=80% height = 80%>\n\n最上面的 rep. net 以及 logits per location 之前都属于 representation network。这\n部分挺常规，但是使用了‘BagNet’\\[^2]的方法，该方法保持了输出特征图中每个像素的感\n受野大小。\n\n下面的 atten. net 就是几个卷积层的堆叠。没有 attention 机制。到 Sacadder cell 之\n前都是常规操作，除了一个 what 和 where 的 concat 得到 mixed。\n\nSaccader cell 是技术关键点。\n\n**coordinate at time t 的 slice 操作，对于坐标的选择而言，是一个不可导的操作。这\n里是强化学习介入的地方。而且注意，这里 t 是一个序列，最后的 prediction 是求平均\n。**\n\n\\[^2]:2019, Approximating CNNs with bag-of-local-features models works\nsurprisingly well on ImageNet.\n\n#### Saccader cell\n\n<img src=Saccader_Cell.jpg width=80% height = 80%>\n\n值得注意的几点\n\n1.  Cell state 是一个 state 的序列，每个 state 都是一个经过 2d softmax 的\n    logit。这个 logit 表示该 state 预测的位置。\n\n> This cell produces a sequence of locations. Elements in the sequence\n> correctpond to target locations.\n\n2.  需要保证 cell state 中预测之间都是不同的。$C^t$记录了 t 时刻位置探索过的所有\n    位置。那些位置的值是 1。所以$C^{t - 1}$两次介入$C^t$的计算都乘以一个非常小的\n    数$-10^5$ ，这样就保证了在 2d softmax 的时候，探索过的位置无法胜出。\n\n> The cell includes a 2D state ($C^t$) that keeps memory of the visited\n> locations until time t by placing 1 in the corresponding location in the cell\n> state. We use this state to prevent the network from returning to previously\n> seen locations.\n\n**从这里也看出 state 和 sequence 是不同的。state 是记录探索过的位置。从途中可以\n看出 state 是非 01 的，而由 1 可知，sequence 应该是图中右边产生 logic。state 的\n目的，其实也是为了产生 logic。**\n\n3.  在制作$C^t$的过程中，信息来源有两个 mixed feature 和$C^{t - 1}$。最后得到\n    的$C^t$通道是 1，所以 mixed feature 空间维度的压缩是必然的。在压缩的时候，选\n    用了 channel attention 机制。channel attention 机制又需要先空间压缩，这里不\n    像 SE-Net 一样直接压缩空间，而是又做了一个空间的 mask 压缩空间，这个 mask 用\n    了$C^{t - 1}$的信息，去除掉了已经探索的位置信息。\n\n4.  > At test time, the model extracts the logits at time $t$ from the\n    > representation network at location $argmax\\_{i,j}(\\hat{R}^t\\_{i,j})$.The\n    > final prediction is obtained by averaging the extracted logits across all\n    > times.\n\n**Saccader Cell 的关键就在于产生一系列的 sequence。这些 sequence 可以用强化学习\n算法优化，使其可以预测物体的位置，从而就进行了 feature 的选择。**\n\n#### 训练策略\n\n> The goal of our training is to learn a policy that predicts a sequence of\n> visual attentnion locations that is useful to the downsteam task (here image\n> classification) in absence of location labels.\n>\n> We performed a three step training procedure using only the training class\n> lables as supervision.\n\n![](Saccader_eq1.jpg)\n\n1.  预训练了 representation network\n\n这个公式增大了目标$y\\_{target}$的概率。增大的某个位置上$y\\_{target}$的概率，而且\n所有位置连乘之后的概率。这里假设 region of interest 的概率将会被增大的最多。通过\n这种方法就自动学习到了一些好的 position，在强化学习优化的时候，提供了一个好的探\n索的起点。\n\n> Key to Saccader is a pretraining step that require only class lables and\n> provides initial attention locations for policy gradient optimization.\n\n> Our pretraining procedure overcomes the sparse-reward problem that makes hard\n> attention models difficult to optimize. It requires access to only class\n> lables and prvides initial attention locations.These initial locations provide\n> better rewards for the policy gradient learning.\n\n![](Saccader_eq2.jpg)\n\n2.  训练了 location network (attention network, $1 \\times 1$ mixing convolution\n    and Sacader cell)\n\n这是一个自监督的预训练。提高了前 T = 12 次预测的点的概率。\n\n文中说排序了，我感觉排序的次序和预测的次序是一致的。第一次预测是概率最大的，最后\n一次预测是概率最小的。后面实验对比了该预训练对性能的影响。然而\n，<font color =deeppink>现在还并不能完全了解这个预训练的作用机制。 </font>\n\n![](Saccader_eq3.jpg)\n\n3.  > we trained the whole model to maximize the expected reward, where the\n    > reward ($r \\in {0, 1}$) represents whether the model final prediction\n    > after 6 glimpses (T = 6) is correct.\n\n<font color=deeppink>这个公式并没有完全读懂。</font>\n\n用的是策略网络的方法。$l^t_s$是按 saccader cell 输出的位置概率生成的位置。公式的\n第一行就是增大这个概率的值。当模型最后做出了正确预测的时候，r 权重大，损失函数以\n更大的权重增大这个预测的概率，这就是策略网络的方法。等式的第二行是修正分类网络，\n当预测正确的时候，那么有监督的增大这 T 个预测位置在$y\\_{target}$上的准确率\n。<div id=\"空间\"></div>\n\n**由公式 1 和公式 3 看出，对于图像空间，loss 函数只是增大预测点$y\\_{target}$的概\n率，然后不会理会，空间上其他点预测的是什么。**\n\n如果 saccader cell 的性能非常好，那么模型是没问题的。如果 saccader cell 预测会有\n误差，比如抗干扰能力不好，预测到目标以外的 patch 上，那么性能会被影响。\n\n**论文中说\n，[当预测的位置不存在的时候，模型的性能受到很大的影响。那么其实抑制预测之外的位置的，激活值会使得可以解释性更强？](#ap)**\n\n#### 论文对比了 ordered logits policy 和 Saccader\n\n> An ordered logits policy uses the BagNet model to pick the top K locations\n> based on the largest class logits.\n\nOrdered logits policy 选择了在空间上最大激活的位置，作为物体的位置，并把该预测作\n为物体类别的预测。\n\n> The ordered logits policy strats off with accuracy much higher than a random\n> policy, suggesting that the patches it initially picks are meaningful to\n> classification.\n>\n> However, accuracy is still lower than the learned Saccader model, and\n> **performacne improves only slowly with additional glimpese. The ordered\n> logits policy is able to capture some of the features relevant to\n> classification, but it is a greedy policy that produces glimpses that cluster\n> around a few top features (i.e., with low image coverage)**\n\nordered logits policy 的缺陷在于，只关注了最重要的少数的特征。它的预测都围绕在这\n些最重要的特征周围，所以增加 glimpese 的时候，很少新的信息引入，所以 performance\n增长的很慢，而 Saccader 没有这个问题，它关注了完整的信息。\n\n#### 空间上其他位置\n\n如[上文所说](#空间)，Sccader 只优化选中的位置，不管没有被选中的位置。那么当增加\nglimplese 的时候，它的性能应该会受到影响的。但是不是。\n\n> In fact, increasing the number of glimpses beyond the number used for DRAM\n> policy training leads to drop in performane, ulike the Saccader model that\n> generalizes to greater umbers of glimpses.\n\n<img src=Saccader_gl.jpg width=50% height = 50%>\n\n如图可以看出，增大 glimpses 的时候，准确率反而在增加。说明在训练的时候，没有被训\n练到的地方，Saccader 的预测也还可以，与[上文所说](#空间)的理解不同\n。<font color=deeppink>原因是什么还有待探究。</font>\n\n### Hard Attention for Scalable Image Classification\n\n#### 介绍\n\n<img src=Tnet_over.jpg width=50% height = 50%>\n\n> Muti-scale processing in the proposed TNet architecture. Starting from level\n> 1, the image is processed in low resolution to get a coarse description of its\n> content (red cube). Extracted features are used for (hard) selection of image\n> regions worth processing in higher resolution. The process is repeated\n> recursively (here to 2 additional levels). Features from all levels are\n> combined (arrows on the right) to create the final image representation used\n> for classificaiton (blue cube).\n\n先粗后细的粗粒不同尺度的图像，这篇文章使用和实现了 Saccader\n\n## Soft Attention\n\n### NAM, Normalization-based Attention Module\n\n#### 利用网络参数的信息，进一步处理数据（再利用）\n\n> Those methods successfully exploit the mutual information from different\n> dimensions of feawture. However, they lack consideration on the contributing\n> factors of weights, which is capable of furthr suppressing the insignificant\n> channels or pixels.\n\n网络参数本身是表达了一定的信息的，比如某个卷积核提取什么样的信息，本身也代表一种\n信息。神经网络中，每个参数都在图像的处理过程中使用一次，然而，**一次是否就已经用\n完了该参数的信息。它是否还有其他价值？**\n\n文章重复利用了 bn 层中的权重，文章任务 bn 层的权重可以表达特征图的重要程度。然而\nattention 正好又需要特征图的重要程度。所以文章在 attention 中利用了 bn 层的权重\n。**使得 bn 的权重出现重复利用的现象。**\n\n$$\n\\begin{aligned}\natt &= norm(x) \\\\\natt &= att \\times \\gamma + \\delta \\\\\natt &= att \\times \\frac\\gamma{sum(\\gamma)} \\\\\nout &= att.sigmoid() \\times x\n\\end{aligned}\n$$\n\n```python\nclass Channel_Att(nn.Module):\n    def __init__(self, channels, t=16):\n        super(Channel_Att, self).__init__()\n        self.channels = channels\n        self.bn2 = nn.BatchNorm2d(self.channels, affine=True)\n    def forward(self, x):\n        residual = x\n        x = self.bn2(x)\n        weight_bn = self.bn2.weight.data.abs() / torch.sum(self.bn2.weight.data.abs())\n        x = x.permute(0, 2, 3, 1).contiguous()\n        x = torch.mul(weight_bn, x)\n        x = x.permute(0, 3, 1, 2).contiguous()\n        x = torch.sigmoid(x) * residual\n        return x\n```\n\n#### 关于权重稀疏性\n\n> It applies a weightsparsity penalty to the attention modules, thus, making\n> them more computational efficient while retaining similar performance.\n>\n> To suppress the less salient weights, we add a regularization term into the\n> loss function.\n\n$$Loss = \\sum_{(x,y)}l(f(x, W), y) + p\\sum g(\\gamma) + p \\sum g(\\lambda)$$\n\n第一项是正常的损失函数，第二项和第三项的$g（）$是一范数，$\\gamma$是通道注意力中\nbn 的权重，$\\lambda$是空间注意力中 pix normalization 的权重。加上这两项使得通道\n和空间注意力都有了稀疏性。\n\n<font color=deeppink>loss 函数增加了权重的稀疏性，attention 把权重的稀疏性转换为\n了特征的稀疏性，然而这个稀疏性并不是丢弃了特征或者权重，为什么它能够带来\ncomputational efficient? 文章确实有 computational efficient，但是根据实验部分的\n列表，parameter 和 FLOPS 的优势都是这个注意力机制的结构带来的，相比于其他注意力\n机制，它是轻量而且计算低的。但是稀疏性和计算复杂度是无关的。</font>\n\n#### 启发\n\n<font color=deeppink>这篇文章给人一个启发是参数复用，神经网络中所有参数几乎不会\n复用。然而，除了文中提出的这个例子，是否还存在其他需要复用的场景或者理由\n。</font>\n\n<font color=deeppink>参数复用可以看成另一种权值共享，卷积是层内的权值共享，参数\n复用是层间的权值共享，它是一种正则化，它对不变性产生什么影响？</font>\n\n# Regularization\n\n## ADCM: Attentnion Dropout Convolutional Module\n\n![ADCM](ADCM.jpg)\n\n在 CBAM 的基础上加入了正则化，把 CBAM 产生的 attention weights 作为 Drop 的概率\n引导，来对 feature map 进行 drop。是一种对 attention 机制的正则化方法，很容以把\n它误解为 hard attention。\n","source":"_posts/Tips-in-Papers.md","raw":"---\ntitle: Tips in Papers\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-12-14 16:33:03\npassword:\nsummary:\ndescription: 记录阅读论文过程中，新获取的信息。\ncategories:\n  - Machine Learning\n  - About Papers\n\ntags:\n  - Papers\n  - Personal Thought\n---\n\n# Attention\n\n## Hard and Soft Attention\n\n### Attention Mechanisms in CV: A Survey\n\n## Gumbel-Softmax Hard Attention\n\n### Categorical Reparameterization with Gumbel-Softmax\n\n#### 文章引出了一类神经网络，Stochastic Neural Networks with discrete random variables。\n\n具有离散随机变量的随机神经网络\n\n#### 文章引出了一个方向，Stochastic Gradient Estimation\n\n随机梯度估计，主要的方法就有 dumbel-softmax, score function estimator, biased\npath derivative estimator。\n\n> However, no existing gradient estimator has been formulated specifically for\n> categorical variables.\n\n## Reinforce Learnning Hard Attention\n\n### 2019 Scacader: Improving Accuracy of Hard Attention Models for Vision\n\n#### Hard Attention 选择相关的特征作为输入，是真正具有可解释性的。\n\n从下面第一段话，可以看出，hard attention 是真正和性能挂钩的。也一定和特征重要性\n是吻合的。但是 Soft Attention 不具有可解释性，小权重的特征并不一定不重\n要<div id=\"ap\"></div>\n\n> Our best models narrow the gap to common ImageNet baselines, achieving 75%\n> top-1 and 91% top-5 while attending to less than one-third of the image.We\n> further demonstrate that occluding the image patches prposed by the Saccader\n> model highly impairs classification, thus confirming these patches strong\n> relevance to the classification task.\n\n> Typical soft attention mechanisms rescale features at one or more stages of\n> the network. The soft mask used for rescaling often to provide some insight\n> into the model's decision-making process, but the model's final decision may\n> nonetheless rely on information provided by features with small weights \\[^1]\n\n\\[^1]:2018,Learn to pay attention.\n\n#### 文中 glimpse 的含义，可以理解成每一个位置，即每一个 patch，就是一个 glimpse。\n\n> Models that employ hard attention make decisions based on only a subset of\n> pixel in the input image, typically in the form of a series of glimpses.\n\n#### 文章提出了 Hard Attention 与双阶段目标检测算法的相似性。他们都是截取图像块作为输入，然后进行分类。不同的是，目标检测算法对于目标的位置是有标签的，而 Hard Attention 是无标签的。\n\n> Altough our aim in this work is to perform classification with only\n> image-level class labels, out approach bears some resembalance to two-stage\n> object detection models.\n\n> These models operate by generating many region proposals and then applying a\n> classification model to each proposal.\n\n> Unlike our work, these approaches use ground-truth bounding boxes to train the\n> classification model, and modern architectures also use bounding boxes to\n> supervise the proposal generator.\n\n**目标检测和 Hard Attention 的相似之处在于，他们都同时关注目标的位置和类别。相比\n于目标检测，Hard Attention 可以做的更精细, i.e., 它可以像目标检测一样在图像域上\n挑选特征，它还可以在任意一个特征域里挑选特征；它不仅可以像目标检测一样，挑选空域\n的特征，还可以挑选通道域的特征。**\n\n#### 总结构\n\n<img src=Saccader_Over.jpg width=80% height = 80%>\n\n最上面的 rep. net 以及 logits per location 之前都属于 representation network。这\n部分挺常规，但是使用了‘BagNet’\\[^2]的方法，该方法保持了输出特征图中每个像素的感\n受野大小。\n\n下面的 atten. net 就是几个卷积层的堆叠。没有 attention 机制。到 Sacadder cell 之\n前都是常规操作，除了一个 what 和 where 的 concat 得到 mixed。\n\nSaccader cell 是技术关键点。\n\n**coordinate at time t 的 slice 操作，对于坐标的选择而言，是一个不可导的操作。这\n里是强化学习介入的地方。而且注意，这里 t 是一个序列，最后的 prediction 是求平均\n。**\n\n\\[^2]:2019, Approximating CNNs with bag-of-local-features models works\nsurprisingly well on ImageNet.\n\n#### Saccader cell\n\n<img src=Saccader_Cell.jpg width=80% height = 80%>\n\n值得注意的几点\n\n1.  Cell state 是一个 state 的序列，每个 state 都是一个经过 2d softmax 的\n    logit。这个 logit 表示该 state 预测的位置。\n\n> This cell produces a sequence of locations. Elements in the sequence\n> correctpond to target locations.\n\n2.  需要保证 cell state 中预测之间都是不同的。$C^t$记录了 t 时刻位置探索过的所有\n    位置。那些位置的值是 1。所以$C^{t - 1}$两次介入$C^t$的计算都乘以一个非常小的\n    数$-10^5$ ，这样就保证了在 2d softmax 的时候，探索过的位置无法胜出。\n\n> The cell includes a 2D state ($C^t$) that keeps memory of the visited\n> locations until time t by placing 1 in the corresponding location in the cell\n> state. We use this state to prevent the network from returning to previously\n> seen locations.\n\n**从这里也看出 state 和 sequence 是不同的。state 是记录探索过的位置。从途中可以\n看出 state 是非 01 的，而由 1 可知，sequence 应该是图中右边产生 logic。state 的\n目的，其实也是为了产生 logic。**\n\n3.  在制作$C^t$的过程中，信息来源有两个 mixed feature 和$C^{t - 1}$。最后得到\n    的$C^t$通道是 1，所以 mixed feature 空间维度的压缩是必然的。在压缩的时候，选\n    用了 channel attention 机制。channel attention 机制又需要先空间压缩，这里不\n    像 SE-Net 一样直接压缩空间，而是又做了一个空间的 mask 压缩空间，这个 mask 用\n    了$C^{t - 1}$的信息，去除掉了已经探索的位置信息。\n\n4.  > At test time, the model extracts the logits at time $t$ from the\n    > representation network at location $argmax\\_{i,j}(\\hat{R}^t\\_{i,j})$.The\n    > final prediction is obtained by averaging the extracted logits across all\n    > times.\n\n**Saccader Cell 的关键就在于产生一系列的 sequence。这些 sequence 可以用强化学习\n算法优化，使其可以预测物体的位置，从而就进行了 feature 的选择。**\n\n#### 训练策略\n\n> The goal of our training is to learn a policy that predicts a sequence of\n> visual attentnion locations that is useful to the downsteam task (here image\n> classification) in absence of location labels.\n>\n> We performed a three step training procedure using only the training class\n> lables as supervision.\n\n![](Saccader_eq1.jpg)\n\n1.  预训练了 representation network\n\n这个公式增大了目标$y\\_{target}$的概率。增大的某个位置上$y\\_{target}$的概率，而且\n所有位置连乘之后的概率。这里假设 region of interest 的概率将会被增大的最多。通过\n这种方法就自动学习到了一些好的 position，在强化学习优化的时候，提供了一个好的探\n索的起点。\n\n> Key to Saccader is a pretraining step that require only class lables and\n> provides initial attention locations for policy gradient optimization.\n\n> Our pretraining procedure overcomes the sparse-reward problem that makes hard\n> attention models difficult to optimize. It requires access to only class\n> lables and prvides initial attention locations.These initial locations provide\n> better rewards for the policy gradient learning.\n\n![](Saccader_eq2.jpg)\n\n2.  训练了 location network (attention network, $1 \\times 1$ mixing convolution\n    and Sacader cell)\n\n这是一个自监督的预训练。提高了前 T = 12 次预测的点的概率。\n\n文中说排序了，我感觉排序的次序和预测的次序是一致的。第一次预测是概率最大的，最后\n一次预测是概率最小的。后面实验对比了该预训练对性能的影响。然而\n，<font color =deeppink>现在还并不能完全了解这个预训练的作用机制。 </font>\n\n![](Saccader_eq3.jpg)\n\n3.  > we trained the whole model to maximize the expected reward, where the\n    > reward ($r \\in {0, 1}$) represents whether the model final prediction\n    > after 6 glimpses (T = 6) is correct.\n\n<font color=deeppink>这个公式并没有完全读懂。</font>\n\n用的是策略网络的方法。$l^t_s$是按 saccader cell 输出的位置概率生成的位置。公式的\n第一行就是增大这个概率的值。当模型最后做出了正确预测的时候，r 权重大，损失函数以\n更大的权重增大这个预测的概率，这就是策略网络的方法。等式的第二行是修正分类网络，\n当预测正确的时候，那么有监督的增大这 T 个预测位置在$y\\_{target}$上的准确率\n。<div id=\"空间\"></div>\n\n**由公式 1 和公式 3 看出，对于图像空间，loss 函数只是增大预测点$y\\_{target}$的概\n率，然后不会理会，空间上其他点预测的是什么。**\n\n如果 saccader cell 的性能非常好，那么模型是没问题的。如果 saccader cell 预测会有\n误差，比如抗干扰能力不好，预测到目标以外的 patch 上，那么性能会被影响。\n\n**论文中说\n，[当预测的位置不存在的时候，模型的性能受到很大的影响。那么其实抑制预测之外的位置的，激活值会使得可以解释性更强？](#ap)**\n\n#### 论文对比了 ordered logits policy 和 Saccader\n\n> An ordered logits policy uses the BagNet model to pick the top K locations\n> based on the largest class logits.\n\nOrdered logits policy 选择了在空间上最大激活的位置，作为物体的位置，并把该预测作\n为物体类别的预测。\n\n> The ordered logits policy strats off with accuracy much higher than a random\n> policy, suggesting that the patches it initially picks are meaningful to\n> classification.\n>\n> However, accuracy is still lower than the learned Saccader model, and\n> **performacne improves only slowly with additional glimpese. The ordered\n> logits policy is able to capture some of the features relevant to\n> classification, but it is a greedy policy that produces glimpses that cluster\n> around a few top features (i.e., with low image coverage)**\n\nordered logits policy 的缺陷在于，只关注了最重要的少数的特征。它的预测都围绕在这\n些最重要的特征周围，所以增加 glimpese 的时候，很少新的信息引入，所以 performance\n增长的很慢，而 Saccader 没有这个问题，它关注了完整的信息。\n\n#### 空间上其他位置\n\n如[上文所说](#空间)，Sccader 只优化选中的位置，不管没有被选中的位置。那么当增加\nglimplese 的时候，它的性能应该会受到影响的。但是不是。\n\n> In fact, increasing the number of glimpses beyond the number used for DRAM\n> policy training leads to drop in performane, ulike the Saccader model that\n> generalizes to greater umbers of glimpses.\n\n<img src=Saccader_gl.jpg width=50% height = 50%>\n\n如图可以看出，增大 glimpses 的时候，准确率反而在增加。说明在训练的时候，没有被训\n练到的地方，Saccader 的预测也还可以，与[上文所说](#空间)的理解不同\n。<font color=deeppink>原因是什么还有待探究。</font>\n\n### Hard Attention for Scalable Image Classification\n\n#### 介绍\n\n<img src=Tnet_over.jpg width=50% height = 50%>\n\n> Muti-scale processing in the proposed TNet architecture. Starting from level\n> 1, the image is processed in low resolution to get a coarse description of its\n> content (red cube). Extracted features are used for (hard) selection of image\n> regions worth processing in higher resolution. The process is repeated\n> recursively (here to 2 additional levels). Features from all levels are\n> combined (arrows on the right) to create the final image representation used\n> for classificaiton (blue cube).\n\n先粗后细的粗粒不同尺度的图像，这篇文章使用和实现了 Saccader\n\n## Soft Attention\n\n### NAM, Normalization-based Attention Module\n\n#### 利用网络参数的信息，进一步处理数据（再利用）\n\n> Those methods successfully exploit the mutual information from different\n> dimensions of feawture. However, they lack consideration on the contributing\n> factors of weights, which is capable of furthr suppressing the insignificant\n> channels or pixels.\n\n网络参数本身是表达了一定的信息的，比如某个卷积核提取什么样的信息，本身也代表一种\n信息。神经网络中，每个参数都在图像的处理过程中使用一次，然而，**一次是否就已经用\n完了该参数的信息。它是否还有其他价值？**\n\n文章重复利用了 bn 层中的权重，文章任务 bn 层的权重可以表达特征图的重要程度。然而\nattention 正好又需要特征图的重要程度。所以文章在 attention 中利用了 bn 层的权重\n。**使得 bn 的权重出现重复利用的现象。**\n\n$$\n\\begin{aligned}\natt &= norm(x) \\\\\natt &= att \\times \\gamma + \\delta \\\\\natt &= att \\times \\frac\\gamma{sum(\\gamma)} \\\\\nout &= att.sigmoid() \\times x\n\\end{aligned}\n$$\n\n```python\nclass Channel_Att(nn.Module):\n    def __init__(self, channels, t=16):\n        super(Channel_Att, self).__init__()\n        self.channels = channels\n        self.bn2 = nn.BatchNorm2d(self.channels, affine=True)\n    def forward(self, x):\n        residual = x\n        x = self.bn2(x)\n        weight_bn = self.bn2.weight.data.abs() / torch.sum(self.bn2.weight.data.abs())\n        x = x.permute(0, 2, 3, 1).contiguous()\n        x = torch.mul(weight_bn, x)\n        x = x.permute(0, 3, 1, 2).contiguous()\n        x = torch.sigmoid(x) * residual\n        return x\n```\n\n#### 关于权重稀疏性\n\n> It applies a weightsparsity penalty to the attention modules, thus, making\n> them more computational efficient while retaining similar performance.\n>\n> To suppress the less salient weights, we add a regularization term into the\n> loss function.\n\n$$Loss = \\sum_{(x,y)}l(f(x, W), y) + p\\sum g(\\gamma) + p \\sum g(\\lambda)$$\n\n第一项是正常的损失函数，第二项和第三项的$g（）$是一范数，$\\gamma$是通道注意力中\nbn 的权重，$\\lambda$是空间注意力中 pix normalization 的权重。加上这两项使得通道\n和空间注意力都有了稀疏性。\n\n<font color=deeppink>loss 函数增加了权重的稀疏性，attention 把权重的稀疏性转换为\n了特征的稀疏性，然而这个稀疏性并不是丢弃了特征或者权重，为什么它能够带来\ncomputational efficient? 文章确实有 computational efficient，但是根据实验部分的\n列表，parameter 和 FLOPS 的优势都是这个注意力机制的结构带来的，相比于其他注意力\n机制，它是轻量而且计算低的。但是稀疏性和计算复杂度是无关的。</font>\n\n#### 启发\n\n<font color=deeppink>这篇文章给人一个启发是参数复用，神经网络中所有参数几乎不会\n复用。然而，除了文中提出的这个例子，是否还存在其他需要复用的场景或者理由\n。</font>\n\n<font color=deeppink>参数复用可以看成另一种权值共享，卷积是层内的权值共享，参数\n复用是层间的权值共享，它是一种正则化，它对不变性产生什么影响？</font>\n\n# Regularization\n\n## ADCM: Attentnion Dropout Convolutional Module\n\n![ADCM](ADCM.jpg)\n\n在 CBAM 的基础上加入了正则化，把 CBAM 产生的 attention weights 作为 Drop 的概率\n引导，来对 feature map 进行 drop。是一种对 attention 机制的正则化方法，很容以把\n它误解为 hard attention。\n","slug":"Tips-in-Papers","published":1,"updated":"2022-04-12T07:46:40.742Z","_id":"cl0thb1i5000pgqul21aoc3us","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><h1 id=\"attention\"><span class=\"post-title-index\">1. </span><a class=\"markdownIt-Anchor\" href=\"#attention\"></a> Attention</h1>\n<h2 id=\"hard-and-soft-attention\"><span class=\"post-title-index\">1.1. </span><a class=\"markdownIt-Anchor\" href=\"#hard-and-soft-attention\"></a> Hard and Soft Attention</h2>\n<h3 id=\"attention-mechanisms-in-cv-a-survey\"><span class=\"post-title-index\">1.1.1. </span><a class=\"markdownIt-Anchor\" href=\"#attention-mechanisms-in-cv-a-survey\"></a> Attention Mechanisms in CV: A Survey</h3>\n<h2 id=\"gumbel-softmax-hard-attention\"><span class=\"post-title-index\">1.2. </span><a class=\"markdownIt-Anchor\" href=\"#gumbel-softmax-hard-attention\"></a> Gumbel-Softmax Hard Attention</h2>\n<h3 id=\"categorical-reparameterization-with-gumbel-softmax\"><span class=\"post-title-index\">1.2.1. </span><a class=\"markdownIt-Anchor\" href=\"#categorical-reparameterization-with-gumbel-softmax\"></a> Categorical Reparameterization with Gumbel-Softmax</h3>\n<h4 id=\"文章引出了一类神经网络stochastic-neural-networks-with-discrete-random-variables\"><span class=\"post-title-index\">1.2.1.1. </span><a class=\"markdownIt-Anchor\" href=\"#文章引出了一类神经网络stochastic-neural-networks-with-discrete-random-variables\"></a> 文章引出了一类神经网络，Stochastic Neural Networks with discrete random variables。</h4>\n<p>具有离散随机变量的随机神经网络</p>\n<h4 id=\"文章引出了一个方向stochastic-gradient-estimation\"><span class=\"post-title-index\">1.2.1.2. </span><a class=\"markdownIt-Anchor\" href=\"#文章引出了一个方向stochastic-gradient-estimation\"></a> 文章引出了一个方向，Stochastic Gradient Estimation</h4>\n<p>随机梯度估计，主要的方法就有 dumbel-softmax, score function estimator, biased\npath derivative estimator。</p>\n<blockquote>\n<p>However, no existing gradient estimator has been formulated specifically for\ncategorical variables.</p>\n</blockquote>\n<h2 id=\"reinforce-learnning-hard-attention\"><span class=\"post-title-index\">1.3. </span><a class=\"markdownIt-Anchor\" href=\"#reinforce-learnning-hard-attention\"></a> Reinforce Learnning Hard Attention</h2>\n<h3 id=\"2019-scacader-improving-accuracy-of-hard-attention-models-for-vision\"><span class=\"post-title-index\">1.3.1. </span><a class=\"markdownIt-Anchor\" href=\"#2019-scacader-improving-accuracy-of-hard-attention-models-for-vision\"></a> 2019 Scacader: Improving Accuracy of Hard Attention Models for Vision</h3>\n<h4 id=\"hard-attention-选择相关的特征作为输入是真正具有可解释性的\"><span class=\"post-title-index\">1.3.1.1. </span><a class=\"markdownIt-Anchor\" href=\"#hard-attention-选择相关的特征作为输入是真正具有可解释性的\"></a> Hard Attention 选择相关的特征作为输入，是真正具有可解释性的。</h4>\n<p>从下面第一段话，可以看出，hard attention 是真正和性能挂钩的。也一定和特征重要性\n是吻合的。但是 Soft Attention 不具有可解释性，小权重的特征并不一定不重\n要</p><div id=\"ap\"></div><p></p>\n<blockquote>\n<p>Our best models narrow the gap to common ImageNet baselines, achieving 75%\ntop-1 and 91% top-5 while attending to less than one-third of the image.We\nfurther demonstrate that occluding the image patches prposed by the Saccader\nmodel highly impairs classification, thus confirming these patches strong\nrelevance to the classification task.</p>\n</blockquote>\n<blockquote>\n<p>Typical soft attention mechanisms rescale features at one or more stages of\nthe network. The soft mask used for rescaling often to provide some insight\ninto the model’s decision-making process, but the model’s final decision may\nnonetheless rely on information provided by features with small weights &lt;sup id=“fnref:1”&gt;<a href=\"#fn:1\" rel=\"footnote\">1</a></p>\n</blockquote>\n<p>\\</p>\n<h4 id=\"文中-glimpse-的含义可以理解成每一个位置即每一个-patch就是一个-glimpse\"><span class=\"post-title-index\">1.3.1.2. </span><a class=\"markdownIt-Anchor\" href=\"#文中-glimpse-的含义可以理解成每一个位置即每一个-patch就是一个-glimpse\"></a> 文中 glimpse 的含义，可以理解成每一个位置，即每一个 patch，就是一个 glimpse。</h4>\n<blockquote>\n<p>Models that employ hard attention make decisions based on only a subset of\npixel in the input image, typically in the form of a series of glimpses.</p>\n</blockquote>\n<h4 id=\"文章提出了-hard-attention-与双阶段目标检测算法的相似性-他们都是截取图像块作为输入然后进行分类-不同的是目标检测算法对于目标的位置是有标签的而-hard-attention-是无标签的\"><span class=\"post-title-index\">1.3.1.3. </span><a class=\"markdownIt-Anchor\" href=\"#文章提出了-hard-attention-与双阶段目标检测算法的相似性-他们都是截取图像块作为输入然后进行分类-不同的是目标检测算法对于目标的位置是有标签的而-hard-attention-是无标签的\"></a> 文章提出了 Hard Attention 与双阶段目标检测算法的相似性。他们都是截取图像块作为输入，然后进行分类。不同的是，目标检测算法对于目标的位置是有标签的，而 Hard Attention 是无标签的。</h4>\n<blockquote>\n<p>Altough our aim in this work is to perform classification with only\nimage-level class labels, out approach bears some resembalance to two-stage\nobject detection models.</p>\n</blockquote>\n<blockquote>\n<p>These models operate by generating many region proposals and then applying a\nclassification model to each proposal.</p>\n</blockquote>\n<blockquote>\n<p>Unlike our work, these approaches use ground-truth bounding boxes to train the\nclassification model, and modern architectures also use bounding boxes to\nsupervise the proposal generator.</p>\n</blockquote>\n<p><strong>目标检测和 Hard Attention 的相似之处在于，他们都同时关注目标的位置和类别。相比\n于目标检测，Hard Attention 可以做的更精细, i.e., 它可以像目标检测一样在图像域上\n挑选特征，它还可以在任意一个特征域里挑选特征；它不仅可以像目标检测一样，挑选空域\n的特征，还可以挑选通道域的特征。</strong></p>\n<h4 id=\"总结构\"><span class=\"post-title-index\">1.3.1.4. </span><a class=\"markdownIt-Anchor\" href=\"#总结构\"></a> 总结构</h4>\n<img src=\"Saccader_Over.jpg\" width=\"80%\" height=\"80%\">\n<p>最上面的 rep. net 以及 logits per location 之前都属于 representation network。这\n部分挺常规，但是使用了‘BagNet’&lt;sup id=“fnref:2”&gt;<a href=\"#fn:2\" rel=\"footnote\">2</a>的方法，该方法保持了输出特征图中每个像素的感\n受野大小。</p>\n<p>下面的 atten. net 就是几个卷积层的堆叠。没有 attention 机制。到 Sacadder cell 之\n前都是常规操作，除了一个 what 和 where 的 concat 得到 mixed。</p>\n<p>Saccader cell 是技术关键点。</p>\n<p><strong>coordinate at time t 的 slice 操作，对于坐标的选择而言，是一个不可导的操作。这\n里是强化学习介入的地方。而且注意，这里 t 是一个序列，最后的 prediction 是求平均\n。</strong></p>\n<p>\\</p>\n<h4 id=\"saccader-cell\"><span class=\"post-title-index\">1.3.1.5. </span><a class=\"markdownIt-Anchor\" href=\"#saccader-cell\"></a> Saccader cell</h4>\n<img src=\"Saccader_Cell.jpg\" width=\"80%\" height=\"80%\">\n<p>值得注意的几点</p>\n<ol>\n<li>Cell state 是一个 state 的序列，每个 state 都是一个经过 2d softmax 的\nlogit。这个 logit 表示该 state 预测的位置。</li>\n</ol>\n<blockquote>\n<p>This cell produces a sequence of locations. Elements in the sequence\ncorrectpond to target locations.</p>\n</blockquote>\n<ol start=\"2\">\n<li>需要保证 cell state 中预测之间都是不同的。<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>C</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7935559999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span></span></span></span>记录了 t 时刻位置探索过的所有\n位置。那些位置的值是 1。所以<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>C</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">C^{t - 1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>两次介入<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>C</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7935559999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span></span></span></span>的计算都乘以一个非常小的\n数<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">-10^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span> ，这样就保证了在 2d softmax 的时候，探索过的位置无法胜出。</li>\n</ol>\n<blockquote>\n<p>The cell includes a 2D state (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>C</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7935559999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span></span></span></span>) that keeps memory of the visited\nlocations until time t by placing 1 in the corresponding location in the cell\nstate. We use this state to prevent the network from returning to previously\nseen locations.</p>\n</blockquote>\n<p><strong>从这里也看出 state 和 sequence 是不同的。state 是记录探索过的位置。从途中可以\n看出 state 是非 01 的，而由 1 可知，sequence 应该是图中右边产生 logic。state 的\n目的，其实也是为了产生 logic。</strong></p>\n<ol start=\"3\">\n<li>\n<p>在制作<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>C</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7935559999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span></span></span></span>的过程中，信息来源有两个 mixed feature 和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>C</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">C^{t - 1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>。最后得到\n的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>C</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7935559999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span></span></span></span>通道是 1，所以 mixed feature 空间维度的压缩是必然的。在压缩的时候，选\n用了 channel attention 机制。channel attention 机制又需要先空间压缩，这里不\n像 SE-Net 一样直接压缩空间，而是又做了一个空间的 mask 压缩空间，这个 mask 用\n了<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>C</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">C^{t - 1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>的信息，去除掉了已经探索的位置信息。</p>\n</li>\n<li>\n<blockquote>\n<p>At test time, the model extracts the logits at time <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span> from the\nrepresentation network at location <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mi>r</mi><mi>g</mi><mi>m</mi><mi>a</mi><mi>x</mi><mi mathvariant=\"normal\">_</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow><mo stretchy=\"false\">(</mo><msup><mover accent=\"true\"><mi>R</mi><mo>^</mo></mover><mi>t</mi></msup><mi mathvariant=\"normal\">_</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">argmax\\_{i,j}(\\hat{R}^t\\_{i,j})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.25677em;vertical-align:-0.31em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9467699999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\">^</span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span></span><span class=\"mclose\">)</span></span></span></span>.The\nfinal prediction is obtained by averaging the extracted logits across all\ntimes.</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>Saccader Cell 的关键就在于产生一系列的 sequence。这些 sequence 可以用强化学习\n算法优化，使其可以预测物体的位置，从而就进行了 feature 的选择。</strong></p>\n<h4 id=\"训练策略\"><span class=\"post-title-index\">1.3.1.6. </span><a class=\"markdownIt-Anchor\" href=\"#训练策略\"></a> 训练策略</h4>\n<blockquote>\n<p>The goal of our training is to learn a policy that predicts a sequence of\nvisual attentnion locations that is useful to the downsteam task (here image\nclassification) in absence of location labels.</p>\n<p>We performed a three step training procedure using only the training class\nlables as supervision.</p>\n</blockquote>\n<p><img src=\"Saccader_eq1.jpg\" alt=\"\"></p>\n<ol>\n<li>预训练了 representation network</li>\n</ol>\n<p>这个公式增大了目标<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mi mathvariant=\"normal\">_</mi><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">y\\_{target}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9250799999999999em;vertical-align:-0.31em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span></span></span></span></span>的概率。增大的某个位置上<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mi mathvariant=\"normal\">_</mi><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">y\\_{target}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9250799999999999em;vertical-align:-0.31em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span></span></span></span></span>的概率，而且\n所有位置连乘之后的概率。这里假设 region of interest 的概率将会被增大的最多。通过\n这种方法就自动学习到了一些好的 position，在强化学习优化的时候，提供了一个好的探\n索的起点。</p>\n<blockquote>\n<p>Key to Saccader is a pretraining step that require only class lables and\nprovides initial attention locations for policy gradient optimization.</p>\n</blockquote>\n<blockquote>\n<p>Our pretraining procedure overcomes the sparse-reward problem that makes hard\nattention models difficult to optimize. It requires access to only class\nlables and prvides initial attention locations.These initial locations provide\nbetter rewards for the policy gradient learning.</p>\n</blockquote>\n<p><img src=\"Saccader_eq2.jpg\" alt=\"\"></p>\n<ol start=\"2\">\n<li>训练了 location network (attention network, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1 \\times 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> mixing convolution\nand Sacader cell)</li>\n</ol>\n<p>这是一个自监督的预训练。提高了前 T = 12 次预测的点的概率。</p>\n<p>文中说排序了，我感觉排序的次序和预测的次序是一致的。第一次预测是概率最大的，最后\n一次预测是概率最小的。后面实验对比了该预训练对性能的影响。然而\n，<font color=\"deeppink\">现在还并不能完全了解这个预训练的作用机制。 </font></p>\n<p><img src=\"Saccader_eq3.jpg\" alt=\"\"></p>\n<ol start=\"3\">\n<li>\n<blockquote>\n<p>we trained the whole model to maximize the expected reward, where the\nreward (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mo>∈</mo><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn></mrow></mrow><annotation encoding=\"application/x-tex\">r \\in {0, 1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span></span></span></span></span>) represents whether the model final prediction\nafter 6 glimpses (T = 6) is correct.</p>\n</blockquote>\n</li>\n</ol>\n<p><font color=\"deeppink\">这个公式并没有完全读懂。</font></p>\n<p>用的是策略网络的方法。<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>l</mi><mi>s</mi><mi>t</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">l^t_s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.040556em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">s</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span>是按 saccader cell 输出的位置概率生成的位置。公式的\n第一行就是增大这个概率的值。当模型最后做出了正确预测的时候，r 权重大，损失函数以\n更大的权重增大这个预测的概率，这就是策略网络的方法。等式的第二行是修正分类网络，\n当预测正确的时候，那么有监督的增大这 T 个预测位置在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mi mathvariant=\"normal\">_</mi><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">y\\_{target}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9250799999999999em;vertical-align:-0.31em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span></span></span></span></span>上的准确率\n。</p><div id=\"空间\"></div><p></p>\n<p><strong>由公式 1 和公式 3 看出，对于图像空间，loss 函数只是增大预测点<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mi mathvariant=\"normal\">_</mi><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">y\\_{target}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9250799999999999em;vertical-align:-0.31em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span></span></span></span></span>的概\n率，然后不会理会，空间上其他点预测的是什么。</strong></p>\n<p>如果 saccader cell 的性能非常好，那么模型是没问题的。如果 saccader cell 预测会有\n误差，比如抗干扰能力不好，预测到目标以外的 patch 上，那么性能会被影响。</p>\n<p><strong>论文中说\n，<a href=\"#ap\">当预测的位置不存在的时候，模型的性能受到很大的影响。那么其实抑制预测之外的位置的，激活值会使得可以解释性更强？</a></strong></p>\n<h4 id=\"论文对比了-ordered-logits-policy-和-saccader\"><span class=\"post-title-index\">1.3.1.7. </span><a class=\"markdownIt-Anchor\" href=\"#论文对比了-ordered-logits-policy-和-saccader\"></a> 论文对比了 ordered logits policy 和 Saccader</h4>\n<blockquote>\n<p>An ordered logits policy uses the BagNet model to pick the top K locations\nbased on the largest class logits.</p>\n</blockquote>\n<p>Ordered logits policy 选择了在空间上最大激活的位置，作为物体的位置，并把该预测作\n为物体类别的预测。</p>\n<blockquote>\n<p>The ordered logits policy strats off with accuracy much higher than a random\npolicy, suggesting that the patches it initially picks are meaningful to\nclassification.</p>\n<p>However, accuracy is still lower than the learned Saccader model, and\n<strong>performacne improves only slowly with additional glimpese. The ordered\nlogits policy is able to capture some of the features relevant to\nclassification, but it is a greedy policy that produces glimpses that cluster\naround a few top features (i.e., with low image coverage)</strong></p>\n</blockquote>\n<p>ordered logits policy 的缺陷在于，只关注了最重要的少数的特征。它的预测都围绕在这\n些最重要的特征周围，所以增加 glimpese 的时候，很少新的信息引入，所以 performance\n增长的很慢，而 Saccader 没有这个问题，它关注了完整的信息。</p>\n<h4 id=\"空间上其他位置\"><span class=\"post-title-index\">1.3.1.8. </span><a class=\"markdownIt-Anchor\" href=\"#空间上其他位置\"></a> 空间上其他位置</h4>\n<p>如<a href=\"#%E7%A9%BA%E9%97%B4\">上文所说</a>，Sccader 只优化选中的位置，不管没有被选中的位置。那么当增加\nglimplese 的时候，它的性能应该会受到影响的。但是不是。</p>\n<blockquote>\n<p>In fact, increasing the number of glimpses beyond the number used for DRAM\npolicy training leads to drop in performane, ulike the Saccader model that\ngeneralizes to greater umbers of glimpses.</p>\n</blockquote>\n<img src=\"Saccader_gl.jpg\" width=\"50%\" height=\"50%\">\n<p>如图可以看出，增大 glimpses 的时候，准确率反而在增加。说明在训练的时候，没有被训\n练到的地方，Saccader 的预测也还可以，与<a href=\"#%E7%A9%BA%E9%97%B4\">上文所说</a>的理解不同\n。<font color=\"deeppink\">原因是什么还有待探究。</font></p>\n<h3 id=\"hard-attention-for-scalable-image-classification\"><span class=\"post-title-index\">1.3.2. </span><a class=\"markdownIt-Anchor\" href=\"#hard-attention-for-scalable-image-classification\"></a> Hard Attention for Scalable Image Classification</h3>\n<h4 id=\"介绍\"><span class=\"post-title-index\">1.3.2.1. </span><a class=\"markdownIt-Anchor\" href=\"#介绍\"></a> 介绍</h4>\n<img src=\"Tnet_over.jpg\" width=\"50%\" height=\"50%\">\n<blockquote>\n<p>Muti-scale processing in the proposed TNet architecture. Starting from level\n1, the image is processed in low resolution to get a coarse description of its\ncontent (red cube). Extracted features are used for (hard) selection of image\nregions worth processing in higher resolution. The process is repeated\nrecursively (here to 2 additional levels). Features from all levels are\ncombined (arrows on the right) to create the final image representation used\nfor classificaiton (blue cube).</p>\n</blockquote>\n<p>先粗后细的粗粒不同尺度的图像，这篇文章使用和实现了 Saccader</p>\n<h2 id=\"soft-attention\"><span class=\"post-title-index\">1.4. </span><a class=\"markdownIt-Anchor\" href=\"#soft-attention\"></a> Soft Attention</h2>\n<h3 id=\"nam-normalization-based-attention-module\"><span class=\"post-title-index\">1.4.1. </span><a class=\"markdownIt-Anchor\" href=\"#nam-normalization-based-attention-module\"></a> NAM, Normalization-based Attention Module</h3>\n<h4 id=\"利用网络参数的信息进一步处理数据再利用\"><span class=\"post-title-index\">1.4.1.1. </span><a class=\"markdownIt-Anchor\" href=\"#利用网络参数的信息进一步处理数据再利用\"></a> 利用网络参数的信息，进一步处理数据（再利用）</h4>\n<blockquote>\n<p>Those methods successfully exploit the mutual information from different\ndimensions of feawture. However, they lack consideration on the contributing\nfactors of weights, which is capable of furthr suppressing the insignificant\nchannels or pixels.</p>\n</blockquote>\n<p>网络参数本身是表达了一定的信息的，比如某个卷积核提取什么样的信息，本身也代表一种\n信息。神经网络中，每个参数都在图像的处理过程中使用一次，然而，<strong>一次是否就已经用\n完了该参数的信息。它是否还有其他价值？</strong></p>\n<p>文章重复利用了 bn 层中的权重，文章任务 bn 层的权重可以表达特征图的重要程度。然而\nattention 正好又需要特征图的重要程度。所以文章在 attention 中利用了 bn 层的权重\n。<strong>使得 bn 的权重出现重复利用的现象。</strong></p>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>a</mi><mi>t</mi><mi>t</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>n</mi><mi>o</mi><mi>r</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>a</mi><mi>t</mi><mi>t</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>a</mi><mi>t</mi><mi>t</mi><mo>×</mo><mi>γ</mi><mo>+</mo><mi>δ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>a</mi><mi>t</mi><mi>t</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>a</mi><mi>t</mi><mi>t</mi><mo>×</mo><mfrac><mi>γ</mi><mrow><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>γ</mi><mo stretchy=\"false\">)</mo></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>a</mi><mi>t</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>m</mi><mi>o</mi><mi>i</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">)</mo><mo>×</mo><mi>x</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\natt &amp;= norm(x) \\\\\natt &amp;= att \\times \\gamma + \\delta \\\\\natt &amp;= att \\times \\frac\\gamma{sum(\\gamma)} \\\\\nout &amp;= att.sigmoid() \\times x\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:6.84356em;vertical-align:-3.1717800000000005em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.67178em;\"><span style=\"top:-5.93934em;\"><span class=\"pstrut\" style=\"height:3.10756em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">t</span></span></span><span style=\"top:-4.43934em;\"><span class=\"pstrut\" style=\"height:3.10756em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">t</span></span></span><span style=\"top:-2.671779999999999em;\"><span class=\"pstrut\" style=\"height:3.10756em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">t</span></span></span><span style=\"top:-0.5957799999999995em;\"><span class=\"pstrut\" style=\"height:3.10756em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.1717800000000005em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.67178em;\"><span style=\"top:-5.93934em;\"><span class=\"pstrut\" style=\"height:3.10756em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">m</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span><span style=\"top:-4.43934em;\"><span class=\"pstrut\" style=\"height:3.10756em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03785em;\">δ</span></span></span><span style=\"top:-2.671779999999999em;\"><span class=\"pstrut\" style=\"height:3.10756em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1075599999999999em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">m</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-0.5957799999999995em;\"><span class=\"pstrut\" style=\"height:3.10756em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">t</span><span class=\"mord\">.</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.1717800000000005em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Channel_Att</span>(<span class=\"params\">nn.Module</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, channels, t=<span class=\"number\">16</span></span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Channel_Att, self).__init__()</span><br><span class=\"line\">        self.channels = channels</span><br><span class=\"line\">        self.bn2 = nn.BatchNorm2d(self.channels, affine=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span>(<span class=\"params\">self, x</span>):</span></span><br><span class=\"line\">        residual = x</span><br><span class=\"line\">        x = self.bn2(x)</span><br><span class=\"line\">        weight_bn = self.bn2.weight.data.<span class=\"built_in\">abs</span>() / torch.<span class=\"built_in\">sum</span>(self.bn2.weight.data.<span class=\"built_in\">abs</span>())</span><br><span class=\"line\">        x = x.permute(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>).contiguous()</span><br><span class=\"line\">        x = torch.mul(weight_bn, x)</span><br><span class=\"line\">        x = x.permute(<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>).contiguous()</span><br><span class=\"line\">        x = torch.sigmoid(x) * residual</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"关于权重稀疏性\"><span class=\"post-title-index\">1.4.1.2. </span><a class=\"markdownIt-Anchor\" href=\"#关于权重稀疏性\"></a> 关于权重稀疏性</h4>\n<blockquote>\n<p>It applies a weightsparsity penalty to the attention modules, thus, making\nthem more computational efficient while retaining similar performance.</p>\n<p>To suppress the less salient weights, we add a regularization term into the\nloss function.</p>\n</blockquote>\n<p class=\"katex-block\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mi>o</mi><mi>s</mi><mi>s</mi><mo>=</mo><munder><mo>∑</mo><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow></munder><mi>l</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>W</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>p</mi><mo>∑</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>γ</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>p</mi><mo>∑</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>λ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Loss = \\sum_{(x,y)}l(f(x, W), y) + p\\sum g(\\gamma) + p \\sum g(\\lambda)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.5660100000000003em;vertical-align:-1.516005em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em;\"><span style=\"top:-1.808995em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.516005em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.6000100000000002em;vertical-align:-0.55001em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-symbol large-op\" style=\"position:relative;top:-0.000004999999999977245em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.6000100000000002em;vertical-align:-0.55001em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-symbol large-op\" style=\"position:relative;top:-0.000004999999999977245em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">λ</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>第一项是正常的损失函数，第二项和第三项的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi><mi mathvariant=\"normal\">（</mi><mi mathvariant=\"normal\">）</mi></mrow><annotation encoding=\"application/x-tex\">g（）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord cjk_fallback\">（</span><span class=\"mord cjk_fallback\">）</span></span></span></span>是一范数，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span></span></span></span>是通道注意力中\nbn 的权重，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">λ</span></span></span></span>是空间注意力中 pix normalization 的权重。加上这两项使得通道\n和空间注意力都有了稀疏性。</p>\n<p><font color=\"deeppink\">loss 函数增加了权重的稀疏性，attention 把权重的稀疏性转换为\n了特征的稀疏性，然而这个稀疏性并不是丢弃了特征或者权重，为什么它能够带来\ncomputational efficient? 文章确实有 computational efficient，但是根据实验部分的\n列表，parameter 和 FLOPS 的优势都是这个注意力机制的结构带来的，相比于其他注意力\n机制，它是轻量而且计算低的。但是稀疏性和计算复杂度是无关的。</font></p>\n<h4 id=\"启发\"><span class=\"post-title-index\">1.4.1.3. </span><a class=\"markdownIt-Anchor\" href=\"#启发\"></a> 启发</h4>\n<p><font color=\"deeppink\">这篇文章给人一个启发是参数复用，神经网络中所有参数几乎不会\n复用。然而，除了文中提出的这个例子，是否还存在其他需要复用的场景或者理由\n。</font></p>\n<p><font color=\"deeppink\">参数复用可以看成另一种权值共享，卷积是层内的权值共享，参数\n复用是层间的权值共享，它是一种正则化，它对不变性产生什么影响？</font></p>\n<h1 id=\"regularization\"><span class=\"post-title-index\">2. </span><a class=\"markdownIt-Anchor\" href=\"#regularization\"></a> Regularization</h1>\n<h2 id=\"adcm-attentnion-dropout-convolutional-module\"><span class=\"post-title-index\">2.1. </span><a class=\"markdownIt-Anchor\" href=\"#adcm-attentnion-dropout-convolutional-module\"></a> ADCM: Attentnion Dropout Convolutional Module</h2>\n<p><img src=\"ADCM.jpg\" alt=\"ADCM\"></p>\n<p>在 CBAM 的基础上加入了正则化，把 CBAM 产生的 attention weights 作为 Drop 的概率\n引导，来对 feature map 进行 drop。是一种对 attention 机制的正则化方法，很容以把\n它误解为 hard attention。</p>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol><li id=\"fn:1\">2018,Learn to pay attention.<a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li><li id=\"fn:2\">2019, Approximating CNNs with bag-of-local-features models works\nsurprisingly well on ImageNet.<a href=\"#fnref:2\" rev=\"footnote\"> ↩</a></li></ol></div></div></body></html>","site":{"data":{}},"excerpt":"<html><head></head><body></body></html>","more":"<h1 id=\"attention\"><a class=\"markdownIt-Anchor\" href=\"#attention\"></a> Attention</h1>\n<h2 id=\"hard-and-soft-attention\"><a class=\"markdownIt-Anchor\" href=\"#hard-and-soft-attention\"></a> Hard and Soft Attention</h2>\n<h3 id=\"attention-mechanisms-in-cv-a-survey\"><a class=\"markdownIt-Anchor\" href=\"#attention-mechanisms-in-cv-a-survey\"></a> Attention Mechanisms in CV: A Survey</h3>\n<h2 id=\"gumbel-softmax-hard-attention\"><a class=\"markdownIt-Anchor\" href=\"#gumbel-softmax-hard-attention\"></a> Gumbel-Softmax Hard Attention</h2>\n<h3 id=\"categorical-reparameterization-with-gumbel-softmax\"><a class=\"markdownIt-Anchor\" href=\"#categorical-reparameterization-with-gumbel-softmax\"></a> Categorical Reparameterization with Gumbel-Softmax</h3>\n<h4 id=\"文章引出了一类神经网络stochastic-neural-networks-with-discrete-random-variables\"><a class=\"markdownIt-Anchor\" href=\"#文章引出了一类神经网络stochastic-neural-networks-with-discrete-random-variables\"></a> 文章引出了一类神经网络，Stochastic Neural Networks with discrete random variables。</h4>\n<p>具有离散随机变量的随机神经网络</p>\n<h4 id=\"文章引出了一个方向stochastic-gradient-estimation\"><a class=\"markdownIt-Anchor\" href=\"#文章引出了一个方向stochastic-gradient-estimation\"></a> 文章引出了一个方向，Stochastic Gradient Estimation</h4>\n<p>随机梯度估计，主要的方法就有 dumbel-softmax, score function estimator, biased\npath derivative estimator。</p>\n<blockquote>\n<p>However, no existing gradient estimator has been formulated specifically for\ncategorical variables.</p>\n</blockquote>\n<h2 id=\"reinforce-learnning-hard-attention\"><a class=\"markdownIt-Anchor\" href=\"#reinforce-learnning-hard-attention\"></a> Reinforce Learnning Hard Attention</h2>\n<h3 id=\"2019-scacader-improving-accuracy-of-hard-attention-models-for-vision\"><a class=\"markdownIt-Anchor\" href=\"#2019-scacader-improving-accuracy-of-hard-attention-models-for-vision\"></a> 2019 Scacader: Improving Accuracy of Hard Attention Models for Vision</h3>\n<h4 id=\"hard-attention-选择相关的特征作为输入是真正具有可解释性的\"><a class=\"markdownIt-Anchor\" href=\"#hard-attention-选择相关的特征作为输入是真正具有可解释性的\"></a> Hard Attention 选择相关的特征作为输入，是真正具有可解释性的。</h4>\n<p>从下面第一段话，可以看出，hard attention 是真正和性能挂钩的。也一定和特征重要性\n是吻合的。但是 Soft Attention 不具有可解释性，小权重的特征并不一定不重\n要<div id=\"ap\"></div></p>\n<blockquote>\n<p>Our best models narrow the gap to common ImageNet baselines, achieving 75%\ntop-1 and 91% top-5 while attending to less than one-third of the image.We\nfurther demonstrate that occluding the image patches prposed by the Saccader\nmodel highly impairs classification, thus confirming these patches strong\nrelevance to the classification task.</p>\n</blockquote>\n<blockquote>\n<p>Typical soft attention mechanisms rescale features at one or more stages of\nthe network. The soft mask used for rescaling often to provide some insight\ninto the model’s decision-making process, but the model’s final decision may\nnonetheless rely on information provided by features with small weights &lt;sup id=“fnref:1”&gt;<a href=\"#fn:1\" rel=\"footnote\">1</a></sup></p>\n</blockquote>\n<p>\\</p>\n<h4 id=\"文中-glimpse-的含义可以理解成每一个位置即每一个-patch就是一个-glimpse\"><a class=\"markdownIt-Anchor\" href=\"#文中-glimpse-的含义可以理解成每一个位置即每一个-patch就是一个-glimpse\"></a> 文中 glimpse 的含义，可以理解成每一个位置，即每一个 patch，就是一个 glimpse。</h4>\n<blockquote>\n<p>Models that employ hard attention make decisions based on only a subset of\npixel in the input image, typically in the form of a series of glimpses.</p>\n</blockquote>\n<h4 id=\"文章提出了-hard-attention-与双阶段目标检测算法的相似性-他们都是截取图像块作为输入然后进行分类-不同的是目标检测算法对于目标的位置是有标签的而-hard-attention-是无标签的\"><a class=\"markdownIt-Anchor\" href=\"#文章提出了-hard-attention-与双阶段目标检测算法的相似性-他们都是截取图像块作为输入然后进行分类-不同的是目标检测算法对于目标的位置是有标签的而-hard-attention-是无标签的\"></a> 文章提出了 Hard Attention 与双阶段目标检测算法的相似性。他们都是截取图像块作为输入，然后进行分类。不同的是，目标检测算法对于目标的位置是有标签的，而 Hard Attention 是无标签的。</h4>\n<blockquote>\n<p>Altough our aim in this work is to perform classification with only\nimage-level class labels, out approach bears some resembalance to two-stage\nobject detection models.</p>\n</blockquote>\n<blockquote>\n<p>These models operate by generating many region proposals and then applying a\nclassification model to each proposal.</p>\n</blockquote>\n<blockquote>\n<p>Unlike our work, these approaches use ground-truth bounding boxes to train the\nclassification model, and modern architectures also use bounding boxes to\nsupervise the proposal generator.</p>\n</blockquote>\n<p><strong>目标检测和 Hard Attention 的相似之处在于，他们都同时关注目标的位置和类别。相比\n于目标检测，Hard Attention 可以做的更精细, i.e., 它可以像目标检测一样在图像域上\n挑选特征，它还可以在任意一个特征域里挑选特征；它不仅可以像目标检测一样，挑选空域\n的特征，还可以挑选通道域的特征。</strong></p>\n<h4 id=\"总结构\"><a class=\"markdownIt-Anchor\" href=\"#总结构\"></a> 总结构</h4>\n<img src=Saccader_Over.jpg width=80% height = 80%>\n<p>最上面的 rep. net 以及 logits per location 之前都属于 representation network。这\n部分挺常规，但是使用了‘BagNet’&lt;sup id=“fnref:2”&gt;<a href=\"#fn:2\" rel=\"footnote\">2</a></sup>的方法，该方法保持了输出特征图中每个像素的感\n受野大小。</p>\n<p>下面的 atten. net 就是几个卷积层的堆叠。没有 attention 机制。到 Sacadder cell 之\n前都是常规操作，除了一个 what 和 where 的 concat 得到 mixed。</p>\n<p>Saccader cell 是技术关键点。</p>\n<p><strong>coordinate at time t 的 slice 操作，对于坐标的选择而言，是一个不可导的操作。这\n里是强化学习介入的地方。而且注意，这里 t 是一个序列，最后的 prediction 是求平均\n。</strong></p>\n<p>\\</p>\n<h4 id=\"saccader-cell\"><a class=\"markdownIt-Anchor\" href=\"#saccader-cell\"></a> Saccader cell</h4>\n<img src=Saccader_Cell.jpg width=80% height = 80%>\n<p>值得注意的几点</p>\n<ol>\n<li>Cell state 是一个 state 的序列，每个 state 都是一个经过 2d softmax 的\nlogit。这个 logit 表示该 state 预测的位置。</li>\n</ol>\n<blockquote>\n<p>This cell produces a sequence of locations. Elements in the sequence\ncorrectpond to target locations.</p>\n</blockquote>\n<ol start=\"2\">\n<li>需要保证 cell state 中预测之间都是不同的。<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>C</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7935559999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span></span></span></span>记录了 t 时刻位置探索过的所有\n位置。那些位置的值是 1。所以<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>C</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">C^{t - 1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>两次介入<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>C</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7935559999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span></span></span></span>的计算都乘以一个非常小的\n数<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">-10^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span> ，这样就保证了在 2d softmax 的时候，探索过的位置无法胜出。</li>\n</ol>\n<blockquote>\n<p>The cell includes a 2D state (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>C</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7935559999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span></span></span></span>) that keeps memory of the visited\nlocations until time t by placing 1 in the corresponding location in the cell\nstate. We use this state to prevent the network from returning to previously\nseen locations.</p>\n</blockquote>\n<p><strong>从这里也看出 state 和 sequence 是不同的。state 是记录探索过的位置。从途中可以\n看出 state 是非 01 的，而由 1 可知，sequence 应该是图中右边产生 logic。state 的\n目的，其实也是为了产生 logic。</strong></p>\n<ol start=\"3\">\n<li>\n<p>在制作<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>C</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7935559999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span></span></span></span>的过程中，信息来源有两个 mixed feature 和<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>C</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">C^{t - 1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>。最后得到\n的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>C</mi><mi>t</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7935559999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span></span></span></span>通道是 1，所以 mixed feature 空间维度的压缩是必然的。在压缩的时候，选\n用了 channel attention 机制。channel attention 机制又需要先空间压缩，这里不\n像 SE-Net 一样直接压缩空间，而是又做了一个空间的 mask 压缩空间，这个 mask 用\n了<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>C</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">C^{t - 1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>的信息，去除掉了已经探索的位置信息。</p>\n</li>\n<li>\n<blockquote>\n<p>At test time, the model extracts the logits at time <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">t</span></span></span></span> from the\nrepresentation network at location <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mi>r</mi><mi>g</mi><mi>m</mi><mi>a</mi><mi>x</mi><mi mathvariant=\"normal\">_</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow><mo stretchy=\"false\">(</mo><msup><mover accent=\"true\"><mi>R</mi><mo>^</mo></mover><mi>t</mi></msup><mi mathvariant=\"normal\">_</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">argmax\\_{i,j}(\\hat{R}^t\\_{i,j})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.25677em;vertical-align:-0.31em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">x</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9467699999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\">^</span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span></span></span></span></span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord\"><span class=\"mord mathdefault\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span></span><span class=\"mclose\">)</span></span></span></span>.The\nfinal prediction is obtained by averaging the extracted logits across all\ntimes.</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>Saccader Cell 的关键就在于产生一系列的 sequence。这些 sequence 可以用强化学习\n算法优化，使其可以预测物体的位置，从而就进行了 feature 的选择。</strong></p>\n<h4 id=\"训练策略\"><a class=\"markdownIt-Anchor\" href=\"#训练策略\"></a> 训练策略</h4>\n<blockquote>\n<p>The goal of our training is to learn a policy that predicts a sequence of\nvisual attentnion locations that is useful to the downsteam task (here image\nclassification) in absence of location labels.</p>\n<p>We performed a three step training procedure using only the training class\nlables as supervision.</p>\n</blockquote>\n<p><img src=\"Saccader_eq1.jpg\" alt=\"\" /></p>\n<ol>\n<li>预训练了 representation network</li>\n</ol>\n<p>这个公式增大了目标<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mi mathvariant=\"normal\">_</mi><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">y\\_{target}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9250799999999999em;vertical-align:-0.31em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span></span></span></span></span>的概率。增大的某个位置上<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mi mathvariant=\"normal\">_</mi><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">y\\_{target}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9250799999999999em;vertical-align:-0.31em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span></span></span></span></span>的概率，而且\n所有位置连乘之后的概率。这里假设 region of interest 的概率将会被增大的最多。通过\n这种方法就自动学习到了一些好的 position，在强化学习优化的时候，提供了一个好的探\n索的起点。</p>\n<blockquote>\n<p>Key to Saccader is a pretraining step that require only class lables and\nprovides initial attention locations for policy gradient optimization.</p>\n</blockquote>\n<blockquote>\n<p>Our pretraining procedure overcomes the sparse-reward problem that makes hard\nattention models difficult to optimize. It requires access to only class\nlables and prvides initial attention locations.These initial locations provide\nbetter rewards for the policy gradient learning.</p>\n</blockquote>\n<p><img src=\"Saccader_eq2.jpg\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>训练了 location network (attention network, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1 \\times 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> mixing convolution\nand Sacader cell)</li>\n</ol>\n<p>这是一个自监督的预训练。提高了前 T = 12 次预测的点的概率。</p>\n<p>文中说排序了，我感觉排序的次序和预测的次序是一致的。第一次预测是概率最大的，最后\n一次预测是概率最小的。后面实验对比了该预训练对性能的影响。然而\n，<font color =deeppink>现在还并不能完全了解这个预训练的作用机制。 </font></p>\n<p><img src=\"Saccader_eq3.jpg\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>\n<blockquote>\n<p>we trained the whole model to maximize the expected reward, where the\nreward (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mo>∈</mo><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn></mrow></mrow><annotation encoding=\"application/x-tex\">r \\in {0, 1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span></span></span></span></span>) represents whether the model final prediction\nafter 6 glimpses (T = 6) is correct.</p>\n</blockquote>\n</li>\n</ol>\n<p><font color=deeppink>这个公式并没有完全读懂。</font></p>\n<p>用的是策略网络的方法。<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>l</mi><mi>s</mi><mi>t</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">l^t_s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.040556em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7935559999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">s</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span>是按 saccader cell 输出的位置概率生成的位置。公式的\n第一行就是增大这个概率的值。当模型最后做出了正确预测的时候，r 权重大，损失函数以\n更大的权重增大这个预测的概率，这就是策略网络的方法。等式的第二行是修正分类网络，\n当预测正确的时候，那么有监督的增大这 T 个预测位置在<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mi mathvariant=\"normal\">_</mi><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">y\\_{target}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9250799999999999em;vertical-align:-0.31em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span></span></span></span></span>上的准确率\n。<div id=\"空间\"></div></p>\n<p><strong>由公式 1 和公式 3 看出，对于图像空间，loss 函数只是增大预测点<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi><mi mathvariant=\"normal\">_</mi><mrow><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">y\\_{target}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9250799999999999em;vertical-align:-0.31em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord\"><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">t</span></span></span></span></span>的概\n率，然后不会理会，空间上其他点预测的是什么。</strong></p>\n<p>如果 saccader cell 的性能非常好，那么模型是没问题的。如果 saccader cell 预测会有\n误差，比如抗干扰能力不好，预测到目标以外的 patch 上，那么性能会被影响。</p>\n<p><strong>论文中说\n，<a href=\"#ap\">当预测的位置不存在的时候，模型的性能受到很大的影响。那么其实抑制预测之外的位置的，激活值会使得可以解释性更强？</a></strong></p>\n<h4 id=\"论文对比了-ordered-logits-policy-和-saccader\"><a class=\"markdownIt-Anchor\" href=\"#论文对比了-ordered-logits-policy-和-saccader\"></a> 论文对比了 ordered logits policy 和 Saccader</h4>\n<blockquote>\n<p>An ordered logits policy uses the BagNet model to pick the top K locations\nbased on the largest class logits.</p>\n</blockquote>\n<p>Ordered logits policy 选择了在空间上最大激活的位置，作为物体的位置，并把该预测作\n为物体类别的预测。</p>\n<blockquote>\n<p>The ordered logits policy strats off with accuracy much higher than a random\npolicy, suggesting that the patches it initially picks are meaningful to\nclassification.</p>\n<p>However, accuracy is still lower than the learned Saccader model, and\n<strong>performacne improves only slowly with additional glimpese. The ordered\nlogits policy is able to capture some of the features relevant to\nclassification, but it is a greedy policy that produces glimpses that cluster\naround a few top features (i.e., with low image coverage)</strong></p>\n</blockquote>\n<p>ordered logits policy 的缺陷在于，只关注了最重要的少数的特征。它的预测都围绕在这\n些最重要的特征周围，所以增加 glimpese 的时候，很少新的信息引入，所以 performance\n增长的很慢，而 Saccader 没有这个问题，它关注了完整的信息。</p>\n<h4 id=\"空间上其他位置\"><a class=\"markdownIt-Anchor\" href=\"#空间上其他位置\"></a> 空间上其他位置</h4>\n<p>如<a href=\"#%E7%A9%BA%E9%97%B4\">上文所说</a>，Sccader 只优化选中的位置，不管没有被选中的位置。那么当增加\nglimplese 的时候，它的性能应该会受到影响的。但是不是。</p>\n<blockquote>\n<p>In fact, increasing the number of glimpses beyond the number used for DRAM\npolicy training leads to drop in performane, ulike the Saccader model that\ngeneralizes to greater umbers of glimpses.</p>\n</blockquote>\n<img src=Saccader_gl.jpg width=50% height = 50%>\n<p>如图可以看出，增大 glimpses 的时候，准确率反而在增加。说明在训练的时候，没有被训\n练到的地方，Saccader 的预测也还可以，与<a href=\"#%E7%A9%BA%E9%97%B4\">上文所说</a>的理解不同\n。<font color=deeppink>原因是什么还有待探究。</font></p>\n<h3 id=\"hard-attention-for-scalable-image-classification\"><a class=\"markdownIt-Anchor\" href=\"#hard-attention-for-scalable-image-classification\"></a> Hard Attention for Scalable Image Classification</h3>\n<h4 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\"></a> 介绍</h4>\n<img src=Tnet_over.jpg width=50% height = 50%>\n<blockquote>\n<p>Muti-scale processing in the proposed TNet architecture. Starting from level\n1, the image is processed in low resolution to get a coarse description of its\ncontent (red cube). Extracted features are used for (hard) selection of image\nregions worth processing in higher resolution. The process is repeated\nrecursively (here to 2 additional levels). Features from all levels are\ncombined (arrows on the right) to create the final image representation used\nfor classificaiton (blue cube).</p>\n</blockquote>\n<p>先粗后细的粗粒不同尺度的图像，这篇文章使用和实现了 Saccader</p>\n<h2 id=\"soft-attention\"><a class=\"markdownIt-Anchor\" href=\"#soft-attention\"></a> Soft Attention</h2>\n<h3 id=\"nam-normalization-based-attention-module\"><a class=\"markdownIt-Anchor\" href=\"#nam-normalization-based-attention-module\"></a> NAM, Normalization-based Attention Module</h3>\n<h4 id=\"利用网络参数的信息进一步处理数据再利用\"><a class=\"markdownIt-Anchor\" href=\"#利用网络参数的信息进一步处理数据再利用\"></a> 利用网络参数的信息，进一步处理数据（再利用）</h4>\n<blockquote>\n<p>Those methods successfully exploit the mutual information from different\ndimensions of feawture. However, they lack consideration on the contributing\nfactors of weights, which is capable of furthr suppressing the insignificant\nchannels or pixels.</p>\n</blockquote>\n<p>网络参数本身是表达了一定的信息的，比如某个卷积核提取什么样的信息，本身也代表一种\n信息。神经网络中，每个参数都在图像的处理过程中使用一次，然而，<strong>一次是否就已经用\n完了该参数的信息。它是否还有其他价值？</strong></p>\n<p>文章重复利用了 bn 层中的权重，文章任务 bn 层的权重可以表达特征图的重要程度。然而\nattention 正好又需要特征图的重要程度。所以文章在 attention 中利用了 bn 层的权重\n。<strong>使得 bn 的权重出现重复利用的现象。</strong></p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>a</mi><mi>t</mi><mi>t</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>n</mi><mi>o</mi><mi>r</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>a</mi><mi>t</mi><mi>t</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>a</mi><mi>t</mi><mi>t</mi><mo>×</mo><mi>γ</mi><mo>+</mo><mi>δ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>a</mi><mi>t</mi><mi>t</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>a</mi><mi>t</mi><mi>t</mi><mo>×</mo><mfrac><mi>γ</mi><mrow><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy=\"false\">(</mo><mi>γ</mi><mo stretchy=\"false\">)</mo></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>a</mi><mi>t</mi><mi>t</mi><mi mathvariant=\"normal\">.</mi><mi>s</mi><mi>i</mi><mi>g</mi><mi>m</mi><mi>o</mi><mi>i</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">)</mo><mo>×</mo><mi>x</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\natt &amp;= norm(x) \\\\\natt &amp;= att \\times \\gamma + \\delta \\\\\natt &amp;= att \\times \\frac\\gamma{sum(\\gamma)} \\\\\nout &amp;= att.sigmoid() \\times x\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:6.84356em;vertical-align:-3.1717800000000005em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.67178em;\"><span style=\"top:-5.93934em;\"><span class=\"pstrut\" style=\"height:3.10756em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">t</span></span></span><span style=\"top:-4.43934em;\"><span class=\"pstrut\" style=\"height:3.10756em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">t</span></span></span><span style=\"top:-2.671779999999999em;\"><span class=\"pstrut\" style=\"height:3.10756em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">t</span></span></span><span style=\"top:-0.5957799999999995em;\"><span class=\"pstrut\" style=\"height:3.10756em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.1717800000000005em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.67178em;\"><span style=\"top:-5.93934em;\"><span class=\"pstrut\" style=\"height:3.10756em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">m</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span><span style=\"top:-4.43934em;\"><span class=\"pstrut\" style=\"height:3.10756em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03785em;\">δ</span></span></span><span style=\"top:-2.671779999999999em;\"><span class=\"pstrut\" style=\"height:3.10756em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1075599999999999em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">u</span><span class=\"mord mathdefault\">m</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-0.5957799999999995em;\"><span class=\"pstrut\" style=\"height:3.10756em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">t</span><span class=\"mord\">.</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.1717800000000005em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Channel_Att</span>(<span class=\"params\">nn.Module</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, channels, t=<span class=\"number\">16</span></span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Channel_Att, self).__init__()</span><br><span class=\"line\">        self.channels = channels</span><br><span class=\"line\">        self.bn2 = nn.BatchNorm2d(self.channels, affine=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span>(<span class=\"params\">self, x</span>):</span></span><br><span class=\"line\">        residual = x</span><br><span class=\"line\">        x = self.bn2(x)</span><br><span class=\"line\">        weight_bn = self.bn2.weight.data.<span class=\"built_in\">abs</span>() / torch.<span class=\"built_in\">sum</span>(self.bn2.weight.data.<span class=\"built_in\">abs</span>())</span><br><span class=\"line\">        x = x.permute(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>).contiguous()</span><br><span class=\"line\">        x = torch.mul(weight_bn, x)</span><br><span class=\"line\">        x = x.permute(<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>).contiguous()</span><br><span class=\"line\">        x = torch.sigmoid(x) * residual</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br></pre></td></tr></table></figure>\n<h4 id=\"关于权重稀疏性\"><a class=\"markdownIt-Anchor\" href=\"#关于权重稀疏性\"></a> 关于权重稀疏性</h4>\n<blockquote>\n<p>It applies a weightsparsity penalty to the attention modules, thus, making\nthem more computational efficient while retaining similar performance.</p>\n<p>To suppress the less salient weights, we add a regularization term into the\nloss function.</p>\n</blockquote>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>L</mi><mi>o</mi><mi>s</mi><mi>s</mi><mo>=</mo><munder><mo>∑</mo><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow></munder><mi>l</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>W</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>p</mi><mo>∑</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>γ</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>p</mi><mo>∑</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>λ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Loss = \\sum_{(x,y)}l(f(x, W), y) + p\\sum g(\\gamma) + p \\sum g(\\lambda)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.5660100000000003em;vertical-align:-1.516005em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em;\"><span style=\"top:-1.808995em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathdefault mtight\">x</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.516005em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">W</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.6000100000000002em;vertical-align:-0.55001em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-symbol large-op\" style=\"position:relative;top:-0.000004999999999977245em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.6000100000000002em;vertical-align:-0.55001em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-symbol large-op\" style=\"position:relative;top:-0.000004999999999977245em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">λ</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>第一项是正常的损失函数，第二项和第三项的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi><mi mathvariant=\"normal\">（</mi><mi mathvariant=\"normal\">）</mi></mrow><annotation encoding=\"application/x-tex\">g（）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord cjk_fallback\">（</span><span class=\"mord cjk_fallback\">）</span></span></span></span>是一范数，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">\\gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05556em;\">γ</span></span></span></span>是通道注意力中\nbn 的权重，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">λ</span></span></span></span>是空间注意力中 pix normalization 的权重。加上这两项使得通道\n和空间注意力都有了稀疏性。</p>\n<p><font color=deeppink>loss 函数增加了权重的稀疏性，attention 把权重的稀疏性转换为\n了特征的稀疏性，然而这个稀疏性并不是丢弃了特征或者权重，为什么它能够带来\ncomputational efficient? 文章确实有 computational efficient，但是根据实验部分的\n列表，parameter 和 FLOPS 的优势都是这个注意力机制的结构带来的，相比于其他注意力\n机制，它是轻量而且计算低的。但是稀疏性和计算复杂度是无关的。</font></p>\n<h4 id=\"启发\"><a class=\"markdownIt-Anchor\" href=\"#启发\"></a> 启发</h4>\n<p><font color=deeppink>这篇文章给人一个启发是参数复用，神经网络中所有参数几乎不会\n复用。然而，除了文中提出的这个例子，是否还存在其他需要复用的场景或者理由\n。</font></p>\n<p><font color=deeppink>参数复用可以看成另一种权值共享，卷积是层内的权值共享，参数\n复用是层间的权值共享，它是一种正则化，它对不变性产生什么影响？</font></p>\n<h1 id=\"regularization\"><a class=\"markdownIt-Anchor\" href=\"#regularization\"></a> Regularization</h1>\n<h2 id=\"adcm-attentnion-dropout-convolutional-module\"><a class=\"markdownIt-Anchor\" href=\"#adcm-attentnion-dropout-convolutional-module\"></a> ADCM: Attentnion Dropout Convolutional Module</h2>\n<p><img src=\"ADCM.jpg\" alt=\"ADCM\" /></p>\n<p>在 CBAM 的基础上加入了正则化，把 CBAM 产生的 attention weights 作为 Drop 的概率\n引导，来对 feature map 进行 drop。是一种对 attention 机制的正则化方法，很容以把\n它误解为 hard attention。</p>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol><li id=\"fn:1\">2018,Learn to pay attention.<a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li><li id=\"fn:2\">2019, Approximating CNNs with bag-of-local-features models works\nsurprisingly well on ImageNet.<a href=\"#fnref:2\" rev=\"footnote\"> ↩</a></li></ol></div></div>"},{"title":"Transformer and BERT","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-12-18T02:00:56.000Z","password":null,"summary":null,"description":"NLP, Transformer and BERT.","_content":"\nI will introduce transformer and BERT according to their original papers. [^1]\n[^2]\n\n[^2]:\n    BERT: Pre-training of Deep Bidirectional Transformer for Language\n    Understanding\n\n[^1]: Attention is all you need\n\nBased on the two paper, we will also take the first step to NLP.\n\n# Transformer\n\n# BERT\n","source":"_posts/Transformer-and-BERT.md","raw":"---\ntitle: Transformer and BERT\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-12-18 10:00:56\npassword:\nsummary:\ndescription: NLP, Transformer and BERT.\ncategories:\n  - Machine Learning\n  - Natural Language Processing\ntags:\n  - Natural Language Processing\n  - Transformer\n  - BERT\n---\n\nI will introduce transformer and BERT according to their original papers. [^1]\n[^2]\n\n[^2]:\n    BERT: Pre-training of Deep Bidirectional Transformer for Language\n    Understanding\n\n[^1]: Attention is all you need\n\nBased on the two paper, we will also take the first step to NLP.\n\n# Transformer\n\n# BERT\n","slug":"Transformer-and-BERT","published":1,"updated":"2022-04-12T07:45:20.526Z","_id":"cl0thb1i6000tgqul8hxt3bld","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><p>I will introduce transformer and BERT according to their original papers. <sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>\n<sup id=\"fnref:2\"><a href=\"#fn:2\" rel=\"footnote\">2</a></sup></p>\n<p>Based on the two paper, we will also take the first step to NLP.</p>\n<h1 id=\"transformer\"><span class=\"post-title-index\">1. </span><a class=\"markdownIt-Anchor\" href=\"#transformer\"></a> Transformer</h1>\n<h1 id=\"bert\"><span class=\"post-title-index\">2. </span><a class=\"markdownIt-Anchor\" href=\"#bert\"></a> BERT</h1>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol><li id=\"fn:1\">Attention is all you need<a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li><li id=\"fn:2\">BERT: Pre-training of Deep Bidirectional Transformer for Language\nUnderstanding<a href=\"#fnref:2\" rev=\"footnote\"> ↩</a></li></ol></div></div></body></html>","site":{"data":{}},"excerpt":"<html><head></head><body></body></html>","more":"<p>I will introduce transformer and BERT according to their original papers. <sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>\n<sup id=\"fnref:2\"><a href=\"#fn:2\" rel=\"footnote\">2</a></sup></p>\n<p>Based on the two paper, we will also take the first step to NLP.</p>\n<h1 id=\"transformer\"><a class=\"markdownIt-Anchor\" href=\"#transformer\"></a> Transformer</h1>\n<h1 id=\"bert\"><a class=\"markdownIt-Anchor\" href=\"#bert\"></a> BERT</h1>\n<div id=\"footnotes\"><hr><div id=\"footnotelist\"><ol><li id=\"fn:1\">Attention is all you need<a href=\"#fnref:1\" rev=\"footnote\"> ↩</a></li><li id=\"fn:2\">BERT: Pre-training of Deep Bidirectional Transformer for Language\nUnderstanding<a href=\"#fnref:2\" rev=\"footnote\"> ↩</a></li></ol></div></div>"},{"title":"Regex","top":false,"cover":false,"toc":true,"date":"2022-04-12T06:57:48.000Z","password":null,"summary":null,"description":"Learn Regex","_content":"\n# Regular Expressions in Vim\n\n## Lookahead and Lookbehind\n\nDirectly some examples.\n\nSee `:help /\\@=`, `:help /\\@!`, `:help /\\@<=`, and `:help /\\@<!` for detail.\n\n### Positive lookahead with `\\@=` and negative lookahead with `\\@!`\n\n```tex\nquick fox quick dog quick fox\nquick dog quick fox\ndog fox\n```\n\nFind `quick` if followed by `dog` with `/quick\\( dog\\)\\@=`.\n\nFind `quick` if not followed by `dog` with `/quick\\( dog\\)\\@!`.\n\n### Positive Lookbehind with `\\@<=` and negative Lookbehind with `\\@<!`\n\nFind `fox` preceded by `quick` with `\\(quick \\)\\@<=fox`.\n\nFind `fox` not preceded by `quick` with `\\(quick \\)\\@<!fox`.\n","source":"_posts/Regex.md","raw":"---\ntitle: Regex\ntop: false\ncover: false\ntoc: true\ndate: 2022-04-12 14:57:48\npassword:\nsummary:\ndescription: Learn Regex\ncategories:\n  - Programming\ntags:\n  - Regex\n---\n\n# Regular Expressions in Vim\n\n## Lookahead and Lookbehind\n\nDirectly some examples.\n\nSee `:help /\\@=`, `:help /\\@!`, `:help /\\@<=`, and `:help /\\@<!` for detail.\n\n### Positive lookahead with `\\@=` and negative lookahead with `\\@!`\n\n```tex\nquick fox quick dog quick fox\nquick dog quick fox\ndog fox\n```\n\nFind `quick` if followed by `dog` with `/quick\\( dog\\)\\@=`.\n\nFind `quick` if not followed by `dog` with `/quick\\( dog\\)\\@!`.\n\n### Positive Lookbehind with `\\@<=` and negative Lookbehind with `\\@<!`\n\nFind `fox` preceded by `quick` with `\\(quick \\)\\@<=fox`.\n\nFind `fox` not preceded by `quick` with `\\(quick \\)\\@<!fox`.\n","slug":"Regex","published":1,"updated":"2022-04-12T07:22:18.731Z","_id":"cl1vso4bk0000b8ul65dgd4ti","comments":1,"layout":"post","photos":[],"link":"","content":"<html><head></head><body><h1 id=\"regular-expressions-in-vim\"><span class=\"post-title-index\">1. </span><a class=\"markdownIt-Anchor\" href=\"#regular-expressions-in-vim\"></a> Regular Expressions in Vim</h1>\n<h2 id=\"lookahead-and-lookbehind\"><span class=\"post-title-index\">1.1. </span><a class=\"markdownIt-Anchor\" href=\"#lookahead-and-lookbehind\"></a> Lookahead and Lookbehind</h2>\n<p>Directly some examples.</p>\n<p>See <code>:help /\\@=</code>, <code>:help /\\@!</code>, <code>:help /\\@&lt;=</code>, and <code>:help /\\@&lt;!</code> for detail.</p>\n<h3 id=\"positive-lookahead-with-and-negative-lookahead-with\"><span class=\"post-title-index\">1.1.1. </span><a class=\"markdownIt-Anchor\" href=\"#positive-lookahead-with-and-negative-lookahead-with\"></a> Positive lookahead with <code>\\@=</code> and negative lookahead with <code>\\@!</code></h3>\n<figure class=\"highlight tex\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">quick fox quick dog quick fox</span><br><span class=\"line\">quick dog quick fox</span><br><span class=\"line\">dog fox</span><br></pre></td></tr></tbody></table></figure>\n<p>Find <code>quick</code> if followed by <code>dog</code> with <code>/quick\\( dog\\)\\@=</code>.</p>\n<p>Find <code>quick</code> if not followed by <code>dog</code> with <code>/quick\\( dog\\)\\@!</code>.</p>\n<h3 id=\"positive-lookbehind-with-and-negative-lookbehind-with\"><span class=\"post-title-index\">1.1.2. </span><a class=\"markdownIt-Anchor\" href=\"#positive-lookbehind-with-and-negative-lookbehind-with\"></a> Positive Lookbehind with <code>\\@&lt;=</code> and negative Lookbehind with <code>\\@&lt;!</code></h3>\n<p>Find <code>fox</code> preceded by <code>quick</code> with <code>\\(quick \\)\\@&lt;=fox</code>.</p>\n<p>Find <code>fox</code> not preceded by <code>quick</code> with <code>\\(quick \\)\\@&lt;!fox</code>.</p>\n</body></html>","site":{"data":{}},"excerpt":"<html><head></head><body></body></html>","more":"<h1 id=\"regular-expressions-in-vim\"><a class=\"markdownIt-Anchor\" href=\"#regular-expressions-in-vim\"></a> Regular Expressions in Vim</h1>\n<h2 id=\"lookahead-and-lookbehind\"><a class=\"markdownIt-Anchor\" href=\"#lookahead-and-lookbehind\"></a> Lookahead and Lookbehind</h2>\n<p>Directly some examples.</p>\n<p>See <code>:help /\\@=</code>, <code>:help /\\@!</code>, <code>:help /\\@&lt;=</code>, and <code>:help /\\@&lt;!</code> for detail.</p>\n<h3 id=\"positive-lookahead-with-and-negative-lookahead-with\"><a class=\"markdownIt-Anchor\" href=\"#positive-lookahead-with-and-negative-lookahead-with\"></a> Positive lookahead with <code>\\@=</code> and negative lookahead with <code>\\@!</code></h3>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">quick fox quick dog quick fox</span><br><span class=\"line\">quick dog quick fox</span><br><span class=\"line\">dog fox</span><br></pre></td></tr></table></figure>\n<p>Find <code>quick</code> if followed by <code>dog</code> with <code>/quick\\( dog\\)\\@=</code>.</p>\n<p>Find <code>quick</code> if not followed by <code>dog</code> with <code>/quick\\( dog\\)\\@!</code>.</p>\n<h3 id=\"positive-lookbehind-with-and-negative-lookbehind-with\"><a class=\"markdownIt-Anchor\" href=\"#positive-lookbehind-with-and-negative-lookbehind-with\"></a> Positive Lookbehind with <code>\\@&lt;=</code> and negative Lookbehind with <code>\\@&lt;!</code></h3>\n<p>Find <code>fox</code> preceded by <code>quick</code> with <code>\\(quick \\)\\@&lt;=fox</code>.</p>\n<p>Find <code>fox</code> not preceded by <code>quick</code> with <code>\\(quick \\)\\@&lt;!fox</code>.</p>\n"}],"PostAsset":[{"_id":"source/_posts/An-Introduction-to-Git/git.jpg","slug":"git.jpg","post":"cl0thb1hq0003gquleqzn8k7j","modified":0,"renderable":0},{"_id":"source/_posts/First-Step-to-RL/policy_network.py","slug":"policy_network.py","post":"cl0thb1hx000cgquld3xogjs2","modified":0,"renderable":0},{"_id":"source/_posts/First-Step-to-RL/q_learning.py","slug":"q_learning.py","post":"cl0thb1hx000cgquld3xogjs2","modified":0,"renderable":0},{"_id":"source/_posts/Tips-in-Papers/ADCM.jpg","slug":"ADCM.jpg","post":"cl0thb1i5000pgqul21aoc3us","modified":0,"renderable":0},{"_id":"source/_posts/Tips-in-Papers/Saccader_Cell.jpg","slug":"Saccader_Cell.jpg","post":"cl0thb1i5000pgqul21aoc3us","modified":0,"renderable":0},{"_id":"source/_posts/Tips-in-Papers/Saccader_Over.jpg","slug":"Saccader_Over.jpg","post":"cl0thb1i5000pgqul21aoc3us","modified":0,"renderable":0},{"_id":"source/_posts/Tips-in-Papers/Saccader_eq1.jpg","slug":"Saccader_eq1.jpg","post":"cl0thb1i5000pgqul21aoc3us","modified":0,"renderable":0},{"_id":"source/_posts/Tips-in-Papers/Saccader_eq2.jpg","slug":"Saccader_eq2.jpg","post":"cl0thb1i5000pgqul21aoc3us","modified":0,"renderable":0},{"_id":"source/_posts/Tips-in-Papers/Saccader_eq3.jpg","slug":"Saccader_eq3.jpg","post":"cl0thb1i5000pgqul21aoc3us","modified":0,"renderable":0},{"_id":"source/_posts/Tips-in-Papers/Saccader_gl.jpg","slug":"Saccader_gl.jpg","post":"cl0thb1i5000pgqul21aoc3us","modified":0,"renderable":0},{"_id":"source/_posts/Tips-in-Papers/Tnet_over.jpg","slug":"Tnet_over.jpg","post":"cl0thb1i5000pgqul21aoc3us","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cl0thb1hm0001gqul0l6oda4w","category_id":"cl0thb1hs0004gqulbpvqfwm0","_id":"cl0thb1hz000egqulcskwatht"},{"post_id":"cl0thb1hu0007gqul2ljs4cm9","category_id":"cl0thb1hx000agqul4h2j8yl1","_id":"cl0thb1ib001egqul5ebsci72"},{"post_id":"cl0thb1hu0007gqul2ljs4cm9","category_id":"cl0thb1ia0016gqulenq1dwuo","_id":"cl0thb1ic001hgqule3qa6gxk"},{"post_id":"cl1vso4bk0000b8ul65dgd4ti","category_id":"cl0thb1hs0004gqulbpvqfwm0","_id":"cl1vso4bq0002b8ulds1f0elw"},{"post_id":"cl0thb1hq0003gquleqzn8k7j","category_id":"cl0thb1hs0004gqulbpvqfwm0","_id":"cl1vsr3rb00026hulejma9stb"},{"post_id":"cl0thb1hq0003gquleqzn8k7j","category_id":"cl1vsr3r700006hulhsm09xjs","_id":"cl1vsr3rb00036hul0x0pbtpt"},{"post_id":"cl0thb1i4000ngqulbodtej4b","category_id":"cl0thb1hs0004gqulbpvqfwm0","_id":"cl1vsr3rb00046hul8gbph8w9"},{"post_id":"cl0thb1i4000ngqulbodtej4b","category_id":"cl1vsr3ra00016hul8fo96y0s","_id":"cl1vsr3rb00056hul91476tqc"},{"post_id":"cl0thb1hv0008gqul493vbdhl","category_id":"cl0thb1hs0004gqulbpvqfwm0","_id":"cl1vu9wqd0004kdul8l4a2rcp"},{"post_id":"cl0thb1hv0008gqul493vbdhl","category_id":"cl1vu9wqb0001kdul0g670pic","_id":"cl1vu9wqd0005kdulba6m5f1b"},{"post_id":"cl0thb1hz000dgqul776ya2z1","category_id":"cl1vu9wqc0002kdulbi7f9z7x","_id":"cl1vu9wqe0007kdulekjk5v0d"},{"post_id":"cl0thb1hz000dgqul776ya2z1","category_id":"cl1vu9wqd0006kdulacqzcctm","_id":"cl1vu9wqe0008kdul34vq80mr"},{"post_id":"cl0thb1i2000jgquldqobh02f","category_id":"cl1vu9wqc0002kdulbi7f9z7x","_id":"cl1vu9wr4000dkdulgi9y91w1"},{"post_id":"cl0thb1i2000jgquldqobh02f","category_id":"cl1vu9wr10009kdul8x2octli","_id":"cl1vu9wr5000fkdul23pwgh5b"},{"post_id":"cl0thb1hw0009gqulc4uv70a4","category_id":"cl1vu9wqc0002kdulbi7f9z7x","_id":"cl1vu9wr5000gkdulgm27h302"},{"post_id":"cl0thb1hw0009gqulc4uv70a4","category_id":"cl1vu9wr4000bkdul0u0u15pj","_id":"cl1vu9wr6000ikdulgb5gd2g8"},{"post_id":"cl0thb1i6000tgqul8hxt3bld","category_id":"cl1vu9wqc0002kdulbi7f9z7x","_id":"cl1vu9wr6000jkdul1zxjbk11"},{"post_id":"cl0thb1i6000tgqul8hxt3bld","category_id":"cl1vu9wr5000ekdulbg423r82","_id":"cl1vu9wr6000kkdul6lsndl0o"},{"post_id":"cl0thb1i1000hgqul1can83ic","category_id":"cl1vu9wqc0002kdulbi7f9z7x","_id":"cl1vu9wr6000lkdul54ah5ayw"},{"post_id":"cl0thb1i1000hgqul1can83ic","category_id":"cl1vu9wr5000hkdul3zknafxd","_id":"cl1vu9wr6000mkdul6fd61i78"},{"post_id":"cl0thb1i5000pgqul21aoc3us","category_id":"cl1vu9wqc0002kdulbi7f9z7x","_id":"cl1vuc59800017nul9jg02gpw"},{"post_id":"cl0thb1i5000pgqul21aoc3us","category_id":"cl1vu9wr10009kdul8x2octli","_id":"cl1vuc59800027nulgb4kbfta"},{"post_id":"cl0thb1hx000cgquld3xogjs2","category_id":"cl1vu9wqc0002kdulbi7f9z7x","_id":"cl1vuc59900037nul6k99fxey"},{"post_id":"cl0thb1hx000cgquld3xogjs2","category_id":"cl1vuc59500007nul8hxobzie","_id":"cl1vuc59900047nulgogg0cj4"}],"PostTag":[{"post_id":"cl0thb1hm0001gqul0l6oda4w","tag_id":"cl0thb1ht0005gqul2ze78n6k","_id":"cl0thb1i2000igqulc7sg47bq"},{"post_id":"cl0thb1hm0001gqul0l6oda4w","tag_id":"cl0thb1hx000bgqul9iov2783","_id":"cl0thb1i3000kgqul1iysg7uv"},{"post_id":"cl0thb1hq0003gquleqzn8k7j","tag_id":"cl0thb1hz000ggqul2ncn1zgd","_id":"cl0thb1i5000ogqulbpa786ay"},{"post_id":"cl0thb1hu0007gqul2ljs4cm9","tag_id":"cl0thb1i3000mgqul7tls2wf7","_id":"cl0thb1i7000ugqul35b97t4k"},{"post_id":"cl0thb1hw0009gqulc4uv70a4","tag_id":"cl0thb1i90013gqul0xxegr00","_id":"cl0thb1ic001igqul6uke0hn3"},{"post_id":"cl0thb1hw0009gqulc4uv70a4","tag_id":"cl0thb1ia0018gqul56g86of8","_id":"cl0thb1ic001lgqul48kbd13e"},{"post_id":"cl0thb1hw0009gqulc4uv70a4","tag_id":"cl0thb1ib001dgqul6ynrg8k0","_id":"cl0thb1ic001ngqul5gqlckji"},{"post_id":"cl0thb1hx000cgquld3xogjs2","tag_id":"cl0thb1ib001ggqulehgnfbcq","_id":"cl0thb1id001qgqulfwuw48ba"},{"post_id":"cl0thb1hz000dgqul776ya2z1","tag_id":"cl0thb1ic001mgqulg2on6bek","_id":"cl0thb1id001tgqul3fsq7nbf"},{"post_id":"cl0thb1i1000hgqul1can83ic","tag_id":"cl0thb1id001rgqul6keqffry","_id":"cl0thb1id001wgqulakoa09es"},{"post_id":"cl0thb1i2000jgquldqobh02f","tag_id":"cl0thb1i90013gqul0xxegr00","_id":"cl0thb1ie0021gqul9q6z8qhg"},{"post_id":"cl0thb1i2000jgquldqobh02f","tag_id":"cl0thb1ie001ygqulgdsj2tp6","_id":"cl0thb1ie0022gquld2j725rs"},{"post_id":"cl0thb1i2000jgquldqobh02f","tag_id":"cl0thb1ib001dgqul6ynrg8k0","_id":"cl0thb1if0024gqul4h977ut4"},{"post_id":"cl0thb1i4000ngqulbodtej4b","tag_id":"cl0thb1ie0020gqul5auacpuu","_id":"cl0thb1if0025gqulgv9beew9"},{"post_id":"cl0thb1i5000pgqul21aoc3us","tag_id":"cl0thb1ie001ygqulgdsj2tp6","_id":"cl0thb1if0028gquldq737a9v"},{"post_id":"cl0thb1i5000pgqul21aoc3us","tag_id":"cl0thb1i90013gqul0xxegr00","_id":"cl0thb1if0029gqulfzjm0ihy"},{"post_id":"cl0thb1i6000tgqul8hxt3bld","tag_id":"cl0thb1if0027gqul45f74fo8","_id":"cl0thb1ig002cgqul7lz0g02p"},{"post_id":"cl0thb1i6000tgqul8hxt3bld","tag_id":"cl0thb1if002agqulfmbd9j8x","_id":"cl0thb1ig002dgqul7exscsw1"},{"post_id":"cl0thb1i6000tgqul8hxt3bld","tag_id":"cl0thb1ig002bgqulac5h9bmf","_id":"cl0thb1ig002egqulem4qejxs"},{"post_id":"cl1vso4bk0000b8ul65dgd4ti","tag_id":"cl1vso4bn0001b8ulhlde76hl","_id":"cl1vso4bq0003b8ul250x6ye0"},{"post_id":"cl0thb1hv0008gqul493vbdhl","tag_id":"cl1vu9wq80000kdul7akv4cr7","_id":"cl1vu9wqc0003kdulc2zx4cq8"}],"Tag":[{"name":"Algorithm","_id":"cl0thb1ht0005gqul2ze78n6k"},{"name":"Programming","_id":"cl0thb1hx000bgqul9iov2783"},{"name":"Git","_id":"cl0thb1hz000ggqul2ncn1zgd"},{"name":"Hexo","_id":"cl0thb1i3000mgqul7tls2wf7"},{"name":"vim","_id":"cl0thb1i6000sgqul16ud1tcu"},{"name":"markdown","_id":"cl0thb1i8000xgquldg0b3stv"},{"name":"vimtex","_id":"cl0thb1i90010gqul3uzx69hk"},{"name":"Personal Thought","_id":"cl0thb1i90013gqul0xxegr00"},{"name":"Experiments","_id":"cl0thb1ia0018gqul56g86of8"},{"name":"private","_id":"cl0thb1ib001dgqul6ynrg8k0"},{"name":"Reinforcement Learning","_id":"cl0thb1ib001ggqulehgnfbcq"},{"name":"Topological Data Analysis","_id":"cl0thb1ic001mgqulg2on6bek"},{"name":"Multi Task Training","_id":"cl0thb1id001rgqul6keqffry"},{"name":"Papers","_id":"cl0thb1ie001ygqulgdsj2tp6"},{"name":"Linux","_id":"cl0thb1ie0020gqul5auacpuu"},{"name":"Natural Language Processing","_id":"cl0thb1if0027gqul45f74fo8"},{"name":"Transformer","_id":"cl0thb1if002agqulfmbd9j8x"},{"name":"BERT","_id":"cl0thb1ig002bgqulac5h9bmf"},{"name":"Regex","_id":"cl1vso4bn0001b8ulhlde76hl"},{"name":"Vim","_id":"cl1vu9wq80000kdul7akv4cr7"},{"name":"Machine Learning","_id":"cl1vu9wr2000akdulhg5xggq9"}]}}